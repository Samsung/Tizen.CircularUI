@startuml CirclePage.png

package "Xamarin.Forms" {
    class ContentPage
}

package "Extension.Wearable" {
    class RotaryEventHandler
    class RotaryEventArgs {
        IsClockwise: bool
    }
    interface IRotaryFocusable {
        --events--
        Rotated : RotaryEventHandler
    }
    class CirclePage {
        --BindableProperty--
        {static} +ActionButtonProperty
        {static} +RotaryFocusTargetNameProperty
        {static} +RotaryFocusObjectProperty
        --Property--
        +RotaryFocusTargetName: string
        +RotaryFocusObject: IRotaryFocusable
        +CircleSurfaceItems: IList<ICircleSurfaceItem>
        +ActionButton: MenuItem
    }
    interface ICircleSurfaceItem {
        IsVisible: bool
        IsEnabled: bool
    }

    CirclePage -u-|> ContentPage
    CirclePage *-d- IRotaryFocusable
    CirclePage *-d- ICircleSurfaceItem
    IRotaryFocusable *-- RotaryEventHandler
    RotaryEventHandler *-- RotaryEventArgs
}

package "Extension.Wearable.Renderer" {
    class CirclePageRenderer
    CirclePageRenderer .l. CirclePage
}

package "ElmSharp.Wearable" {
    class CircleSurface
    CirclePageRenderer *.. CircleSurface
}

package "ElmSharp" {

    class Layout

    CirclePageRenderer *.. Layout
}

@enduml

@startuml CircleDateTimeSelector.png

package "Xamarin.Forms" {
    class View
}

package "Extension.Wearable" {
    interface IRotaryFocusable
    class CircleDateTimeSelector {
        --BindableProperty--
        {static} +MarkerColorProperty
        {static} +ValueTypeProperty
        {static} +DateTimeProperty
        {static} +MaximumDateProperty
        {static} +MinimumDateProperty
        {static} +IsVisibleOfYearProperty
        {static} +IsVisibleOfMonthProperty
        {static} +IsVisibleOfDateProperty
        {static} +IsVisibleOfHourProperty
        {static} +IsVisibleOfMinuteProperty
        {static} +IsVisibleOfAmPmProperty

        --Property--
        +MarkerColor: Color
        +ValueType: DateTimeType
        +DateTime: DateTime
        +MaximumDate: DateTime
        +MinimumDate: DateTime
        +IsVisibleOfYear: bool
        +IsVisibleOfMonth: bool
        +IsVisibleOfDate: bool
        +IsVisibleOfHour: bool
        +IsVisibleOfMinute: bool
        +IsVisibleOfAmPm: bool
    }
    enum DateTimeType {
        Time,
        Date
    }

    CircleDateTimeSelector -u-|> View
    CircleDateTimeSelector -u-|> IRotaryFocusable
    CircleDateTimeSelector *-d- DateTimeType
}

package "Extension.Wearable.Renderer" {
    class CircleDateTimeSelectorRenderer
    CircleDateTimeSelectorRenderer .u. CircleDateTimeSelector
}

package "ElmSharp.Wearable" {
    class CircleDatetimeSelector
    CircleDateTimeSelectorRenderer *.d. CircleDatetimeSelector
}
@enduml

@startuml CircleDateTimeSelector_SceneGraph.png
!include CirclePage_SceneGraph.wsd

node CircleDatetimeSelector #87ceeb [
    CircleDatetimeSelector
    "datepicker/circle" or "timepicker/circle"
]

ContentArea --> CircleDatetimeSelector
CircleSurface --> CircleDatetimeSelector

@enduml

@startuml CircleListView.png

package "Xamarin.Forms" {
    class ListView
}

package "Extension.Wearable" {
    interface IRotaryFocusable
    class CircleListView

    CircleListView -u-|> ListView
    CircleListView -u-|> IRotaryFocusable
}

package "Extension.Wearable.Renderer" {
    class CircleListViewRenderer
    CircleListViewRenderer .u. CircleListView
}

package "ElmSharp.Wearable" {
    class CircleGenList
    CircleListViewRenderer *.d. CircleGenList
}
@enduml

@startuml CircleListView_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleGenList #87ceeb [
    CircleGenList
]
ContentArea --> CircleGenList
CircleSurface --> CircleGenList

@enduml

@startuml CircleProgressBarSurfaceItem.png

package "Extension.Wearable" {
    interface ICircleSurfaceItem {
        IsVisible: bool
    }
    class CircleProgressBarSurfaceItem {
        --BindableProperty--
        +BackgroundAngleProperty
        +BackgroundAngleOffsetProperty
        +BackgroundColorProperty
        +BackgroundLineWidthProperty
        +BackgroundRadiusProperty

        +BarAngleProperty
        +BarAngleOffsetProperty
        +BarAngleMaximumProperty
        +BarAngleMinimumProperty
        +BarColorProperty
        +BarLineWidthProperty
        +BarRadiusProperty

        +IsVisibleProperty
        +ValueProperty
        +IsEnabledProperty

        --Property--
        +BackgroundAngle: double
        +BackgroundAngleOffset: double
        +BackgroundColor: Color
        +BackgroundLineWidth: int
        +BackgroundRadius: double

        +BarAngle: double
        +BarAngleOffset: double
        +BarAngleMaximum: double
        +BarAngleMinimum: double
        +BarColor: Color
        +BarLineWidth: int
        +BarRadius: double

        +IsVisible: bool
        +Value: double
        +IsEnabled: bool
    }

    CircleProgressBarSurfaceItem -u-|> ICircleSurfaceItem
}

package "Extension.Wearable.Renderer" {
    class CircleProgressBarSurfaceItemRenderer

    CircleProgressBarSurfaceItemRenderer .l. CircleProgressBarSurfaceItem
}

package "ElmSharp.Wearable" {
    class CircleProgressBar

    CircleProgressBar <|-u- CircleProgressBarSurfaceItemRenderer
}
@enduml

@startuml CircleProgressBarSurfaceItem_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleProgressBar #87ceeb [
    CircleProgressBar
]
CircleSurface --> CircleProgressBar

@enduml

@startuml CircleScrollView.png
package "Xamarin.Forms" {
    class ScrollView
}

package "Extension.Wearable" {
    interface IRotaryFocusable
    class CircleScrollView

    CircleScrollView -u-|> ScrollView
    CircleScrollView -u-|> IRotaryFocusable
}

package "Extension.Wearable.Renderer" {
    class CircleScrollViewRenderer
    CircleScrollViewRenderer .u. CircleScrollView
}

package "ElmSharp.Wearable" {
    class CircleScroller
    CircleScrollViewRenderer *.d. CircleScroller
}
@enduml

@startuml CircleScrollView_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleScroller #87ceeb [
    CircleScroller
]
ContentArea --> CircleScroller
CircleSurface --> CircleScroller

@enduml

@startuml CircleSliderSurfaceItem.png

package "Extension.Wearable" {
    interface IRotaryFocusable
    interface ICircleSurfaceItem {
        IsVisible: bool
    }
    class CircleSliderSurfaceItem {
        --BindableProperty--
        +BackgroundAngleProperty
        +BackgroundAngleOffsetProperty
        +BackgroundColorProperty
        +BackgroundLineWidthProperty
        +BackgroundRadiusProperty

        +BarAngleProperty
        +BarAngleOffsetProperty
        +BarAngleMaximumProperty
        +BarAngleMinimumProperty
        +BarColorProperty
        +BarLineWidthProperty
        +BarRadiusProperty

        +MinimumProperty
        +MaximumProperty

        +ValueProperty
        +IncrementProperty

        +IsVisibleProperty
        +IsEnabledProperty

        --Property--
        +BackgroundAngle: double
        +BackgroundAngleOffset: double
        +BackgroundColor: Color
        +BackgroundLineWidth: int
        +BackgroundRadius: double

        +BarAngle: double
        +BarAngleOffset: double
        +BarAngleMaximum: double
        +BarAngleMinimum: double
        +BarColor: Color
        +BarLineWidth: int
        +BarRadius: double

        +Minimum: double
        +Maximum: double

        +Value: double
        +Increment: double
        +IsVisible: bool
        +IsEnabled: bool
    }

    CircleSliderSurfaceItem -u-|> ICircleSurfaceItem
    CircleSliderSurfaceItem -u-|> IRotaryFocusable
}

package "Extension.Wearable.Renderer" {
    class CircleSliderSurfaceItemRenderer

    CircleSliderSurfaceItemRenderer .l. CircleSliderSurfaceItem
}

package "ElmSharp.Wearable" {
    class CircleSlider

    CircleSlider <|-u- CircleSliderSurfaceItemRenderer
}
@enduml

@startuml CircleSliderSurfaceItem_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleSlider #87ceeb [
    CircleSlider
]
CircleSurface --> CircleSlider

@enduml

@startuml CircleStepper.png

package "Xamarin.Forms" {
    class Stepper
}

package "Extension.Wearable" {
    interface IRotaryFocusable
    class CircleStepper {
        --BindableProperty--
        {static} +MarkerColorProperty
        {static} +MarkerLineWidthProperty
        {static} +LabelFormatProperty

        --Property--
        +MarkerColor: Color
        +MarkerLineWidth: int
        +LabelFormat: string
    }

    CircleStepper -u-|> Stepper
    CircleStepper -u-|> IRotaryFocusable
}

package "Extension.Wearable.Renderer" {
    class CircleStepperRenderer
    CircleStepperRenderer .u. CircleStepper
}

package "ElmSharp.Wearable" {
    class CircleSpinner
    CircleStepperRenderer *.d. CircleSpinner
}
@enduml

@startuml CircleStepper_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleSpinner #87ceeb [
    CircleSpinner
]
ContentArea --> CircleSpinner
CircleSurface --> CircleSpinner

@enduml

@startuml TwoButtonPage.png

package "Xamarin.Forms" {
    class ContentPage
}

package "Extension.Wearable" {
    class TwoButtonPage {
        --BindableProperty--
        {static} +TitleProperty
        {static} +ContentProperty
        --Property--
        Content: View
        FirstButton: MenuItem
        SecondButton: MenuItem
        Overlap: bool
    }

    TwoButtonPage -u-|> ContentPage 
}

package "Extension.Wearable.Renderer" {
    class TwoButtonPageRenderer

    TwoButtonPageRenderer .l. TwoButtonPage
}

package "ElmSharp" {
    class Layout
    TwoButtonPageRenderer *.. Layout
}

@enduml

@startuml TwoButtonPage_SceneGraph.png

node BaseLayout [
    Layout
    "popup/base/circle"
]

node ButtonLayout [
    Layout
    "popup/buttons2/popup/circle"
]

node ContentLayout [
    Layout
    "layout/popup/content/circle/buttons2"
]

node FirstButton [
    Button
    "popup/circle/left"
]

node SecondButton [
    Button
    "popup/circle/right"
]

interface FirstButtonImage [
    Image
]

interface SecondButtonImage [
    Image
]

() ContentArea
() TitleArea

BaseLayout --> ButtonLayout : "elm.swallow.action_area"
BaseLayout --> ContentLayout : "elm.swallow.content"
ButtonLayout --> FirstButton : "actionbtn1"
ButtonLayout --> SecondButton : "actionbtn2"
ContentLayout --> ContentArea : "elm.swallow.content"
ContentLayout --> TitleArea : "elm.text.title"


FirstButton ..> FirstButtonImage : "elm.swallow.content"
SecondButton ..> SecondButtonImage : "elm.swallow.content"
@enduml

@startuml TwoButtonPopup.png

package "Extension.Wearable" {
    class TwoButtonPopup {
        --BindableProperty--
        {static} +TitleProperty
        {static} +ContentProperty
        {static} +TextProperty
        {static} +FirstButtonProperty
        {static} +SecondButtonProperty
        --Property--
        Title: string
        Content: View
        Text: string
        FirstButton: MenuItem
        SecondButton: MenuItem
        --Event--
        +BackButtonPressed
    }
}

package "Extension.Wearable.Renderer" {
    class TwoButtonPopupImplementation

    TwoButtonPopupImplementation .l. TwoButtonPopup
}

package "ElmSharp" {
    class Popup
    TwoButtonPopupImplementation *.. Popup
}

@enduml

@startuml TwoButtonPopup_SceneGraph.png

node TwoButtonPopup [
    Popup
]

node BaseLayout [
    Layout
    "layout/popup/content/circle/buttons2"
]

node FirstButton [
    Button
    "popup/circle/left"
]

node SecondButton [
    Button
    "popup/circle/right"
]

interface FirstButtonImage [
    Image
]

interface SecondButtonImage [
    Image
]

() ContentArea
() TitleArea
() TextArea

TwoButtonPopup --> BaseLayout :  "elm.swallow.content"
BaseLayout --> ContentArea : "elm.swallow.content"
BaseLayout --> TitleArea : "elm.text.title"
BaseLayout --> TextArea : "elm.text.text"
BaseLayout --> FirstButton : "button1"
BaseLayout --> SecondButton : "button2"

FirstButton ..> FirstButtonImage : "elm.swallow.content"
SecondButton ..> SecondButtonImage : "elm.swallow.content"
@enduml

@startuml InformationPopup.png

package "Extension.Wearable" {
    class InformationPopup {
        --BindableProperty--
        {static} +IsProgressRunningProperty
        {static} +TitleProperty
        {static} +TextProperty
        {static} +BottomButtonButtonProperty
        --Property--
        IsProgressRunning: bool
        Title: string
        Text: string
        BottomButton: MenuItem
        --Event--
        +BackButtonPressed
    }
}

package "Extension.Wearable.Renderer" {
    class InformationPopupImplementation

    InformationPopupImplementation .l. InformationPopup
}

package "ElmSharp" {
    class Popup
    InformationPopupImplementation *.. Popup
}

@enduml

@startuml InformationPopup_SceneGraph.png

node InformationPopup [
    Popup
]

node BaseLayout [
    Layout
    "layout/popup/content/circle"
]

node BottomButton [
    Button
    "bottom"
]


interface BottomButtonImage [
    Image
]

() ProgressArea
() TitleArea
() TextArea

InformationPopup --> BaseLayout :  "elm.swallow.content"
BaseLayout --> ProgressArea : "elm.swallow.content"
BaseLayout --> TitleArea : "elm.text.title"
BaseLayout --> TextArea : "elm.text.text"
BaseLayout --> BottomButton : "button1"

BottomButton ..> BottomButtonImage : "elm.swallow.content"
@enduml
