{
  "api/Tizen.Wearable.CircularUI.Forms.GoogleMapOption.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.GoogleMapOption.html",
    "title": "Struct GoogleMapOption",
    "keywords": "Struct GoogleMapOption The GoogleMapOption struct used to define the properties that can be set on a GoogleMapView. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public struct GoogleMapOption Constructors GoogleMapOption(LatLng, GoogleMapType, Int32, Boolean, Boolean, ZoomControlPosition) Constructor a new GoogleMapOption structure Declaration public GoogleMapOption(LatLng center, GoogleMapType type = GoogleMapType.Roadmap, int zoomLevel = 10, bool visibleZoomControl = false, bool enableGesture = true, ZoomControlPosition controlPosition = ZoomControlPosition.RightBottom) Parameters Type Name Description LatLng center GoogleMapType type System.Int32 zoomLevel System.Boolean visibleZoomControl System.Boolean enableGesture ZoomControlPosition controlPosition Properties Center Gets or sets a center postion of GoogleMapOption. This value set center of MapView. But getting value not mean current center of MapView because value can't reflect user interaction. Declaration public LatLng Center { get; set; } Property Value Type Description LatLng HasGestureEnabled Gets or sets a boolean value that indicates whether zoom and pan interaction is enable. Declaration public bool HasGestureEnabled { get; set; } Property Value Type Description System.Boolean IsZoomControlVisible Gets or sets a boolean value that indicates whether zoom control is visible. Declaration public bool IsZoomControlVisible { get; set; } Property Value Type Description System.Boolean MapType Gets or sets a Google Map type value of GoogleMapOption. Declaration public GoogleMapType MapType { get; set; } Property Value Type Description GoogleMapType Zoom Gets or sets a zoom level of GoogleMapOption. This value set zoom level of MapView. But getting value not mean current zoom level of MapView because value can't reflect user interaction. Declaration public double Zoom { get; set; } Property Value Type Description System.Double ZoomControlPosition Gets or sets a boolean value that indicates whether zoom and pan interaction is enable. Declaration public ZoomControlPosition ZoomControlPosition { get; set; } Property Value Type Description ZoomControlPosition Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() ToString() Returns the values of GoogleMapOption\". Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Equality(GoogleMapOption, GoogleMapOption) Declaration public static bool operator ==(GoogleMapOption left, GoogleMapOption right) Parameters Type Name Description GoogleMapOption left GoogleMapOption right Returns Type Description System.Boolean Inequality(GoogleMapOption, GoogleMapOption) Declaration public static bool operator !=(GoogleMapOption left, GoogleMapOption right) Parameters Type Name Description GoogleMapOption left GoogleMapOption right Returns Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html",
    "title": "Class SelectedEventArgs",
    "keywords": "Class SelectedEventArgs Event arguments for events of RadioButton. Inheritance System.Object System.EventArgs SelectedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class SelectedEventArgs : EventArgs Constructors SelectedEventArgs(String, Boolean) Creates a new SelectedEventArgs object that represents a change from RadioButton. Declaration public SelectedEventArgs(string value, bool isSelected) Parameters Type Name Description System.String value The boolean value that checks whether the RadioButton is selected. System.Boolean isSelected Properties IsSelected Gets the IsSelected for the SelectedEventArgs object. Declaration public bool IsSelected { get; } Property Value Type Description System.Boolean Value Gets the Value for the SelectedEventArgs object. Declaration public string Value { get; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IGoogleMapViewController.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IGoogleMapViewController.html",
    "title": "Interface IGoogleMapViewController",
    "keywords": "Interface IGoogleMapViewController For internal use by renderers. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IGoogleMapViewController : IViewController Events LoadMapRequested Internal Event for GoogleMapView renderer Declaration event EventHandler LoadMapRequested Event Type Type Description System.EventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html",
    "title": "Class PopupEntry",
    "keywords": "Class PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Inheritance System.Object PopupEntry Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class PopupEntry : Entry Fields IsPopupOpenedProperty BindableProperty. Identifies whether Popup is opended or not. Declaration public static readonly BindableProperty IsPopupOpenedProperty Field Value Type Description BindableProperty PopupBackgroundColorProperty BindableProperty. Identifies color of Popup background. Declaration public static readonly BindableProperty PopupBackgroundColorProperty Field Value Type Description BindableProperty Properties IsPopupOpened Gets or sets a status of Popup's open. Declaration public bool IsPopupOpened { get; set; } Property Value Type Description System.Boolean PopupBackgroundColor Gets or sets a color value of Popup. Declaration public Color PopupBackgroundColor { get; set; } Property Value Type Description Color"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html",
    "title": "Class CircleStackLayout",
    "keywords": "Class CircleStackLayout A container to layout children linear in the circular area. Inheritance System.Object CircleStackLayout Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStackLayout : StackLayout Methods LayoutChildren(Double, Double, Double, Double) Declaration protected override void LayoutChildren(double x, double y, double width, double height) Parameters Type Name Description System.Double x System.Double y System.Double width System.Double height OnMeasure(Double, Double) Declaration protected override SizeRequest OnMeasure(double widthConstraint, double heightConstraint) Parameters Type Name Description System.Double widthConstraint System.Double heightConstraint Returns Type Description SizeRequest"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Marker.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Marker.html",
    "title": "Class Marker",
    "keywords": "Class Marker A struct that has a latitude and longitude. Inheritance System.Object Marker Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Marker : Element Fields AddressProperty BindableProperty. Identifies the Address bindable property. Declaration public static readonly BindableProperty AddressProperty Field Value Type Description BindableProperty DescriptionProperty BindableProperty. Identifies the Description bindable property. Declaration public static readonly BindableProperty DescriptionProperty Field Value Type Description BindableProperty IsPopupOpenedProperty BindableProperty. Identifies the IsPopupOpened bindable property. Declaration public static readonly BindableProperty IsPopupOpenedProperty Field Value Type Description BindableProperty PositionProperty BindableProperty. Identifies the Position bindable property. Declaration public static readonly BindableProperty PositionProperty Field Value Type Description BindableProperty Properties Address Gets or sets an address string of Marker. Declaration public string Address { get; set; } Property Value Type Description System.String Description Gets or sets a label string of Marker pop-up. Declaration public string Description { get; set; } Property Value Type Description System.String IsPopupOpened Gets or sets a boolean value that indicates whether Marker popup is opened. Declaration public bool IsPopupOpened { get; set; } Property Value Type Description System.Boolean Position Gets or sets a position of Marker. Declaration public LatLng Position { get; set; } Property Value Type Description LatLng Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators Equality(Marker, Marker) Declaration public static bool operator ==(Marker left, Marker right) Parameters Type Name Description Marker left Marker right Returns Type Description System.Boolean Inequality(Marker, Marker) Declaration public static bool operator !=(Marker left, Marker right) Parameters Type Name Description Marker left Marker right Returns Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Chart.Forms.FormsCircularUIChart.html": {
    "href": "api/Tizen.Wearable.CircularUI.Chart.Forms.FormsCircularUIChart.html",
    "title": "Class FormsCircularUIChart",
    "keywords": "Class FormsCircularUIChart Inheritance System.Object FormsCircularUIChart Namespace : Tizen.Wearable.CircularUI.Chart.Forms Assembly : Tizen.Wearable.CircularUI.Chart.Forms.Renderer.dll Syntax public static class FormsCircularUIChart : object Fields Tag Declaration public static readonly string Tag Field Value Type Description System.String Properties IsInitialized Declaration public static bool IsInitialized { get; } Property Value Type Description System.Boolean Methods Init() Declaration public static void Init()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html",
    "title": "Class TizenConfirmPopupEffect",
    "keywords": "Class TizenConfirmPopupEffect Inheritance System.Object TizenConfirmPopupEffect Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenConfirmPopupEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() OnDetached() Declaration protected override void OnDetached()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html",
    "title": "Delegate RotaryEventHandler",
    "keywords": "Delegate RotaryEventHandler Delegate for a triggering rotary event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public delegate void RotaryEventHandler(RotaryEventArgs args); Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html",
    "title": "Class CirclePage",
    "keywords": "Class CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. Inheritance System.Object CirclePage Implements ICircleSurfaceProvider IBezelInteractionRouter Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [Obsolete(\"CirclePage is obsolete as of version 1.5.0. Please use Xamarin.Forms.ContentPage, CircleSurfaceView, and BezelInteracationPage instead.\")] public class CirclePage : ContentPage, ICircleSurfaceProvider, IBezelInteractionRouter Constructors CirclePage() Creates and initializes a new instance of the CirclePage class. Declaration public CirclePage() Fields ActionButtonProperty BindableProperty. Identifies the ActionButton bindable property. Declaration public static readonly BindableProperty ActionButtonProperty Field Value Type Description BindableProperty RotaryFocusObjectProperty BindableProperty. Identifies the RotaryFocusObject bindable property Key. Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description BindableProperty Properties ActionButton Gets or sets ActionButton that presents a menu item and associates it with a command Declaration public ActionButtonItem ActionButton { get; set; } Property Value Type Description ActionButtonItem CircleSurfaceItems Gets a list of CircleSurfaceItems represented through CircleSurface. Declaration public IList<ICircleSurfaceItem> CircleSurfaceItems { get; } Property Value Type Description System.Collections.Generic.IList < ICircleSurfaceItem > RotaryFocusObject Gets or sets object of RotaryFocusObject to receive bezel action(take a rotary event) from the current page. Declaration public IRotaryFocusable RotaryFocusObject { get; set; } Property Value Type Description IRotaryFocusable Methods OnAppearing() Declaration protected override void OnAppearing() OnBindingContextChanged() Declaration protected override void OnBindingContextChanged() OnDisappearing() Declaration protected override void OnDisappearing() Implements ICircleSurfaceProvider IBezelInteractionRouter"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ContextPopupEffectBehavior.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ContextPopupEffectBehavior.html",
    "title": "Class ContextPopupEffectBehavior",
    "keywords": "Class ContextPopupEffectBehavior The ContextPopupEffectBehavior is a behavior which allows you to add a context popup. Inheritance System.Object ContextPopupEffectBehavior Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ContextPopupEffectBehavior : Behavior<View> Fields AcceptCommandParameterProperty BindableProperty. Identifies the AcceptCommandParameter bindable property. Declaration public static readonly BindableProperty AcceptCommandParameterProperty Field Value Type Description BindableProperty AcceptCommandProperty BindableProperty. Identifies the AcceptCommand bindable property. AcceptCommand is executed when the Accept button is pressed. Declaration public static readonly BindableProperty AcceptCommandProperty Field Value Type Description BindableProperty AcceptTextProperty BindableProperty. Identifies the AcceptText bindable property. AcceptText is to use as Accept button Declaration public static readonly BindableProperty AcceptTextProperty Field Value Type Description BindableProperty CancelCommandParameterProperty BindableProperty. Identifies the CancelCommandParameter bindable property. Declaration public static readonly BindableProperty CancelCommandParameterProperty Field Value Type Description BindableProperty CancelCommandProperty BindableProperty. Identifies the CancelCommand bindable property. CancelCommand is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static readonly BindableProperty CancelCommandProperty Field Value Type Description BindableProperty CancelTextProperty BindableProperty. Identifies the CancelText bindable property. CancelText is to use as Cancel button Declaration public static readonly BindableProperty CancelTextProperty Field Value Type Description BindableProperty OffsetProperty BindableProperty. Identifies the Offset bindable property. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public static readonly BindableProperty OffsetProperty Field Value Type Description BindableProperty PositionOptionProperty BindableProperty. Identifies the PositionOption bindable property. Declaration public static readonly BindableProperty PositionOptionProperty Field Value Type Description BindableProperty VisibilityProperty BindableProperty. Identifies the ConfirmVisibility bindable property. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static readonly BindableProperty VisibilityProperty Field Value Type Description BindableProperty Properties AcceptCommand Gets or sets command that is executed when the Accept button is pressed. Declaration public ICommand AcceptCommand { get; set; } Property Value Type Description System.Windows.Input.ICommand AcceptCommandParameter Gets or sets command paramter that is executed when the Accept button is pressed. Declaration public object AcceptCommandParameter { get; set; } Property Value Type Description System.Object AcceptText Gets or sets text of Accept button Declaration public string AcceptText { get; set; } Property Value Type Description System.String CancelCommand Gets or sets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public ICommand CancelCommand { get; set; } Property Value Type Description System.Windows.Input.ICommand CancelCommandParameter Gets or sets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public object CancelCommandParameter { get; set; } Property Value Type Description System.Object CancelText Gets or sets text of Cancel button Declaration public string CancelText { get; set; } Property Value Type Description System.String Offset Gets or sets offset. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public Point Offset { get; set; } Property Value Type Description Point PositionOption Gets or sets position type of popup Declaration public PositionOption PositionOption { get; set; } Property Value Type Description PositionOption Visibility Gets visibility of Confirmation popup. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public bool Visibility { get; set; } Property Value Type Description System.Boolean Methods OnAttachedTo(View) Declaration protected override void OnAttachedTo(View view) Parameters Type Name Description View view OnDetachingFrom(View) Declaration protected override void OnDetachingFrom(View view) Parameters Type Name Description View view"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html",
    "title": "Class TwoButtonPageWidget",
    "keywords": "Class TwoButtonPageWidget Inheritance System.Object TwoButtonPageWidget Implements IContainable < EvasObject > Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageWidget : Background, IContainable<EvasObject> Constructors TwoButtonPageWidget(EvasObject) Declaration public TwoButtonPageWidget(EvasObject parent) Parameters Type Name Description EvasObject parent Properties Canvas Declaration public Canvas Canvas { get; } Property Value Type Description Canvas Children Declaration public IList<EvasObject> Children { get; } Property Value Type Description IList < EvasObject > Overlap Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean Methods HideButton1() Declaration public void HideButton1() HideButton2() Declaration public void HideButton2() OnUnrealize() Declaration protected override void OnUnrealize() ShowButton1(String) Declaration public void ShowButton1(string text) Parameters Type Name Description System.String text ShowButton1(String, Action) Declaration public void ShowButton1(string text, Action action) Parameters Type Name Description System.String text Action action ShowButton1(String, FileImageSource, Action) Declaration public void ShowButton1(string text, FileImageSource image, Action action) Parameters Type Name Description System.String text FileImageSource image Action action ShowButton1(String, FileImageSource, ElmSharp.Color, Action) Declaration public void ShowButton1(string text, FileImageSource image, ElmSharp.Color backgroundColor, Action action) Parameters Type Name Description System.String text FileImageSource image ElmSharp.Color backgroundColor Action action ShowButton2(String) Declaration public void ShowButton2(string text) Parameters Type Name Description System.String text ShowButton2(String, FileImageSource) Declaration public void ShowButton2(string text, FileImageSource image) Parameters Type Name Description System.String text FileImageSource image ShowButton2(String, FileImageSource, Action) Declaration public void ShowButton2(string text, FileImageSource image, Action action) Parameters Type Name Description System.String text FileImageSource image Action action ShowButton2(String, FileImageSource, ElmSharp.Color, Action) Declaration public void ShowButton2(string text, FileImageSource image, ElmSharp.Color backgroundColor, Action action) Parameters Type Name Description System.String text FileImageSource image ElmSharp.Color backgroundColor Action action Events LayoutUpdated Declaration public event EventHandler<LayoutEventArgs> LayoutUpdated Event Type Type Description EventHandler < LayoutEventArgs > Implements IContainable<>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Switch2TextCellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Switch2TextCellRenderer.html",
    "title": "Class Switch2TextCellRenderer",
    "keywords": "Class Switch2TextCellRenderer Inheritance System.Object Switch2TextCellRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class Switch2TextCellRenderer : SwitchCellRenderer Constructors Switch2TextCellRenderer() Declaration public Switch2TextCellRenderer() Switch2TextCellRenderer(String) Declaration protected Switch2TextCellRenderer(string style) Parameters Type Name Description System.String style Properties DetailPart Declaration protected string DetailPart { get; set; } Property Value Type Description System.String Methods OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) Declaration protected override bool OnCellPropertyChanged(Cell cell, string property, Dictionary<string, EvasObject> realizedView) Parameters Type Name Description Cell cell System.String property Dictionary < System.String , EvasObject > realizedView Returns Type Description System.Boolean OnGetText(Cell, String) Declaration protected override Span OnGetText(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description Span"
  },
  "api/Tizen.Wearable.CircularUI.Renderer.MediaViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Renderer.MediaViewRenderer.html",
    "title": "Class MediaViewRenderer",
    "keywords": "Class MediaViewRenderer Inheritance System.Object MediaViewRenderer Implements IMediaViewProvider Namespace : Tizen.Wearable.CircularUI.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class MediaViewRenderer : ViewRenderer<MediaView, LayoutCanvas>, IMediaViewProvider Methods OnElementChanged(ElementChangedEventArgs<MediaView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<MediaView> e) Parameters Type Name Description ElementChangedEventArgs < MediaView > e Implements IMediaViewProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html",
    "title": "Enum CheckDisplayStyle",
    "keywords": "Enum CheckDisplayStyle Enumeration for the style of the Check. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum CheckDisplayStyle Fields Name Description Default The default style is checkbox style. Onoff The toggle switch style. Small The small checkbox style. this style is only for circular devices"
  },
  "api/Tizen.Wearable.CircularUI.Forms.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms Classes ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command BezelInteractionPage The BezelInteractionPage is a ContentPage, which allows you to interact with Bezel rotation Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. Check2TextCell A Cell with two labels and a Check. CheckCell A Cell with a label and a Check. CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" CircleImage The CircleImage is view that hold an image with circle shape. The CircleImage is extension of Xamarin.Forms.Image. CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. CircleStackLayout A container to layout children linear in the circular area. CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is a behavior which allows you to add views that require CircleSurface. CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. CircleSurfaceView A subclass of Xamarin.Forms.View that can have several CircleSurfaceItem as a View not Page. CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. CircularShell A subclass of Xamarin.Forms.Shell that have additional options for circular screen. ColorMenuItem A subclass of Xamarin.Forms.MenuItem that controls the background color of the button used in the popup control. ContentButton The ContentButton is a Button, which allows you to customize the View to be displayed. ContextPopupEffectBehavior The ContextPopupEffectBehavior is a behavior which allows you to add a context popup. FlatViewCell FlatViewCell contains a developer-defined Xamarin.Forms.View. It has no fish-eye effect while ViewCell has fish-eye effect. FormsCircularUI GoogleMapView The MapView class is used to display a map on the screen. IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. InformationPopup InitOptions ItemLongPressedEventArgs Event arguments for the ItemLongPressed event of CircleListView. LayoutCanvas Marker A struct that has a latitude and longitude. MediaPlayer MediaPlayer provieds the essential components to play the media contents. MediaView The MediaView class is used to display the video output on the screen. PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. RadialProgress Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. Radio2TextCell A Cell with two labels and a RadioButton. RadioCell A Cell with a label and a RadioButton. RotaryEventArgs Event arguments for RotaryEvent. RotaryEventManager The RotaryEventManager provides an event for the global rotary event for wearable devices. SelectedEventArgs Event arguments for events of RadioButton. SelectModeImageCell An ImageCell supports a selection mode. SelectModeTextCell A TextCell supports a selection mode. SingleTextCell A Cell with a signle text. The Detail property is always ignored. Switch2TextCell A Cell with two labels and a Switch. Toast The Toast class provides properties that show simple types of messages TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. TwoButtonPopup The TwoButtonPopup describe pop-up which has circular two button, title, text, and content area. Structs GoogleMapOption The GoogleMapOption struct used to define the properties that can be set on a GoogleMapView. LatLng A struct that has a latitude and longitude. Interfaces IBezelInteractionRouter An interface to take rotary events. ICircleSurfaceConsumer The ICircleSurfaceConsumer is an interface represents the CircleSurfaceObject. ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. ICircleSurfaceProvider The ICircleSurfaceProvider is an interface providing the CircleSurface. IGoogleMapViewController For internal use by renderers. IInformationPopup The IInformationPopup is an interface to describe information pop-up which has circular bottom button, title, text, and content area IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event IRotaryService IToast This interface, which defines the ability to display simple text, is used internally. ITwoButtonPopup The ITwoButtonPopup is an interface to describe confirmation pop-up which has circular two button, title, text, and content area Enums CheckDisplayStyle Enumeration for the style of the Check. DateTimeType Enumeration for style type of CircleDateTimeSelector GoogleMapType Enumeration for the Google Map type of the MapView. PositionOption Enumeration for position type of popup RadialProgressStrokeCap ZoomControlPosition Enumeration for the Zoom control position of the GoogleMapView. Delegates RotaryEventHandler Delegate for a triggering rotary event"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ZoomControlPosition.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ZoomControlPosition.html",
    "title": "Enum ZoomControlPosition",
    "keywords": "Enum ZoomControlPosition Enumeration for the Zoom control position of the GoogleMapView. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum ZoomControlPosition Fields Name Description BottomCenter The control should be placed along the bottom center of the map LeftBottom The control should be placed along the bottom left of the map LeftCenter The control should be placed along the left center of the map. LeftTop The control should be placed along the top left of the map. RightBottom The control should be placed along the bottom right of the map RightCenter The control should be placed along the right center of the map. RightTop The control should be placed along the top right of the map. TopCenter The control should be placed along the top center of the map"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html",
    "title": "Class InformationPopupImplementation",
    "keywords": "Class InformationPopupImplementation Inheritance System.Object InformationPopupImplementation Implements IInformationPopup IDisposable Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class InformationPopupImplementation : object, IInformationPopup, IDisposable Constructors InformationPopupImplementation() Declaration public InformationPopupImplementation() Properties BottomButton Declaration public MenuItem BottomButton { get; set; } Property Value Type Description MenuItem IsProgressRunning Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler Implements IInformationPopup IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.FlatViewCell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.FlatViewCell.html",
    "title": "Class FlatViewCell",
    "keywords": "Class FlatViewCell FlatViewCell contains a developer-defined Xamarin.Forms.View. It has no fish-eye effect while ViewCell has fish-eye effect. Inheritance System.Object FlatViewCell Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class FlatViewCell : ViewCell"
  },
  "api/Tizen.Wearable.CircularUI.Forms.SelectModeTextCell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.SelectModeTextCell.html",
    "title": "Class SelectModeTextCell",
    "keywords": "Class SelectModeTextCell A TextCell supports a selection mode. Inheritance System.Object SelectModeTextCell SingleTextCell Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class SelectModeTextCell : TextCell, ISelectModeCell Fields IsSelectedProperty Identifies the On bindable property. Declaration public static readonly BindableProperty IsSelectedProperty Field Value Type Description BindableProperty IsSelectionModeEnabledProperty Identifies the Text bindable property. Declaration public static readonly BindableProperty IsSelectionModeEnabledProperty Field Value Type Description BindableProperty Properties IsSelected Gets or sets the state of the selection. This is a bindable property. Declaration public bool IsSelected { get; set; } Property Value Type Description System.Boolean IsSelectionModeEnabled Gets or sets whether to enable the selection mode or not. This is a bindable property. Declaration public bool IsSelectionModeEnabled { get; set; } Property Value Type Description System.Boolean Events SelectionChanged Triggered when IsSelected changed. Declaration public event EventHandler<ToggledEventArgs> SelectionChanged Event Type Type Description System.EventHandler < ToggledEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.SingleTextCellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.SingleTextCellRenderer.html",
    "title": "Class SingleTextCellRenderer",
    "keywords": "Class SingleTextCellRenderer Inheritance System.Object SelectModeTextCellRenderer SingleTextCellRenderer Inherited Members SelectModeTextCellRenderer.SelectionPart SelectModeTextCellRenderer.OnGetContent(Cell, String) SelectModeTextCellRenderer.OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class SingleTextCellRenderer : SelectModeTextCellRenderer Constructors SingleTextCellRenderer() Declaration public SingleTextCellRenderer() SingleTextCellRenderer(String) Declaration protected SingleTextCellRenderer(string style) Parameters Type Name Description System.String style Methods OnGetText(Cell, String) Declaration protected override Span OnGetText(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description Span"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IInformationPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IInformationPopup.html",
    "title": "Interface IInformationPopup",
    "keywords": "Interface IInformationPopup The IInformationPopup is an interface to describe information pop-up which has circular bottom button, title, text, and content area Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IInformationPopup Properties BottomButton Gets or sets bottom button of the Popup Declaration MenuItem BottomButton { get; set; } Property Value Type Description MenuItem IsProgressRunning Gets or sets progress visibility of the Popup. Declaration bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Gets or sets text of the Popup Declaration string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup Declaration string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the Popup Declaration void Dismiss() Show() Shows the Popup Declaration void Show() Events BackButtonPressed Occurs when the Back button is pressed. Declaration event EventHandler BackButtonPressed Event Type Type Description System.EventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.StepperRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.StepperRenderer.html",
    "title": "Class StepperRenderer",
    "keywords": "Class StepperRenderer Inheritance System.Object StepperRenderer CircleStepperRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class StepperRenderer : Xamarin.Forms.Platform.Tizen.StepperRenderer Methods UpdateRotaryInteraction(Boolean) Declaration protected override void UpdateRotaryInteraction(bool enable) Parameters Type Name Description System.Boolean enable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.LatLng.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.LatLng.html",
    "title": "Struct LatLng",
    "keywords": "Struct LatLng A struct that has a latitude and longitude. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public struct LatLng Constructors LatLng(Double, Double) Constructor a new LatLng structure Declaration public LatLng(double latitude, double longitude) Parameters Type Name Description System.Double latitude System.Double longitude Properties Latitude Gets or sets a latitude degrees. Declaration public double Latitude { get; } Property Value Type Description System.Double Longitude Gets or sets a longitude degrees. Declaration public double Longitude { get; } Property Value Type Description System.Double Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators Equality(LatLng, LatLng) Declaration public static bool operator ==(LatLng left, LatLng right) Parameters Type Name Description LatLng left LatLng right Returns Type Description System.Boolean Inequality(LatLng, LatLng) Declaration public static bool operator !=(LatLng left, LatLng right) Parameters Type Name Description LatLng left LatLng right Returns Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html",
    "title": "Class CircleSliderSurfaceItem",
    "keywords": "Class CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. Inheritance System.Object CircleSurfaceItem CircleSliderSurfaceItem Implements ICircleSurfaceItem IRotaryFocusable Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSliderSurfaceItem : CircleSurfaceItem, ICircleSurfaceItem, IRotaryFocusable Fields IncrementProperty BindableProperty. Identifies the Increment bindable property. Declaration public static readonly BindableProperty IncrementProperty Field Value Type Description BindableProperty MaximumProperty BindableProperty. Identifies the Maximum bindable property. Declaration public static readonly BindableProperty MaximumProperty Field Value Type Description BindableProperty MinimumProperty BindableProperty. Identifies the Minimum bindable property. Declaration public static readonly BindableProperty MinimumProperty Field Value Type Description BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties Increment Gets or sets the Increment value. The value of the slider is increased/decreased by the Increment value. Declaration public double Increment { get; set; } Property Value Type Description System.Double Maximum Gets or sets the maximum value of the slider. Declaration public double Maximum { get; set; } Property Value Type Description System.Double Minimum Gets or sets the minimum value of the slider. Declaration public double Minimum { get; set; } Property Value Type Description System.Double Value Gets or sets the value of the slider. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements ICircleSurfaceItem IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Toast.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Toast.html",
    "title": "Class Toast",
    "keywords": "Class Toast The Toast class provides properties that show simple types of messages Inheritance System.Object Toast Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public static class Toast Examples Toast.DisplayText(\"Hello World\", 3000) Toast.DisplayIconText(\"Hello World\", new FileImageSource { File = \"icon.jpg\" }, 3000) Methods DisplayIconText(String, FileImageSource) It shows simplest icon and text messege in 3 seconds. Declaration public static void DisplayIconText(string text, FileImageSource icon) Parameters Type Name Description System.String text The body text of the toast. FileImageSource icon The file path of the toast icon. DisplayIconText(String, FileImageSource, Int32) It shows simplest icon and text messege. Declaration public static void DisplayIconText(string text, FileImageSource icon, int duration) Parameters Type Name Description System.String text The body text of the toast. FileImageSource icon The file path of the toast icon. System.Int32 duration How long to display the text in milliseconds. DisplayText(String) It shows the simplest form of the message in 3000 milliseconds. Declaration public static void DisplayText(string text) Parameters Type Name Description System.String text The body text of the toast. DisplayText(String, Int32) It shows the simplest form of the message in the given duration. Declaration public static void DisplayText(string text, int duration) Parameters Type Name Description System.String text The body text of the toast. System.Int32 duration How long to display the text in milliseconds."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Widget.FormsWidgetApplication.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Widget.FormsWidgetApplication.html",
    "title": "Class FormsWidgetApplication",
    "keywords": "Class FormsWidgetApplication Inheritance System.Object FormsWidgetApplication Namespace : Tizen.Wearable.CircularUI.Forms.Renderer.Widget Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class FormsWidgetApplication : WidgetApplication Constructors FormsWidgetApplication(IDictionary<Type, String>) Declaration protected FormsWidgetApplication(IDictionary<Type, string> typeInfo) Parameters Type Name Description IDictionary < Type , System.String > typeInfo FormsWidgetApplication(Type) Declaration protected FormsWidgetApplication(Type type) Parameters Type Name Description Type type Methods Exit() Declaration public override void Exit()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventManager.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventManager.html",
    "title": "Class RotaryEventManager",
    "keywords": "Class RotaryEventManager The RotaryEventManager provides an event for the global rotary event for wearable devices. Inheritance System.Object RotaryEventManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public static class RotaryEventManager Examples RotaryEventManager.Rotated += (s, e) => { Console.WriteLine($\"Rotated! Rotated direction: ${e.IsClockwise}\"); }; Events Rotated Rotated will be triggered when the rotatable device's Bezel is rotated. Declaration public static event EventHandler<RotaryEventArgs> Rotated Event Type Type Description System.EventHandler < RotaryEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Chart.Forms.html": {
    "href": "api/Tizen.Wearable.CircularUI.Chart.Forms.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Chart.Forms",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Chart.Forms Classes FormsCircularUIChart"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html",
    "title": "Class CircleToolbarItem",
    "keywords": "Class CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. Inheritance System.Object CircleToolbarItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleToolbarItem : ToolbarItem Fields SubTextProperty BindableProperty. Identifies the Subtext bindable property to display on the menu item. Declaration public static readonly BindableProperty SubTextProperty Field Value Type Description BindableProperty Properties SubText Gets or sets Subtext to display on the menu item Declaration public string SubText { get; set; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html",
    "title": "Class CircleSurfaceItem",
    "keywords": "Class CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. Inheritance System.Object CircleSurfaceItem CircleProgressBarSurfaceItem CircleSliderSurfaceItem Implements ICircleSurfaceItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceItem : Element, ICircleSurfaceItem Fields BackgroundAngleOffsetProperty BindableProperty. Identifies the BackgroundAngleOffset bindable property. Declaration public static readonly BindableProperty BackgroundAngleOffsetProperty Field Value Type Description BindableProperty BackgroundAngleProperty BindableProperty. Identifies the BackgroundAngle bindable property. Declaration public static readonly BindableProperty BackgroundAngleProperty Field Value Type Description BindableProperty BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description BindableProperty BackgroundLineWidthProperty BindableProperty. Identifies the BackgroundLineWidth bindable property. Declaration public static readonly BindableProperty BackgroundLineWidthProperty Field Value Type Description BindableProperty BackgroundRadiusProperty BindableProperty. Identifies the BackgroundRadius bindable property. Declaration public static readonly BindableProperty BackgroundRadiusProperty Field Value Type Description BindableProperty BarAngleMaximumProperty BindableProperty. Identifies the BarAngleMaximum bindable property. Declaration public static readonly BindableProperty BarAngleMaximumProperty Field Value Type Description BindableProperty BarAngleMinimumProperty BindableProperty. Identifies the BarAngleMinimum bindable property. Declaration public static readonly BindableProperty BarAngleMinimumProperty Field Value Type Description BindableProperty BarAngleOffsetProperty BindableProperty. Identifies the BarAngleOffset bindable property. Declaration public static readonly BindableProperty BarAngleOffsetProperty Field Value Type Description BindableProperty BarAngleProperty BindableProperty. Identifies the BarAngle bindable property. Declaration public static readonly BindableProperty BarAngleProperty Field Value Type Description BindableProperty BarColorProperty BindableProperty. Identifies the BarColor bindable property. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description BindableProperty BarLineWidthProperty BindableProperty. Identifies the BarLineWidth bindable property. Declaration public static readonly BindableProperty BarLineWidthProperty Field Value Type Description BindableProperty BarRadiusProperty BindableProperty. Identifies the BarRadius bindable property. Declaration public static readonly BindableProperty BarRadiusProperty Field Value Type Description BindableProperty IsEnabledProperty BindableProperty. Identifies the IsEnabled bindable property. Declaration public static readonly BindableProperty IsEnabledProperty Field Value Type Description BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static readonly BindableProperty IsVisibleProperty Field Value Type Description BindableProperty Properties BackgroundAngle Gets or sets the background angle value. If background angle is 180, background of surface item draw 180 degree from background angle offset. Declaration public double BackgroundAngle { get; set; } Property Value Type Description System.Double BackgroundAngleOffset Gets or sets the background angle offset value. if background angle offset is 30, background of surface item start at 30 degree. Declaration public double BackgroundAngleOffset { get; set; } Property Value Type Description System.Double BackgroundColor Gets or sets the background color value. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color BackgroundLineWidth Gets or sets the background line width value. Declaration public int BackgroundLineWidth { get; set; } Property Value Type Description System.Int32 BackgroundRadius Gets or sets the background radius value. Declaration public double BackgroundRadius { get; set; } Property Value Type Description System.Double BarAngle Gets or sets the bar angle value. If bar angle is 180, bar of surface item draw 180 degree from bar angle offset. Declaration public double BarAngle { get; set; } Property Value Type Description System.Double BarAngleMaximum Gets or sets the bar angle maximum value. Declaration public double BarAngleMaximum { get; set; } Property Value Type Description System.Double BarAngleMinimum Gets or sets the bar angle minimum value. Declaration public double BarAngleMinimum { get; set; } Property Value Type Description System.Double BarAngleOffset Gets or sets the bar angle offset value. if bar angle offset is 30, bar of surface item start at 30 degree. Declaration public double BarAngleOffset { get; set; } Property Value Type Description System.Double BarColor Gets or sets the bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Color BarLineWidth Gets or sets the bar line width value. Declaration public int BarLineWidth { get; set; } Property Value Type Description System.Int32 BarRadius Gets or sets the bar radius value. Declaration public double BarRadius { get; set; } Property Value Type Description System.Double IsEnabled Gets or sets a value indicating whether this element is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets the visibility value of circle surface item. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Implements ICircleSurfaceItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html",
    "title": "Class CircleDateTimeSelector",
    "keywords": "Class CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" Inheritance System.Object CircleDateTimeSelector Implements IRotaryFocusable ICircleSurfaceConsumer Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleDateTimeSelector : Xamarin.Forms.View, IRotaryFocusable, ICircleSurfaceConsumer Fields DateTimeProperty BindableProperty. Identifies the DateTime bindable property. Declaration public static readonly BindableProperty DateTimeProperty Field Value Type Description BindableProperty IsVisibleOfAmPmProperty BindableProperty. Identifies the IsVisibleOfAmPm bindable property. Declaration public static readonly BindableProperty IsVisibleOfAmPmProperty Field Value Type Description BindableProperty IsVisibleOfDateProperty BindableProperty. Identifies the IsVisibleOfDate bindable property. Declaration public static readonly BindableProperty IsVisibleOfDateProperty Field Value Type Description BindableProperty IsVisibleOfHourProperty BindableProperty. Identifies the IsVisibleOfHour bindable property. Declaration public static readonly BindableProperty IsVisibleOfHourProperty Field Value Type Description BindableProperty IsVisibleOfMinuteProperty BindableProperty. Identifies the IsVisibleOfMinute bindable property. Declaration public static readonly BindableProperty IsVisibleOfMinuteProperty Field Value Type Description BindableProperty IsVisibleOfMonthProperty BindableProperty. Identifies the IsVisibleOfMonth bindable property. Declaration public static readonly BindableProperty IsVisibleOfMonthProperty Field Value Type Description BindableProperty IsVisibleOfYearProperty BindableProperty. Identifies the IsVisibleOfYear bindable property. Declaration public static readonly BindableProperty IsVisibleOfYearProperty Field Value Type Description BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration [Obsolete(\"MarkerColor bindable property is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public static readonly BindableProperty MarkerColorProperty Field Value Type Description BindableProperty MaximumDateProperty BindableProperty. Identifies the MaximumDate bindable property. Declaration public static readonly BindableProperty MaximumDateProperty Field Value Type Description BindableProperty MinimumDateProperty BindableProperty. Identifies the MinimumDate bindable property. Declaration public static readonly BindableProperty MinimumDateProperty Field Value Type Description BindableProperty ValueTypeProperty BindableProperty. Identifies the ValueType bindable property. Declaration public static readonly BindableProperty ValueTypeProperty Field Value Type Description BindableProperty Properties CircleSurfaceProvider Gets or sets a CircleSurfaceProvider. Declaration public ICircleSurfaceProvider CircleSurfaceProvider { get; set; } Property Value Type Description ICircleSurfaceProvider DateTime Gets or sets the date / time. Declaration public DateTime DateTime { get; set; } Property Value Type Description System.DateTime IsVisibleOfAmPm Gets or sets a boolean value that indicates whether the AmPm field type is visible. Declaration public bool IsVisibleOfAmPm { get; set; } Property Value Type Description System.Boolean IsVisibleOfDate Gets or sets a boolean value that indicates whether the date field type is visible. Declaration public bool IsVisibleOfDate { get; set; } Property Value Type Description System.Boolean IsVisibleOfHour Gets or sets a boolean value that indicates whether the hour field type is visible. Declaration public bool IsVisibleOfHour { get; set; } Property Value Type Description System.Boolean IsVisibleOfMinute Gets or sets a boolean value that indicates whether the minute field type is visible. Declaration public bool IsVisibleOfMinute { get; set; } Property Value Type Description System.Boolean IsVisibleOfMonth Gets or sets a boolean value that indicates whether the month field type is visible. Declaration public bool IsVisibleOfMonth { get; set; } Property Value Type Description System.Boolean IsVisibleOfYear Gets or sets a boolean value that indicates whether the year field type is visible. Declaration public bool IsVisibleOfYear { get; set; } Property Value Type Description System.Boolean MarkerColor Gets or sets Marker color Declaration [Obsolete(\"MarkerColor is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public Color MarkerColor { get; set; } Property Value Type Description Color MaximumDate Gets or sets the maximum date when ValueType is Date. Declaration public DateTime MaximumDate { get; set; } Property Value Type Description System.DateTime MinimumDate Gets or sets the minimum date when ValueType is Date. Declaration public DateTime MinimumDate { get; set; } Property Value Type Description System.DateTime ValueType Gets or sets DateTimeType value. If it is Time, the UI will be changed to enable time selection. If it is a Date, the date can be changed. Declaration public DateTimeType ValueType { get; set; } Property Value Type Description DateTimeType Implements IRotaryFocusable ICircleSurfaceConsumer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.FormsCircularUI.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.FormsCircularUI.html",
    "title": "Class FormsCircularUI",
    "keywords": "Class FormsCircularUI Inheritance System.Object FormsCircularUI Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class FormsCircularUI : object Fields Tag Declaration public static readonly string Tag Field Value Type Description System.String Properties IsInitialized Declaration public static bool IsInitialized { get; } Property Value Type Description System.Boolean Methods Init() Declaration public static void Init() Init(CoreApplication) Declaration public static void Init(CoreApplication context) Parameters Type Name Description CoreApplication context Init(String) Declaration public static void Init(string apiKey) Parameters Type Name Description System.String apiKey Init(InitOptions) Declaration public static void Init(InitOptions options) Parameters Type Name Description InitOptions options"
  },
  "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html",
    "title": "Class InformationPopup",
    "keywords": "Class InformationPopup Inheritance System.Object InformationPopup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class InformationPopup : BindableObject Constructors InformationPopup() Declaration public InformationPopup() Fields BottomButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty BottomButtonProperty Field Value Type Description BindableProperty IsProgressRunningProperty BindableProperty. Identifies the IsProgressRunning bindable property. Declaration public static readonly BindableProperty IsProgressRunningProperty Field Value Type Description BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description BindableProperty Properties BottomButton Gets or sets bottom button of the Popup. You should use only one property between Icon property and Text property because two area has the same position. Declaration public MenuItem BottomButton { get; set; } Property Value Type Description MenuItem IsProgressRunning Gets or sets progress visibility of the Popup. If this value is true. Popup displays circular progress and hides Title automatically. Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the InformationPopup. Declaration public void Dismiss() Show() Shows the Popup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.IBezelInteractionController.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.IBezelInteractionController.html",
    "title": "Interface IBezelInteractionController",
    "keywords": "Interface IBezelInteractionController Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public interface IBezelInteractionController Properties RotaryFocusObject Declaration IRotaryFocusable RotaryFocusObject { get; } Property Value Type Description IRotaryFocusable Methods Activate() Declaration void Activate() Deactivate() Declaration void Deactivate()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Radio2TextCellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Radio2TextCellRenderer.html",
    "title": "Class Radio2TextCellRenderer",
    "keywords": "Class Radio2TextCellRenderer Inheritance System.Object RadioCellRenderer Radio2TextCellRenderer Inherited Members RadioCellRenderer.MainPart RadioCellRenderer.RadioPart RadioCellRenderer.OnGetContent(Cell, String) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class Radio2TextCellRenderer : RadioCellRenderer Constructors Radio2TextCellRenderer() Declaration public Radio2TextCellRenderer() Radio2TextCellRenderer(String) Declaration protected Radio2TextCellRenderer(string style) Parameters Type Name Description System.String style Properties DetailPart Declaration protected string DetailPart { get; set; } Property Value Type Description System.String Methods OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) Declaration protected override bool OnCellPropertyChanged(Cell cell, string property, Dictionary<string, EvasObject> realizedView) Parameters Type Name Description Cell cell System.String property Dictionary < System.String , EvasObject > realizedView Returns Type Description System.Boolean Overrides RadioCellRenderer.OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) OnGetText(Cell, String) Declaration protected override Span OnGetText(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description Span Overrides RadioCellRenderer.OnGetText(Cell, String)"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Classes FormsWatchface"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IToast.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IToast.html",
    "title": "Interface IToast",
    "keywords": "Interface IToast This interface, which defines the ability to display simple text, is used internally. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IToast Properties Duration Gets or sets the duration. Declaration int Duration { get; set; } Property Value Type Description System.Int32 Icon Gets or sets the file path of icon. Declaration FileImageSource Icon { get; set; } Property Value Type Description FileImageSource Text Gets or sets the text. Declaration string Text { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the specified view. Declaration void Dismiss() Show() Shows the view for the specified duration. Declaration void Show()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TimePickerRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TimePickerRenderer.html",
    "title": "Class TimePickerRenderer",
    "keywords": "Class TimePickerRenderer Inheritance System.Object TimePickerRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TimePickerRenderer : Xamarin.Forms.Platform.Tizen.TimePickerRenderer Methods OnPickerClosed(Object, EventArgs) Declaration protected override void OnPickerClosed(object sender, EventArgs args) Parameters Type Name Description System.Object sender EventArgs args OnPickerOpened(Object, EventArgs) Declaration protected override void OnPickerOpened(object sender, EventArgs args) Parameters Type Name Description System.Object sender EventArgs args"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.WatchListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.WatchListView.html",
    "title": "Class WatchListView",
    "keywords": "Class WatchListView Inheritance System.Object WatchListView Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class WatchListView : Xamarin.Forms.Platform.Tizen.Native.Watch.WatchListView Constructors WatchListView(EvasObject, CircleSurface) Declaration public WatchListView(EvasObject parent, CircleSurface surface) Parameters Type Name Description EvasObject parent CircleSurface surface Methods SetFooter(VisualElement) Declaration public override void SetFooter(VisualElement footer) Parameters Type Name Description VisualElement footer SetHeader(VisualElement) Declaration public override void SetHeader(VisualElement header) Parameters Type Name Description VisualElement header"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RadialProgress.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RadialProgress.html",
    "title": "Class RadialProgress",
    "keywords": "Class RadialProgress Inheritance System.Object RadialProgress Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Chart.Forms.dll Syntax public class RadialProgress : SKCanvasView Constructors RadialProgress() Declaration public RadialProgress() Fields EndStrokeCapProperty Declaration public static readonly BindableProperty EndStrokeCapProperty Field Value Type Description BindableProperty FontSizeProperty Declaration public static readonly BindableProperty FontSizeProperty Field Value Type Description BindableProperty HasLabelProperty Declaration public static readonly BindableProperty HasLabelProperty Field Value Type Description BindableProperty ProgressProperty Declaration public static readonly BindableProperty ProgressProperty Field Value Type Description BindableProperty RadialBackgroundColorProperty Declaration public static readonly BindableProperty RadialBackgroundColorProperty Field Value Type Description BindableProperty RadialColorProperty Declaration public static readonly BindableProperty RadialColorProperty Field Value Type Description BindableProperty RadialEndColorProperty Declaration public static readonly BindableProperty RadialEndColorProperty Field Value Type Description BindableProperty RadialMiddleColorProperty Declaration public static readonly BindableProperty RadialMiddleColorProperty Field Value Type Description BindableProperty RadialStartColorProperty Declaration public static readonly BindableProperty RadialStartColorProperty Field Value Type Description BindableProperty StartAngleProperty Declaration public static readonly BindableProperty StartAngleProperty Field Value Type Description BindableProperty StartStrokeCapProperty Declaration public static readonly BindableProperty StartStrokeCapProperty Field Value Type Description BindableProperty SweepAngleProperty Declaration public static readonly BindableProperty SweepAngleProperty Field Value Type Description BindableProperty TextColorProperty Declaration public static readonly BindableProperty TextColorProperty Field Value Type Description BindableProperty TextFormatProperty Declaration public static readonly BindableProperty TextFormatProperty Field Value Type Description BindableProperty ThicknessProperty Declaration public static readonly BindableProperty ThicknessProperty Field Value Type Description BindableProperty Properties EndStrokeCap Declaration public RadialProgressStrokeCap EndStrokeCap { get; set; } Property Value Type Description RadialProgressStrokeCap FontSize Declaration public double FontSize { get; set; } Property Value Type Description System.Double HasLabel Declaration public bool HasLabel { get; set; } Property Value Type Description System.Boolean Progress Declaration public double Progress { get; set; } Property Value Type Description System.Double RadialBackgroundColor Declaration public Color RadialBackgroundColor { get; set; } Property Value Type Description Color RadialColor Declaration public Color RadialColor { get; set; } Property Value Type Description Color RadialEndColor Declaration public Color RadialEndColor { get; set; } Property Value Type Description Color RadialMiddleColor Declaration public Color RadialMiddleColor { get; set; } Property Value Type Description Color RadialStartColor Declaration public Color RadialStartColor { get; set; } Property Value Type Description Color StartAngle Declaration public double StartAngle { get; set; } Property Value Type Description System.Double StartStrokeCap Declaration public RadialProgressStrokeCap StartStrokeCap { get; set; } Property Value Type Description RadialProgressStrokeCap SweepAngle Declaration public double SweepAngle { get; set; } Property Value Type Description System.Double TextColor Declaration public Color TextColor { get; set; } Property Value Type Description Color TextFormat Declaration public string TextFormat { get; set; } Property Value Type Description System.String Thickness Declaration public double Thickness { get; set; } Property Value Type Description System.Double Methods OnPaintSurface(SKPaintSurfaceEventArgs) Declaration protected override void OnPaintSurface(SKPaintSurfaceEventArgs e) Parameters Type Name Description SKPaintSurfaceEventArgs e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.GoogleMapView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.GoogleMapView.html",
    "title": "Class GoogleMapView",
    "keywords": "Class GoogleMapView The MapView class is used to display a map on the screen. Inheritance System.Object GoogleMapView Implements IGoogleMapViewController IViewController Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class GoogleMapView : View, IGoogleMapViewController, IViewController Constructors GoogleMapView() Declaration public GoogleMapView() Fields ItemsSourceProperty BindableProperty. Identifies the ItemsSource bindable property. Declaration public static readonly BindableProperty ItemsSourceProperty Field Value Type Description BindableProperty ItemTemplateProperty BindableProperty. Identifies the ItemTemplate bindable property. Declaration public static readonly BindableProperty ItemTemplateProperty Field Value Type Description BindableProperty Properties ItemsSource Gets or sets the source of items to template and display. Declaration public IEnumerable ItemsSource { get; set; } Property Value Type Description System.Collections.IEnumerable ItemTemplate Gets or sets the DataTemplate to apply to the ItemsSource. Declaration public DataTemplate ItemTemplate { get; set; } Property Value Type Description DataTemplate Markers An IList of the Pins on this MapView. Declaration public IList<Marker> Markers { get; } Property Value Type Description System.Collections.Generic.IList < Marker > Methods Update(GoogleMapOption) Set GoogleMapOption value to MapView. Declaration public void Update(GoogleMapOption value) Parameters Type Name Description GoogleMapOption value Implements IGoogleMapViewController IViewController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html",
    "title": "Class ActionButtonItem",
    "keywords": "Class ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Inheritance System.Object ActionButtonItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [Obsolete(\"ActionButtonItem is obsolete as of version 1.5.0. Please use Xamarin.Forms.Button with with Button.Style(TizenSpecific) or ContentButton instead.\")] public class ActionButtonItem : MenuItem Fields BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description BindableProperty IsEnableProperty BindableProperty. Identifies the IsEnable bindable property. Declaration public static readonly BindableProperty IsEnableProperty Field Value Type Description BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static readonly BindableProperty IsVisibleProperty Field Value Type Description BindableProperty Properties BackgroundColor Gets or sets a background color value of ActionButtonItem. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color IsEnable Gets or sets a boolean value that indicates whether this ActionButtonItem is enabled. Declaration public bool IsEnable { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets a boolean value that indicates whether this ActionButtonItem is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html",
    "title": "Class CirclePageRenderer",
    "keywords": "Class CirclePageRenderer Inheritance System.Object PageRenderer CirclePageRenderer Implements IBezelInteractionController Inherited Members PageRenderer.CreateMoreOptionItem(ToolbarItem) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CirclePageRenderer : PageRenderer, IBezelInteractionController Constructors CirclePageRenderer() Declaration public CirclePageRenderer() Properties CircleSurface Declaration public CircleSurface CircleSurface { get; } Property Value Type Description CircleSurface Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Xamarin.Forms.Page>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Xamarin.Forms.Page> e) Parameters Type Name Description ElementChangedEventArgs < Xamarin.Forms.Page > e OnElementReady() Declaration protected override void OnElementReady() OnMoreOptionClosed() Declaration protected override void OnMoreOptionClosed() OnMoreOptionOpened() Declaration protected override void OnMoreOptionOpened() UpdateRotaryFocusObject(Boolean) Declaration public void UpdateRotaryFocusObject(bool initialize) Parameters Type Name Description System.Boolean initialize Explicit Interface Implementations IBezelInteractionController.Activate() Declaration void IBezelInteractionController.Activate() IBezelInteractionController.Deactivate() Declaration void IBezelInteractionController.Deactivate() IBezelInteractionController.RotaryFocusObject Declaration IRotaryFocusable IBezelInteractionController.RotaryFocusObject { get; } Returns Type Description IRotaryFocusable Implements IBezelInteractionController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ColorMenuItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ColorMenuItem.html",
    "title": "Class ColorMenuItem",
    "keywords": "Class ColorMenuItem A subclass of Xamarin.Forms.MenuItem that controls the background color of the button used in the popup control. Inheritance System.Object ColorMenuItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ColorMenuItem : MenuItem Fields BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description BindableProperty Properties BackgroundColor Gets or sets a background color value of this ActionButtonItem. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PageRenderer.html",
    "title": "Class PageRenderer",
    "keywords": "Class PageRenderer Inheritance System.Object PageRenderer BezelInteractionPageRenderer CirclePageRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PageRenderer : Xamarin.Forms.Platform.Tizen.PageRenderer Methods CreateMoreOptionItem(ToolbarItem) Declaration protected override FormsMoreOptionItem CreateMoreOptionItem(ToolbarItem item) Parameters Type Name Description ToolbarItem item Returns Type Description FormsMoreOptionItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html",
    "title": "Class CirclePageNotFoundException",
    "keywords": "Class CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. Inheritance System.Object System.Exception CirclePageNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CirclePageNotFoundException : Exception, ISerializable Constructors CirclePageNotFoundException() Creates and initializes a new instance of the CirclePageNotFoundException class. Declaration public CirclePageNotFoundException() Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceConsumer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceConsumer.html",
    "title": "Interface ICircleSurfaceConsumer",
    "keywords": "Interface ICircleSurfaceConsumer The ICircleSurfaceConsumer is an interface represents the CircleSurfaceObject. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface ICircleSurfaceConsumer Properties CircleSurfaceProvider Gets or sets CircleSurfaceProvider Declaration ICircleSurfaceProvider CircleSurfaceProvider { get; set; } Property Value Type Description ICircleSurfaceProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Shell.CircularShellSectionItemsRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Shell.CircularShellSectionItemsRenderer.html",
    "title": "Class CircularShellSectionItemsRenderer",
    "keywords": "Class CircularShellSectionItemsRenderer Inheritance System.Object CircularShellSectionItemsRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer.Shell Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircularShellSectionItemsRenderer : ShellSectionItemsRenderer Constructors CircularShellSectionItemsRenderer(ShellSection) Declaration public CircularShellSectionItemsRenderer(ShellSection section) Parameters Type Name Description ShellSection section Methods OnRotated(Boolean) Declaration protected override bool OnRotated(bool isClockwise) Parameters Type Name Description System.Boolean isClockwise Returns Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html",
    "title": "Interface IRotaryFocusable",
    "keywords": "Interface IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RadialProgressStrokeCap.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RadialProgressStrokeCap.html",
    "title": "Enum RadialProgressStrokeCap",
    "keywords": "Enum RadialProgressStrokeCap Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Chart.Forms.dll Syntax public enum RadialProgressStrokeCap : int Fields Name Description Butt Round"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html",
    "title": "Class CircleSurfaceEffectBehavior",
    "keywords": "Class CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is a behavior which allows you to add views that require CircleSurface. Inheritance System.Object CircleSurfaceEffectBehavior Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceEffectBehavior : Behavior<Page> Fields RotaryFocusObjectProperty BindableProperty. Identifies the RotaryFocusObject bindable property. Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description BindableProperty Methods GetRotaryFocusObject(BindableObject) Get a RotaryFocusObject Declaration public static IRotaryFocusable GetRotaryFocusObject(BindableObject obj) Parameters Type Name Description BindableObject obj Effect element Returns Type Description IRotaryFocusable Focusable object OnAttachedTo(Page) Declaration protected override void OnAttachedTo(Page page) Parameters Type Name Description Page page OnDetachingFrom(Page) Declaration protected override void OnDetachingFrom(Page page) Parameters Type Name Description Page page SetRotaryFocusObject(BindableObject, IRotaryFocusable) Set a RotaryFocusObject Declaration public static void SetRotaryFocusObject(BindableObject obj, IRotaryFocusable focusable) Parameters Type Name Description BindableObject obj Effect element IRotaryFocusable focusable Focusable object"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ITwoButtonPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ITwoButtonPopup.html",
    "title": "Interface ITwoButtonPopup",
    "keywords": "Interface ITwoButtonPopup The ITwoButtonPopup is an interface to describe confirmation pop-up which has circular two button, title, text, and content area Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface ITwoButtonPopup Properties Content Gets or sets content view of the Popup. Declaration View Content { get; set; } Property Value Type Description View FirstButton Gets or sets left button of the Popup Declaration MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Gets or sets right button of the Popup Declaration MenuItem SecondButton { get; set; } Property Value Type Description MenuItem Text Gets or sets text of the Popup Declaration string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup Declaration string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the Popup Declaration void Dismiss() Show() Shows the Popup Declaration void Show() Events BackButtonPressed Occurs when the Back button is pressed. Declaration event EventHandler BackButtonPressed Event Type Type Description System.EventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceView.html",
    "title": "Class CircleSurfaceView",
    "keywords": "Class CircleSurfaceView A subclass of Xamarin.Forms.View that can have several CircleSurfaceItem as a View not Page. Inheritance System.Object CircleSurfaceView Implements ICircleSurfaceProvider Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceView : View, ICircleSurfaceProvider Constructors CircleSurfaceView() Declaration public CircleSurfaceView() Properties CircleSurfaceItems An IList of the ICircleSurfaceItem on this CircleSurfaceView. Declaration public IList<ICircleSurfaceItem> CircleSurfaceItems { get; } Property Value Type Description System.Collections.Generic.IList < ICircleSurfaceItem > Methods OnBindingContextChanged() Declaration protected override void OnBindingContextChanged() Implements ICircleSurfaceProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckCellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckCellRenderer.html",
    "title": "Class CheckCellRenderer",
    "keywords": "Class CheckCellRenderer Inheritance System.Object CheckCellRenderer Check2TextCellRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CheckCellRenderer : CellRenderer Constructors CheckCellRenderer() Declaration public CheckCellRenderer() CheckCellRenderer(String) Declaration protected CheckCellRenderer(string style) Parameters Type Name Description System.String style Properties CheckBoxPart Declaration protected string CheckBoxPart { get; set; } Property Value Type Description System.String MainPart Declaration protected string MainPart { get; set; } Property Value Type Description System.String Methods OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) Declaration protected override bool OnCellPropertyChanged(Cell cell, string property, Dictionary<string, EvasObject> realizedView) Parameters Type Name Description Cell cell System.String property Dictionary < System.String , EvasObject > realizedView Returns Type Description System.Boolean OnGetContent(Cell, String) Declaration protected override EvasObject OnGetContent(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description EvasObject OnGetText(Cell, String) Declaration protected override Span OnGetText(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description Span OnReusableContent(Cell, String, EvasObject) Declaration protected override EvasObject OnReusableContent(Cell cell, string part, EvasObject old) Parameters Type Name Description Cell cell System.String part EvasObject old Returns Type Description EvasObject"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html",
    "title": "Class RotaryEventArgs",
    "keywords": "Class RotaryEventArgs Event arguments for RotaryEvent. Inheritance System.Object System.EventArgs RotaryEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class RotaryEventArgs : EventArgs Properties IsClockwise Gets or sets rotated direction of Rotary device. IsClockwise is true when Rotary device rotated in the clockwise direction or false on counter clockwise. Declaration public bool IsClockwise { get; set; } Property Value Type Description System.Boolean"
  },
  "guide/CircleScrollView.html": {
    "href": "guide/CircleScrollView.html",
    "title": "CircleScrollView",
    "keywords": "CircleScrollView CircleScrollView is to ensure that larger views display well on smaller wearable devices. It is an extension of Xamarin.Forms.ScrollView . Horizontal Vertical Create CircleScrollView Basically CircleScrollView looks same as Xamarin.Forms.ScrollView , scrolling is also possible with Bezel Interactions . The difference from Xamarin.Forms.ScrollView is to provide some additional property for Tizen wearable such as BarColor CircleScrollView has the following property: BarColor: This property gets or sets a scroll bar color value. The following XAML code shows how to use CircleScrollView . The direction of the scroller depends on the setting of the Orientation value. In the following example, the Orientation of the CircleScrollView is set to Vertical . CircleScrollView is placed in the StackLayout to contain many images, and its BarColor is \"Red\". For more information, see the following links: CircleScrollView API reference Xamarin.Forms.ScrollView API reference Xamarin.Forms.ScrollView Guide The code example of this guide uses HorizontalScroller.xaml code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleScroller/HorizontalScroller.xaml The following code shows how to use CircleScrollView: XAML file <ContentPage x:Class=\"UIComponents.Samples.CircleScroller.VerticalScroller\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleScroller\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Vertical\" BarColor=\"Red\"> <StackLayout HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_btn_delete_holo_dark.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_ringtone_mute.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_ic_popup_btn_check.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_alert.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_bell.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_ringtone_sound.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_btn_delete_holo_dark.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_ringtone_mute.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_ic_popup_btn_check.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_alert.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_bell.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_ringtone_sound.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_btn_delete_holo_dark.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_ringtone_mute.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_ic_popup_btn_check.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_alert.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_bell.png\" /> <Image HorizontalOptions=\"CenterAndExpand\" Source=\"tw_number_controller_icon_ringtone_sound.png\" /> </StackLayout> </w:CircleScrollView> </ContentPage.Content> </ContentPage>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceProvider.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceProvider.html",
    "title": "Interface ICircleSurfaceProvider",
    "keywords": "Interface ICircleSurfaceProvider The ICircleSurfaceProvider is an interface providing the CircleSurface. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface ICircleSurfaceProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Radio.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Radio.html",
    "title": "Class Radio",
    "keywords": "Class Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. Inheritance System.Object Radio Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [Obsolete(\"Radio is obsolete as of version 1.5.0. Please use Xamarin.Forms.RadioButton instead.\")] public class Radio : View Examples var radio1 = new Radio { GroupName = \"SoundMode\", IsSelected = true, Value = \"sound\" } var radio2 = new Radio { GroupName = \"SoundMode\", IsSelected = false, Value = \"vibrate\" } radio1.Selected += (s,e) => { Console.WriteLine($\"radio1 selected! value:{e.Value}\"); }; radio2.Selected += (s,e) => { Console.WriteLine($\"radio2 selected! value:{e.Value}\"); }; Fields ColorProperty BindableProperty. Identifies the Color bindable property. Declaration public static readonly BindableProperty ColorProperty Field Value Type Description BindableProperty GroupNameProperty BindableProperty. Identifies the GroupName bindable property. Declaration public static readonly BindableProperty GroupNameProperty Field Value Type Description BindableProperty IsSelectedProperty BindableProperty. Identifies the IsSelected bindable property. Declaration public static readonly BindableProperty IsSelectedProperty Field Value Type Description BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties Color Gets or sets a color value of Radio. Declaration public Color Color { get; set; } Property Value Type Description Color GroupName Gets or sets the name that specifies which Radio controls are mutually exclusive. It can be set to null. Declaration public string GroupName { get; set; } Property Value Type Description System.String IsSelected Gets or sets a boolean value that indicates whether this Radio is selected. Declaration public bool IsSelected { get; set; } Property Value Type Description System.Boolean Value Gets or sets the value of the Radio. This is a bindable property. Declaration public string Value { get; set; } Property Value Type Description System.String Events Selected Occurs when the Radio selection was changed. Declaration public event EventHandler<SelectedEventArgs> Selected Event Type Type Description System.EventHandler < SelectedEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Widget.FormsWidgetBase.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Widget.FormsWidgetBase.html",
    "title": "Class FormsWidgetBase",
    "keywords": "Class FormsWidgetBase Inheritance System.Object FormsWidgetBase Namespace : Tizen.Wearable.CircularUI.Forms.Renderer.Widget Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public abstract class FormsWidgetBase : WidgetBase Methods LoadApplication(Xamarin.Forms.Application) Declaration public void LoadApplication(Xamarin.Forms.Application application) Parameters Type Name Description Xamarin.Forms.Application application OnCreate(Bundle, Int32, Int32) Declaration public override void OnCreate(Bundle content, int w, int h) Parameters Type Name Description Bundle content System.Int32 w System.Int32 h OnDestroy(WidgetDestroyType, Bundle) Declaration public override void OnDestroy(WidgetDestroyType reason, Bundle content) Parameters Type Name Description WidgetDestroyType reason Bundle content OnPause() Declaration public override void OnPause() OnResume() Declaration public override void OnResume() OnRootViewUpdated(EvasObject) Declaration protected virtual void OnRootViewUpdated(EvasObject rootView) Parameters Type Name Description EvasObject rootView"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.InitOptions.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.InitOptions.html",
    "title": "Class InitOptions",
    "keywords": "Class InitOptions Inheritance System.Object InitOptions Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class InitOptions : object Constructors InitOptions(CoreApplication) Declaration public InitOptions(CoreApplication application) Parameters Type Name Description CoreApplication application InitOptions(CoreApplication, String) Declaration public InitOptions(CoreApplication application, string googleMapsAPIKey) Parameters Type Name Description CoreApplication application System.String googleMapsAPIKey Properties Context Declaration public CoreApplication Context { get; set; } Property Value Type Description CoreApplication GoogleMapsAPIKey Declaration public string GoogleMapsAPIKey { get; set; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html",
    "title": "Class CircleSurfaceNotFoundException",
    "keywords": "Class CircleSurfaceNotFoundException Inheritance System.Object CircleSurfaceNotFoundException Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleSurfaceNotFoundException : Exception Constructors CircleSurfaceNotFoundException() Declaration public CircleSurfaceNotFoundException() CircleSurfaceNotFoundException(SerializationInfo, StreamingContext) Declaration protected CircleSurfaceNotFoundException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context CircleSurfaceNotFoundException(String) Declaration public CircleSurfaceNotFoundException(string message) Parameters Type Name Description System.String message CircleSurfaceNotFoundException(String, Exception) Declaration public CircleSurfaceNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Switch2TextCell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Switch2TextCell.html",
    "title": "Class Switch2TextCell",
    "keywords": "Class Switch2TextCell A Cell with two labels and a Switch. Inheritance System.Object Switch2TextCell Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Switch2TextCell : SwitchCell Fields DetailProperty Identifies the Detail bindable property. Declaration public static readonly BindableProperty DetailProperty Field Value Type Description BindableProperty Properties Detail Gets or sets the sub text displayed next to the switch. This is a bindable property. Declaration public string Detail { get; set; } Property Value Type Description System.String"
  },
  "guide/Toast.html": {
    "href": "guide/Toast.html",
    "title": "Toast",
    "keywords": "Toast Toast provides simple information. Toast automatically disappears after timeout (in seconds). Tizen Wearable Toast fills the entire screen with display message and image. Single text Icon and text Create Toast Toast is a static method. Therefore, you do not need any container or parent control for using this control. Toast provides two methods, Toast.DisplayText() displays simple text message and Toast.DisplayIconText() displays simple icon and simple text message. The first parameter of Toast.DisplayText() method is message text. The second parameter is timeout duration (milliseconds). The second parameter is optional. If you do not set this value, the default value is set to 3000 milliseconds (three seconds). The first parameter of Toast.DisplayIconText() method is message text. The second parameter is icon file path. You can set file path with new FileImageSource . The third parameter is timeout duration, which is optional. For more information, see Toast API reference . C# file Toast.DisplayText(\"Toast popup\", 3000); Toast.DisplayIconText(\"Toast popup2\", new FileImageSource { File = \"image/tw_ic_popup_btn_check.png\" }, 2000);"
  },
  "guide/ManagingCertificateProfile.html": {
    "href": "guide/ManagingCertificateProfile.html",
    "title": "Managing Certificate Profile",
    "keywords": "Managing Certificate Profile Before installing your application on a device or submitting it to the Tizen Store, it must be signed with a certificate profile. The signature verifies the source of the application and ensures that it is not tampered with since its publication. A certificate profile is a combination of the certificates used for signing. General Information In the menu bar, click Tools > Tizen > Tizen Certificate Manager to launch the Certificate Manager. The Active profile is indicated by the check mark. All of the application in this SDK will be signed with this active profile. You can create, delete, and set a profile to active here. Lower window shows the information of each certificate. You can replace the certificate with an existing one. The Tizen platform allows multiple distributor certificates up to two, which supports other device manufacturers or telecommunication companies. However, it is not needed for most of the developers generally. Changing Only a Distributor Certificate in a Profile There might be an instance where you need to register more devices or change the devices to the distributor certificate. However, author certificates rarely needs to be changed. This section explains how to change distributor certificate. Follow the same steps to create a certificate profile as described in create new or select old profile . Select an existing certificate profile Click Select an existing certificate profile and select a profile, for which you want to change the registered device and click Next . Use the existing author certificate If you click No to use the existing author certificate then move to create new or select existing distributor certiicate to register DUID. Note If you click Yes , it moves to create a new author certificate step and original author certificate will be removed permanently. It is recommended to consider the dialog box message carefully. However, the SDK automatically backups the original author.p12 file with timestamp extension such as author.p12_bak_20160806092013 in the profile directory to protect developer from unintended removal of author certificate. Create new Distributor for certificate profile Follow the same steps as mentioned in create new or select existing distributor certificate . Importing Existing Certificates If you already have both the author.p12 and distributor.p12 certificates and you do not require a new certificate from Samsung, you can import and use the available certificates to sign your application. In that case, create a new certificate profile and select existing certificates at each step. Follow the same steps as mentioned in creating certificate before creating a new profile or selecting an old profile . Select an existing author certificate The author certificate must be the same for the application that is to be upgraded. Select Select an existing author certificate and click Next . Click Browse to select your author.p12 file, enter the password then click Next . Select an existing distributor certificate Click Select an existing distributor certificate , click Browse to select your distributor.p12 file, enter the password and then click Finish . Find the created profile in the list Now you can find the created profile in the list. Troubleshooting Question : I lost the author.p12 . Can I upgrade my application? Answer : No. If the author key is different, the application cannot be upgraded."
  },
  "guide/Check.html": {
    "href": "guide/Check.html",
    "title": "Check",
    "keywords": "Check Warning Check is obsolete as of version 1.5.0. Please use Xamarin.Forms.CheckBox or Xamarin.Forms.Switch instead. Check → Xamarin.Forms.CheckBox or Xamarin.Forms.Switch DisplayStyle → Xamarin.Forms.Switch.Style + Xamarin.Forms.SwitchStyle (TizenSpecific) Color → Xamarin.Forms.Switch.OnColor , Xamarin.Forms.Switch.ThumbColor , Xamarin.Forms.Switch.BackgroundColor Check provides Tizen Wearable specific CheckBox widget. Check accepts user input by the method of toggling. Check derives from Xamarin.Forms.Switch . Create Check You can easily add Check control with C# or XAML file. Tizen wearable device supports 3 styles of DisplayStyle ( Default , Onoff , Small ). Each shape of DisplayStyle depends on the device model. You can set the default value of check with IsToggled property. True value set Check selected. False value set Check unselected. Toggled event is raised when Check is toggled. You must add code for handling Toggled event. For more information, see the following links: Check API reference Xamarin.Forms.Switch API reference C# file var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } check.Toggled += (s, e) => { Console.WriteLine(\"Check is now {0}\", e.Value); } XAML file Refer to TCCheck code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCeck.xaml <StackLayout Orientation=\"Vertical\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Default\" /> <w:Check DisplayStyle=\"Default\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledDefault\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Onoff\" /> <w:Check DisplayStyle=\"Onoff\" HorizontalOptions=\"FillAndExpand\" IsToggled=\"True\" Toggled=\"OnToggledOnOff\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Small\" /> <w:Check DisplayStyle=\"Small\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledSmall\" /> </StackLayout>"
  },
  "guide/PopupEntry.html": {
    "href": "guide/PopupEntry.html",
    "title": "PopupEntry",
    "keywords": "PopupEntry PopupEntry is a control that allows you to enter text with the IME when you click on Entry . Overview PopupEntry control has exactly the same usage as the Entry . However, in the case of a regular Entry in a circular screen, the input text gets hidden behind the IME at the time of input. The PopupEntry allows the input to be on a pop up, hence the written text is visible. The following images shows a screen with a normal Entry and a screen with the text on the IME when you click on Entry . The Entry is not visible because it is masked by the IME. The above image is the same as using PopupEntry , It can type text while watching it properly. When PopupEntry is used: The BackgroundColor of the input pop up is the same as the BackgroundColor of the PopupEntry . The default color of the PopupEntry is set if you don't set the BackgroundColor . The TextColor inside the input pop up is also the same as the TextColor of the PopupEntry . The IsPassword property of the input pop up is also the same as the PopupEntry . WARNING: If you set the PopupEntry width under the specific size(e.g 280), the PopupEntry can be truncated follow to device native theme. How to use PopupEntry uses the same method as the Entry . <?xml version=\"1.0\" encoding=\"utf-8\" ?> <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Class=\"WearableUIGallery.TC.TCPopupEntry\"> <ContentPage.Content> <StackLayout Padding=\"20,40,20,40\"> <w:PopupEntry BackgroundColor=\"Gray\" HorizontalOptions=\"FillAndExpand\" TextColor=\"Blue\" VerticalOptions=\"CenterAndExpand\" /> <w:PopupEntry HorizontalOptions=\"FillAndExpand\" Placeholder=\"Foobar\" VerticalOptions=\"CenterAndExpand\" /> <w:PopupEntry HorizontalOptions=\"FillAndExpand\" IsPassword=\"True\" Placeholder=\"Password\" VerticalOptions=\"CenterAndExpand\" /> </StackLayout> </ContentPage.Content> </ContentPage>"
  },
  "guide/InformationPopup.html": {
    "href": "guide/InformationPopup.html",
    "title": "InformationPopup",
    "keywords": "InformationPopup InformationPopup can represent three types of Tizen Wearable EFL popup style shown in the following figures. This popup is used to display any information or warning. Since InformationPopup does not adhere as a control, this popup cannot be set in the XAML file. Single text Bottom button Progress Create single text InformationPopup Single text InformationPopup is used for displaying text. It is similar to the Toast popup, but this popup does not disappear automatically. Text property can be set with text. When you press the back button of the device, BackButtonPressed event occurs. To dismiss the popup that occurs during this event, add Dismiss() in the BackButtonPressed event handle code. For more information, see InformationPopup API reference . The code example of this guide uses TCInformationPopup code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCInformationPopup.xaml.cs C# file var _textPopUp = new InformationPopup(); _textPopUp.Text = \"This is text popup test\"; _textPopUp.BackButtonPressed += (s, e) => { _textPopUp.Dismiss(); label1.Text = \"text popup is dismissed\"; }; _textPopUp.show(); Create bottom button InformationPopup You can set BottomButton property with MenuItem . The bottom button is used for confirmation dialog purpose, that asks user to approve requested operation. InformationPopup has Title property for displaying title. When you click the bottom button, BottomButton.Clicked event occurs. C# file var bottomButton = new MenuItem() { Text = \"OK\", Command = new Command(() => { /* must insert code when user press left button */ }) }; var _textButtonPopUp = new InformationPopup(); _textButtonPopUp.Title = \"Popup title\"; _textButtonPopUp.Text = \"This is text and button popup test\"; _textButtonPopUp.BottomButton = bottomButton; _textButtonPopUp.BottomButton.Clicked += (s, e) => { _textButtonPopUp.Dismiss(); label1.Text = \"text&button is dismissed\"; }; _textButtonPopUp.show(); Create progress InformationPopup InformationPopup has IsProgressRunning property. If this property sets true , small circle progress bar is displayed in the center of the screen. C# file var _progressPopUp = new InformationPopup(); _progressPopUp.Title = \"Popup title\"; _progressPopUp.Text = \"This is progress test\"; _progressPopUp.IsProgressRunning = true; _progressPopUp.show();"
  },
  "guide/CircleDateTimeSelector.html": {
    "href": "guide/CircleDateTimeSelector.html",
    "title": "CircleDateTimeSelector",
    "keywords": "CircleDateTimeSelector CircleDateTimeSelector is a view for Date Picker and Time Picker. You can rotate the bezel to explore the screen using the Bezel Interactions . The view of this selector covers the entire screen. The Date display screen is a touch screen. You can set the value of the year: month: day by touch and by rotating the bezel. The Time display screen is also a touch screen. You can set the value of the hour: minute: AM / PM by touch and by rotating the bezel. Date Time WARNING: The marker is no longer supported from Tizen 4.0 SDK which is applied bezel-less UX in 2019. Therefore, marker related API was deprecated. Create CircleDateTimeSelector CircleDateTimeSelector has the following properties: ValueType : The value of time is changed in Time, and the value of date is changed in Date. DateTime : Sets or gets date/time. MaximumDate : Sets or gets maximum date. MimimumDate : Sets or gets minimum date. You can easily add CircleDateTimeSelector to C# or XAML file. The following example explains how to set a timepicker. Assign ValueType value for \"Time\" and set the current time to the DateTime property. When the code is executed, the current time will be displayed on the screen. Since the focussed area on the screen shows the hour item, the hour item is changed when the bezel is turned. To change the minutes, touch the minute item and turn the bezel. For more information, see CircleDateTimeSelector API reference . The code example of this guide uses CircleDateTime code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleDateTime\\DateTimeViewModel.cs and CircleTime.xaml The following code shows how to use CircleDateTimeSelector: C# file public class DateTimeViewModel : INotifyPropertyChanged { static DateTime _dateTime = DateTime.Now; public DateTime Datetime { get => _dateTime; set { //Console.WriteLine($\"Set Datetime value : {value.ToString()}\"); if (_dateTime == value) return; _dateTime = value; OnPropertyChanged(); } } XAML file <ContentPage x:Class=\"UIComponents.Samples.CircleDateTime.CircleTime\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleDateTime\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" xmlns:tizen=\"clr-namespace:Xamarin.Forms.PlatformConfiguration.TizenSpecific;assembly=Xamarin.Forms.Core\"> <ContentPage.BindingContext> <local:DateTimeViewModel /> </ContentPage.BindingContext> <ContentPage.Content> <StackLayout BackgroundColor=\"Black\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:CircleDateTimeSelector x:Name=\"timeSelector\" DateTime=\"{Binding Datetime, Mode=TwoWay}\" MaximumDate=\"1/1/2022\" MinimumDate=\"1/12/2010\" ValueType=\"Time\" /> <Button Command=\"{Binding ButtonPressedExit}\" Text=\"OK\" tizen:VisualElement.Style=\"{x:Static tizen:ButtonStyle.Bottom}\" /> </StackLayout> </ContentPage.Content> </ContentPage>"
  },
  "guide/CircleSurfaceEffectBehavior.html": {
    "href": "guide/CircleSurfaceEffectBehavior.html",
    "title": "CircleSurfaceEffectBehavior",
    "keywords": "CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is a Behavior , which allows you to attach the CircleSurface to the Xamarin.Forms.Page . CircleSurface is a Tizen specific component that manages circle objects . Following are the two ways to add circle control such as CircleListView , CircleDateTimeSelector , CircleScrollView and CircleStepper at Page in Tizen Xamarin Forms application: Inserting these controls to CirclePage . Adding CircleSurfaceEffectBehavior in Page that includes circle control. Add CircleSurfaceEffectBehavior in Page Add the CircleSurfaceEffectBehavior in the <Page.Behaviors> and set RotaryFocusObject property to Attached Page with circle control name. The RotaryFocusObject sets the currently focused control that is handled by rotating and display the focused control's circle object. For more information, see the following links: CircleSurfaceEffectBehavior API reference Xamarin.Forms.Page guide Xamarin.Forms.Behaviors Guide Consuming a Xamarin.Forms Behavior The code example of this guide uses TCListAppender code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCListAppender.xaml XAML file <w:TwoButtonPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Class=\"WearableUIGallery.TC.TCListAppender\" w:CircleSurfaceEffectBehavior.RotaryFocusObject=\"{x:Reference mylist}\"> <w:TwoButtonPage.Behaviors> <w:CircleSurfaceEffectBehavior/> </w:TwoButtonPage.Behaviors> <w:TwoButtonPage.Content> <w:CircleListView x:Name=\"mylist\" HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\"> <w:CircleListView.Header> <x:String>Head</x:String> </w:CircleListView.Header> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Red\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> </w:CircleListView> </w:TwoButtonPage.Content> <w:TwoButtonPage.FirstButton> <MenuItem Clicked=\"DoAdd\" Icon=\"image/tw_ic_popup_btn_check.png\" /> </w:TwoButtonPage.FirstButton> <w:TwoButtonPage.SecondButton> <MenuItem Clicked=\"DoDel\" Icon=\"image/tw_ic_popup_btn_delete.png\" /> </w:TwoButtonPage.SecondButton> </w:TwoButtonPage>"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Tizen Wearable CircularUI",
    "keywords": "Tizen Wearable CircularUI This document is the API Specification for the Tizen Wearable CircularUI. Namespace Description Tizen.Wearable.CircularUI.Forms Provide the classes for the Circular screen with Tizen wearable devices. Tizen.Wearable.CircularUI.Forms.Renderer Contains the renderer classes on tizen platform for Tizen.Wearable.CircularUI.Forms. Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Provide the classes for creating the Watchface on Tizen wearable devices."
  },
  "guide/CreatingTestAutomation.html": {
    "href": "guide/CreatingTestAutomation.html",
    "title": "Creating UI automation test for Tizen .NET Application",
    "keywords": "Creating UI automation test for Tizen .NET Application This guide shows how to create and run a UI automation test using Appium and NUnit for Tizen .NET Application. Appium is an open source project supporting cross-platform test automation tool. You can find many guide and information. In This guide, Test Application uses WearableUIGallery which contains many TCs to check CircularUI API behavior. Appium Client has a test script for UI automation. This guide uses the Appium.CircularUI.Test . Please refer to the following image There are 4 step for building UI automation Prerequisite Modifying Your Application Make Testscript Run Testscript Prerequisite Installing Appium server appium guide : https://github.com/appium/appium/blob/master/docs/en/contributing-to-appium/appium-from-source.md appium git repository : https://github.com/appium/appium setup and run appium server (e.g ubunt) $ git clone https://github.com/appium/appium.git $ cd appium $ npm install appium-chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver $ npm install $ npm run build $ node . Modifying Your Application If your Application use CircularUI then download Tizen.Appium git. Otherwise, skips 2 ~ 3 steps and go to step 4 after adding Tizen.Appium NuGet in Your Application project. In the Tizen.Appium.csproj file, add WATCH to the DefineConstants value for being restored CircularUI NuGet. <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\"> <DefineConstants>TRACE;DEBUG;TIZEN4_0;WATCH</DefineConstants> </PropertyGroup> <ItemGroup Condition=\"$(DefineConstants.Contains(WATCH))\"> <PackageReference Include=\"Tizen.Wearable.CircularUI\" Version=\"1.0.0-pre2-00118\" /> </ItemGroup> Add Tizen.Appium project to your application solution, and then add Tizen.Appium in a reference project in your application project. In the following Image, Tizen.Appium is added in Tizen.Wearable.CircularUI.Test.Appium solution, and then add in a reference project in WearableUIGallery.Tizen.Wearable project. Add Tizen.Appium.TizenAppium.StartService to main method and Tizen.Appium.TizenAppium.StopService to OnTerminate methods. protected override void OnTerminate() { base.OnTerminate(); #if UITest global::Tizen.Appium.TizenAppium.StopService(); #endif } static void Main(string[] args) { var app = new Program(); global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); FormsCircularUI.Init(); #if UITest global::Tizen.Appium.TizenAppium.StartService(app); #endif app.Run(args); } Add AutomationId to the Xamarin.Forms control for allowing to find and control the specified control during the automation test. Please refer to the following code. <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Vertical\"> <StackLayout Orientation=\"Vertical\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Default\" /> <w:Check AutomationId=\"default\" DisplayStyle=\"Default\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledDefault\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Onoff\" /> <w:Check AutomationId=\"onOff\" DisplayStyle=\"Onoff\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"True\" Toggled=\"OnToggledOnOff\" /> Make Testscript Install Nunit Test Adapter in visual studio : Visual Studio Tools > Extension and Update > Create unit test project(.NET framework) Visual Studio File > New > Project > Tap Test in Visual C# > Select Unit Test Project(.NET Framework) Remove NuGet packages (e.g NunitTestAdapter, Xamarin.UITest ...) except Nunit, and then update Nunit NuGet package to v3.11.0. Install following NuGet packages Appium.WebDriver (upper 4.0.0.4) Selenium.WebDriver Selenium.Support Newtonsoft.Json DotNetSeleniumExtras.PageObjects Castle.Core Remove auto-generated cs files(e.g AppInitializer.cs, Tests.cs), And then copy 3 files ( Program.cs, TestTemplate.cs, UITestDriver.cs ) from Tizen.Wearable.CircularUI\\test\\Appium.CircularUI.Tests\\ to your project. Set configuration. Please refer to InitTizen() in test\\Appium.CircularUI.Tests\\UITestDriver.cs . You should set AppiumOptions Set platformName to Tizen Set deviceName to your testing device name. Set appPackage to your Application package name. Set app to your Application tpk name. Create TizenDriver with Uri(Your Appium server IP address). In the below Example 192.168.0.49 is Appium server IP. You should insert your device's IP which installed Appium server. 4723 is designated port number for Appium server. void InitTizen(string platform, string profile) { AppiumOptions option = new AppiumOptions(); option.AddAdditionalCapability(\"platformName\", platform); option.AddAdditionalCapability(\"deviceName\", \"emulator-26111\"); option.AddAdditionalCapability(\"appPackage\", \"org.tizen.example.WearableUIGallery.Tizen.Wearable\"); option.AddAdditionalCapability(\"app\", \"org.tizen.example.WearableUIGallery.Tizen.Wearable-1.0.0.tpk\"); _driver = new TizenDriver<AppiumWebElement>(new Uri(\"http://192.168.0.49:4723/wd/hub\"), option); _touchScreen = new RemoteTouchScreen(_driver); } If you want to add a common set of functions that are performed before or after each test, please make SetUp method and TearDown method. In the following Appium.CircularUI.Tests code, SetUp and TearDown methods are called in TestTemplate Class. Each Test Class inherited the TestTemplate Class. using NUnit.Framework; namespace Appium.UITests { public class TestTemplate { public UITestDriver Driver; [OneTimeSetUp] public void Init() { Driver = UITestDriver.Instance; } [SetUp] public void TestSetUp() { Driver.FindTC(this.GetType().Name); } [TearDown] public void TestCleanUp() { Driver.GoHomePage(); } } } Write test script with Nunit feature. please refer to Nunit documentation using NUnit.Framework; namespace Appium.UITests { [TestFixture, Order(15)] public class Check : TestTemplate { [Test] public void CheckTest() { Driver.Click(\"default\"); Driver.Click(\"onOff\"); Driver.Click(\"small\"); var isToggled = Driver.GetAttribute<bool>(\"default\", \"IsToggled\"); Assert.True(isToggled, \"Check(default).IsToggled should be true, but got \" + isToggled); ... } } Run Testscript Launch your Tizen emulator or connect Tizen wearable device to PC which installed Appium server. Run Appium Server. Appium installed Path/appium (master)$ node . [Appium] Welcome to Appium v1.9.2-beta.2 (REV a95edb162350a359d6cc45b7aa89a3843b19f0ee) [Appium] Appium REST http interface listener started on 0.0.0.0:4723 Launch Test Explorer Window In Visual Studio 2017. Top menu bar > Test > Windows > Test Explorer Click Run All in Test Explorer window. You can run the selected test clicking the Run Selected Test menu with a mouse right click on a test case."
  },
  "guide/ContentButton.html": {
    "href": "guide/ContentButton.html",
    "title": "ContentButton",
    "keywords": "ContentButton ContentButton is a type of Xamarin.Forms.ContentView that contains a single child element (called Content) and is typically used for custom, reusable controls. Also, as its name implies, ContentButton is designed to be used like a Button that implements Xamarin.Forms.IButtonController . How to customize the button using ContentButton ? ContentButton provides the view to show and the states(Clicked, Pressed and Released) of the button. You can customize the button through changing the view according to the state. The following example shows the CustomButton composed of a combination of Images that define the icon, background, and border of a button. To show a border, this example has set an outlined image with blending color as a Content, and the background color of the button will change to gray when the button is pressed for click-effect. For more information, see the following links: ContentButton API reference Style your Buttons using Tizen .NET Guide Create CircleStepper You can easily add Check control with C# or XAML file. The code example of this guide uses WearableUIGallery's TCContentButton code. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCContentButton.xaml C# file public partial class ContentButtonTestPage : ContentPage { public ContentButtonTestPage() { InitializeComponent(); ClickCommand = new Command(execute: () => { label.Text = \"clicked\"; }); } public ICommand ClickCommand { get; private set; } private void OnButtonClicked(object sender, EventArgs e) { Console.WriteLine($\"ContentButton clicked event is invoked!!\"); } private void OnButtonPressed(object sender, EventArgs e) { Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.SetBlendColor(buttonBg, Color.Gray); } private void OnButtonReleased(object sender, EventArgs e) { Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.SetBlendColor(buttonBg, Color.Transparent); } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" xmlns:tizen=\"clr-namespace:Xamarin.Forms.PlatformConfiguration.TizenSpecific;assembly=Xamarin.Forms.Core\" x:Class=\"WearableUIGallery.TC.ContentButtonTestPage\"> <ContentPage.Content> <StackLayout VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"CenterAndExpand\"> <Label x:Name=\"label\" HorizontalOptions=\"CenterAndExpand\" HorizontalTextAlignment=\"Center\" Text=\"Test\"/> <w:ContentButton x:Name=\"button\" Clicked=\"OnButtonClicked\" Pressed=\"OnButtonPressed\" Released=\"OnButtonReleased\" Command=\"{Binding ClickCommand}\"> <w:ContentButton.Content> <AbsoluteLayout VerticalOptions=\"FillAndExpand\" HorizontalOptions=\"FillAndExpand\"> <Image x:Name=\"buttonBg\" Source=\"button_bg.png\" Opacity=\"0.25\" Aspect=\"AspectFill\" tizen:Image.BlendColor=\"Transparent\" AbsoluteLayout.LayoutBounds=\".5,.5,89,66\" AbsoluteLayout.LayoutFlags=\"PositionProportional\" /> <Image x:Name=\"buttonBorder\" Source=\"button_border.png\" Aspect=\"AspectFill\" tizen:Image.BlendColor=\"DarkGreen\" AbsoluteLayout.LayoutBounds=\".5,.5,89,66\" AbsoluteLayout.LayoutFlags=\"PositionProportional\" /> <Image x:Name=\"buttonIcon\" Source=\"home.png\" tizen:Image.BlendColor=\"DarkGreen\" AbsoluteLayout.LayoutBounds=\".5,.5,36,36\" AbsoluteLayout.LayoutFlags=\"PositionProportional\" /> </AbsoluteLayout> </w:ContentButton.Content> </w:ContentButton> </StackLayout> </ContentPage.Content> </ContentPage>"
  },
  "guide/GoogleMapView.html": {
    "href": "guide/GoogleMapView.html",
    "title": "GoogleMapView",
    "keywords": "GoogleMapView How to display Map in Tizen .NET application You can use the following ways for displaying map in your .NET applications. Tizen.Maps Tizen.Maps provides geocoding. reverse geocording, place searching, route calculation, and map view widgets. This provides the most functionality for map in Tizen .NET application. Tizen.Maps provides Here Maps . In some country, it has low map quality or outdated(e.g. China, Korea, Japan), You can check at mobile.here.com . So you need to make sure that the country where your app is deployed is provided with Here Map data. For using this API, you should use Tizen .NET UI framework which are EFLShrap or Elmsharp or NUI. If you want to use this APIs in Xamarin.Forms Application. you should make custom renderer. Xamarin.Forms.Maps You can use Xamarin.Forms.Maps in Xamarin.Forms application. Xamarin.Forms.Maps.Tizen renderer use Tizen.Maps. So It provides Here Maps data. But, it provides minimun set of map functionality. Use WebView and REST APIs Map providers support Javascirpt API and REST APIs for Web and application. You can retrive map data using System.Net.Http . You can implement javascript code for loading map and then set in Xamarin.Forms.WebView. Tizen.Wearable.CircularUI GoogleMapView GoogleMapView provides minimum functionality of Google Maps javascript APIs . Introduce GoogleMapView provides minimum functionality of Google Maps javascript APIs . It display google map data in WebView which is predefined in renderer. GoogleMapView only provides static map data. It doesn't mean that map can't scroll and zoom. GoogleMapView property value can't reflect user interaction. For example, it is impossible to get the position(geographical coordinates) value where user clicks in GoogleMapView. And, it is impossbile to display the user's current position dynamically. Therefore, you can use it to display a map of a specific area or marking designated positions in the map. Prerequisite 1. Get Google API Key To use the GoogleMapView , you must get an google API key in Google Cloud Patform Console . The API key is used to track API requests associated with your project for usage and billing. For more detail Information, please refer to Get API Key 2. Insert API key in FormsCircularUI.Init set your API key for the parameter of FormsCircularUI.Init(APIKEY) method. Your API key will be used for loading google javascript map in GoogleMapView. private static string APIKEY = \"Insert_Your_Google_API_key\"; ... global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); FormsCircularUI.Init(APIKEY); 3. Add Previleges Before using GoogleMapView for your application, you must add the http://tizen.org/privilege/internet and http://tizen.org/privilege/network.get previlege to tizen-manifest.xml file. Because GoogleMapView needs internet connection. Following figure show adding privilege to tizen-manifest.xml . If you want to get the current location, you should use location service which needs http://tizen.org/privilege/location privilege. Display map GoogleMapView displays google javascript map. GoogleMapView setting value can be changed with GoogleMapOption structure which set by the Update method. By default, GoogleMapOption structure is null. and GoogleMapView renderer set default value. Following example show default GoogleMapView without GoogleMapOption and screen capture of this example(figure1). The code example of this guide uses TCMapViewStackLayout1 code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCMapViewStackLayout1.xaml <ContentPage x:Class=\"WearableUIGallery.TC.TCMapViewStackLayout1\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage.Content> <StackLayout Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:GoogleMapView x:Name=\"GoogleMapView\" VerticalOptions=\"FillAndExpand\" HorizontalOptions=\"FillAndExpand\" /> </StackLayout> </ContentPage.Content> </ContentPage> Following example show the GoogleMapView with GoogleMapOption and screen capture of this example(figure2). Xaml code is same as the above example. Following example only show xaml.cs code. GoogleMapView center latitude and longitude value are set 34.0869 and -118.282242 . And then, Zoom value is set 10.1 and Maptype is set Hybrid . The code example of this guide uses TCMapViewStackLayout3 code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCMapViewStackLayout3.xaml.cs private static double Latitude = 34.0869; private static double Longitude = -118.282242; public TCMapViewStackLayout3() { InitializeComponent (); var position = new LatLng(Latitude, Longitude); var option = new GoogleMapOption(position); option.Zoom = 10.1; option.MapType = GoogleMapType.Hybrid; GoogleMapView.Update(option); } Default GoogleMapView(figure1) GoogleMapView with GoogleMapOption(figure2) Display pins in Map Specific locations can be marked on the map with Xamarin.Forms.Maps.Pin objects. Following example show the GoogleMapView with Pin objects. The figure is the result of this example code. public partial class TCMapViewPins1 : ContentPage { private static double Latitude = 40.7157961; private static double Longitude = -74.0252194; public TCMapViewPins1() { InitializeComponent (); var option = new GoogleMapOption(); var position = new LatLng(Latitude, Longitude); option.Center = position; option.Zoom = 12; mapview.Update(option); var marker1 = new Marker { Position = new LatLng(40.711493, -74.011351), Description = \"Westfield World Trade Center\", Address = \"185 Greenwich St, New York, NY 10007\", }; var marker2 = new Marker { Position = new LatLng(40.689651, -74.045412), Description = \"Statue of Liberty National Monument\", Address = \"New York, NY 10004\", }; var marker3 = new Marker { Position = new LatLng(40.748368, -73.985560), Description = \"Empire State Building\", Address = \"20 W 34th St, New York, NY 10001\", }; mapview.Markers.Add(marker1); mapview.Markers.Add(marker2); mapview.Markers.Add(marker3); } Display device current position (statical) If you want to display marker for your device's current position or display map on your current position, you can use Tizen.Location API. To use the Tizen.Location , you must add http://tizen.org/privilege/location privilege to tizen-manifest.xml (refer to above guide ) and you should add code for checking and requesting of privacy-related permission. Following code example show you how can check and request privacy-related permission. For more detail informaiton about privacy-related permission, please refer to Privacy-related Permissions guide . The code example of this guide uses TCMapViewCurrentPosition code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCMapViewCurrentPosition.xaml.cs public void PrivilegeCheck() { try { CheckResult result = PrivacyPrivilegeManager.CheckPermission(\"http://tizen.org/privilege/location\"); switch (result) { case CheckResult.Allow: break; case CheckResult.Deny: break; case CheckResult.Ask: /// Request to privacy popup PrivacyPrivilegeManager.RequestPermission(\"http://tizen.org/privilege/location\"); break; } } catch (Exception ex) { /// Exception handling } } If a user has granted permission to use the http://tizen.org/privilege/location , device can use Tizen.Location service. Following example code show the GoogleMapView which move to current position and display marker your device position. And the following figure is the result of this example code. void LocationInitialize() { try { _locator = new Locator(LocationType.Hybrid); if (_locator != null) { _locator.Start(); _locator.ServiceStateChanged += LocatorServiceStateChanged; } _locatorInitialized = true; } catch (Exception ex) { /// Exception handling } } public void LocatorServiceStateChanged(object sender, ServiceStateChangedEventArgs e) { if (e.ServiceState == ServiceState.Enabled) { GetCurrentPosition(); } ... } private void GetCurrentPosition() { var marker = new Marker(); try { Location location = _locator.GetLocation(); var current = new LatLng(location.Latitude, location.Longitude); Tizen.Log.Debug(\"CircularUI\", $\"Current:[{location.Latitude},{location.Longitude} ]\"); marker.Position = current; } catch (Exception ex) { ... } marker.Description = \"Current position\"; _option.Center = marker.Position; _option.Zoom = 14; mapviewPosition.Update(_option); mapviewPosition.Markers.Add(marker); }"
  },
  "guide/TwoButtonPopup.html": {
    "href": "guide/TwoButtonPopup.html",
    "title": "TwoButtonPopup",
    "keywords": "TwoButtonPopup The TwoButtonPopup represents The Tizen Wearable EFL two button popup style. The TwoButtonPopup is used to select one of the two options such as cancel or done, and share or delete. Since TwoButtonPopup does not adhere as a control, this popup cannot be set in the XAML file. Create TwoButtonPopup The TwoButtonPopup.Title property sets the title of the popup. You can set the Content property with layouts such as StackLayout or ScrollView . The TwoButtonPopup.FirstButton property sets the left side button. The TwoButtonPopup.SecondButton property sets the right side button. You can set FirstButton and SecondButton using the MenuItem . You must add code at Command or Clicked event handler for controlling MenuItem clicked. For more information, see TwoButtonPopup API reference . The code example of this guide uses TCTwoButtonPopup code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCTwoButtonPopup.xaml.cs C# file var leftButton = new MenuItem() { Icon = new FileImageSource { File = \"image/b_option_list_icon_share.png\", }, Command = new Command(() => { /* must insert code when user press left button */ }) }; ... _popUp1 = new TwoButtonPopup(); _popUp1.FirstButton = leftButton; _popUp1.SecondButton = rightButton; _popUp1.Title = \"Popup title\"; _popUp1.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved, and sound, only on the Gear.\", }, new StackLayout { Orientation = StackOrientation.Horizontal, Padding = new Thickness(0, 30, 0, 30), Children = { checkbox, new Label { Text = \"Do not repeat\", } } } } }; } How to Set Long Text in TwoButtonPopup The TwoButtonPopup has Text property. This property is useful to set long text. If a long text is set using the Text property, you do not need to add StackLayout , ScrollView , Label to display long text. The area of the Text property overlaps the area of the Content property. Therefore, do not use two properties at the same time. C# file _popUp2 = new TwoButtonPopup(); _popUp2.FirstButton = leftButton2; _popUp2.SecondButton = rightButton2; _popUp2.Title = \"Popup title\"; _popUp2.Text = @\"This is scrollable popup text. This part is made by adding long text in popup. Popup internally added scroller to this layout when size of text is greater than total popup height. This has two button in action area and title text in title area\";"
  },
  "index.html": {
    "href": "index.html",
    "title": "Tizen CircularUI",
    "keywords": "Tizen CircularUI The Tizen CircularUI is a set of helpful extensions to the Xamarin Forms framework on the Samsung Gear device. The binaries are available via NuGet (package name CircularUI) with the source available here. Controls Name Description BezelInteractionPage A subclass of Xamarin.Forms.ContentPage that allows you to set which view gets the bezel rotation event. Check(obsolete) A subclass of Xamarin.Forms.Switch control with some different styles. CircleDateTimeSelector A picker control to select date or time that fits in the circular screen. Unlike Xamarin.Forms.DatePicker or Xamarin.Forms.TimePicker , it can be shown on the page without popup. CircleImage An image control that crops an image in a circle shape. CircleListView A subclass of Xamarin.Forms.ListView that allows you to change the bar color of the ListView. CirclePage(obsolete) A subclass of Xamarin.Forms.Page that can show Circular ProgressBar and Circular Slider and the button on the bottom of the screen. it can also show MenuItems on the circular menu.(MoreOption) CircleProgressBarSurfaceItem A progress control that fits in the circular screen. This control can be only used in the CircleSurfaceView. CircleScrollView A subclass of Xamarin.Forms.ScrollView that allows you to change the bar color of the ScollView. CircleSliderSurfaceItem A slider control that responds to the bezel action and fits in the circular screen. CircleStackLayout A container to layout children linear in the circular area. CircleStepper A subclass of Xamarin.Forms.Stepper that provides additional properties to set visible elements on Tizen wearable. CircleSurfaceEffectBehavior A behavior that allows you to insert views that require CircleSurface. CircleSurfaceItem An item class to represent the items in the CircleSurface. CircleSurfaceView A view that can have several CircleSurfaceItems, not a page. CircleToolbarItem An item class that can show a toolbar item fitting in the circular screen. CircularShell A subclass of Xamarin.Forms.Shell that provides more extended properties for Flyout. When the Flyout is opened, the application will not be terminated even if an user press the back button. ColorMenuItem An item class that allows you to set the background color of the button used in the popup control. ContentButton A button control that allows you to customize the view to show. ContextPopupEffectBehavior A behavior to show a small popup which has one or two buttons. This can be added to any Xamarin.Forms.View . FlatViewCell A cell that turns off the default effect(fish-eye effect) applied in wearable profile. GoogleMapView A view to display google javascript map. IndexPage(obsolete) A subclass of multiple Pages that can slide child page horizontal and has dots on top of the screen for the number of child pages. InformationPopup A popup that includes a control showing progress and one button on the bottom of the circular screen. MediaPlayer A class that provides the essential components to play the media contents. MediaView A view to display a video on the screen. PopupEntry An entry that opens popup for editing text of the entry. Radio(obsolete) A radio control fits in the circular screen. TwoButtonPage A page that has two buttons. One is on the left, and the other is on the right side of the circular screen. TwoButtonPopup A popup that has two buttons. One is on the left, and the other is on the right side of the circular screen. Toast A popup for simple feedback."
  },
  "guide/CreatingCertificates.html": {
    "href": "guide/CreatingCertificates.html",
    "title": "Creating Certificates",
    "keywords": "Creating Certificates This document explains how to create the necessary ceriticates or import existing ones to install the Tizen application on a Samsung Tizen wearable device. Creating Certificate Profile In the menu bar, click Tools > Tizen > Tizen Certificate Manager to launch the Certificate Manager. Import Old Profile If you have a profile, which you have created in the past, you can import it. Click the Cancel button, if you want to create a new profile. Create a New Certificate Profile Certificate profile contains author certificate and distributor certificate. New certificate profile Click the + button to create a certificate profile. Type of the certificate Select Samsung as the certificate profile to generate certificates to develop and install an application to the Samsung devices. To upload the application to the store, you must select the certificate profile as Samsung. However, if you want to use the emulator and do not want to upload the application to the store, select Tizen to create certificate locally. Type of the device Select Device Type and click Next . Create new or select old profile Select Create a new certificate profile to create a new profile. If there is an existing profile, then select the second option. For more information on Select an existing certificate profile , see how to manage certificate profile . Create a New Author Certificate An author certificate includes information about the author of the application. It is used to create an author signature, which ensures the integrity of the application from the author since the publication of the application. Create new or select existing author certificate Select Create a new author certificate . If there is an existing author certificate, see how to manage certificate profile . With Advanced options menu, you can check Use an existing author certificate option to select either the Android keystore, or you can also choose already existing Samsung author certificate. Click Next . The same signing key helps in maintaining secure peer authentication between the Tizen Gear App and the Android mobile app. For more information, see Accessory SDK . In case of selecting a Samsung author certificate, you can just renew the certificate with the same information. This renewed certificate will be the same as your original RSA key so upgrading your application is guaranteed. Information of the author certicate Enter the author name and password. It is recommended to set a strong password. If you want to use the same password for the distributor certificate in the next step, select the check box as shown in the following figure: Additional Fields contains more Certificate Signing Request(CSR) information to add, but are not mandatory. Click Next . Sign in to Samsung Account Samsung Account sign-in window appears. Click Sign in or Create new account . (To get a certificate, you must have a Samsung Account. If you do not have an account, it is recommended to create a new account.) Backup created Author certificate After sign in step, you can get the author certificate. The author certificate must be secure. Therefore, it is recommend creating a backup. Click Browse to specify the backup location. If you lose the author certificate, you cannot upgrade your application signed with the same certificate. Click Next . The next step is creating distributor certificate. Create a New Distributor Certificate Create new or select existing distributor certificate Select Create a new distributor certificate to create a new certificate. If you select Select an existing distributor certificate , see Managing Certificate Profile . Click Next . Information of the distributor certicate Select the Privilege level for the distributor certificate. The application must have a distributor certificate with appropriate privilege level to ensure that the implemented APIs work in the device. Note Privileges To protect the device system and user private data, the Tizen security architecture is based on privileges and application signing of the Linux basic security model. Linux basic security model includes process isolation and mandatory access control. The users must have options to grant privileges for security-sensitive operations. Public - No limitation. The privileges can be used by all Tizen application developers. Partner - No limitation to request and get the distributor certificate with this level. But when the application is uploaded to the store, store re-signs the application with official partner level distributor certificate, only for the registered partner developer at Samsung. If you have selected an option to apply same password to the author certificate and to the distributor certificate while entering author certificate information , the password is already saved. If you want to change the password, type the new password for the distributor certificate. After the device is connected to the Host PC, the DUID is automatically added to the list. If you want to add more devices, connect your device to your Host PC via USB or WiFi. The previous DUIDs in the list are not deleted even if you disconnect the device. To delete the DUIDs, click the trash icon. For more information, see How to connect the device to PC via WiFi . When you need to register devices that are more than 10, upload a txt file using Import a DUID list file menu. 1 DUID on a line and max 50 DUIDs are be available. Note The DUID of recent mobile and wearable devices start with 2.0#, but old devices are 1.0#. If a distributor certificate contains a 1.0# DUID, all devices with that certificate require one more step. For more information, see Permit Device To Install Applications guide. If you do not have any actual device but want to develop apps and upload to the store, launch the emulator virtual machine and use its DUID. Finish to create the distributor certificate Click Next , to get the distributor certificate. Click Finish . You can find the created profile and its information."
  },
  "guide/TestingYourAppOnGear.html": {
    "href": "guide/TestingYourAppOnGear.html",
    "title": "Test Tizen .NET Application on a Gear device",
    "keywords": "Test Tizen .NET Application on a Gear device To publish a Tizen .NET Application to Samsung Gallaxy Apps store, you have to test it on Samsung Gear devices. Since Samsung Gear does not have a USB port, Tizen provides a support to publish the app to the app store over Wi-Fi. Therefore, you must connect the Gear device to Wi-Fi and the host PC to Wi-Fi or the Unshielded-Twisted-Pair (UTP) cable to the same local network. Prepare Gear Device To debug an application on the Samsung Gear device: Execute the Settings application. Scroll to the bottom of the menu and tap About watch . Tap Debugging to turn on. Press the back button of the hardware, scroll to the Connections menu, and tap it. Tap Wi-Fi to turn it on. Debugging over Wi-Fi You can install and execute your application on the Samsung Gear device over Wi-Fi. Open Visual Studio 2017 app on your developer computer. Select Tizen > Tizen Device Manager > Remote Device Manager . Click Scan Devices to search for remote Samsung Gear devices. You can see a list of available remote devices. Select the IP of Samsung Gear Device that you want to connect to. The connected Gear device appears on the Device Manager Explorer window. Connecting via the SDB command You can connect to Gear device via SDB command. Open the Command Prompt in the Host PC and enter the following command: $ sdb connect [Gear S2 IP address]:26101 Example $ sdb connect 192.168.0.71:26101 You can see the states of the connected Gear devices using SDB command. $ sdb devices List of devices attached 192.168.0.71:26101 device SM-R805U"
  },
  "guide/MediaView.html": {
    "href": "guide/MediaView.html",
    "title": "MediaView and MediaPlayer",
    "keywords": "MediaView and MediaPlayer Introduction MediaView is used to displaythe video on the screen. MediaPlayer provides functionality of playing multimedia. PlaybackState MediaPlayer has a PlaybackState . Some APIs only work on the certain state and some APIs transit the state. State diagram of PlaybackState Video output type Buffer It displays video data on the graphics buffer using GL surface. It is usually used to attach a video on a part of the view. MediaView Associating Player with MediaView MediaPlayer and video output are created independently. The developer needs to associate Player and the video output to display video data. Use Player property of MediaView <w:CirclePage x:Class=\"WearableUIGallery.TC.TCMediaViewStackLayout\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:CirclePage.Content> <StackLayout> <w:MediaView x:Name=\"View\"> <w:MediaPlayer x:Name=\"VideoPlayer\" Source=\"test.mp4\" AutoPlay=\"true\" UsesEmbeddingControls=\"true\"/> </w:MediaView> </StackLayout> </w:CirclePage.Content> </w:CirclePage> var view = new MediaView { Player = new MediaPlayer { UsesEmbeddingControls = true, AutoPlay = true, Source = MediaSource.FromFile(\"test.mp4\") } }; Embedding controls By default, MediaPlayer provides an embedding control. If you don't want to use the default embedding controls, set UsesEmbeddingControls to false. public bool UsesEmbeddingControls embedding contols (on playing) embedding contols (on pausing) without embedding controls AutoPlay/AutoStop Video can't play before media view is shown, so you need to know when the media views are available. If you use AutoPlay / AutoStop property, you don't need to care about the view state. AutoPlay public bool AutoPlay Automatically starts a player when a View is shown (Rendered). AutoStop public bool AutoStop Automatically stops a player when a View is gone (Renderer was disposed). Convert Position to Progress In many cases, MediaPlayer.Position is int value, whereas Progressbar.Progress is double value (0 to 1.0), so conversion is required. This can be easily implemented through a custom converter as follows. Create a custom converter Implements Xamarin.Forms.IValueConverter public class PositionToProgressConverter : IValueConverter { public object Convert(object value, Type targetType, object parameter, CultureInfo culture) { return ((int)value / (double)(GetParameter(parameter))); } public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) { return (int)((double)value * GetParameter(parameter)); } int GetParameter(object parameter) { var duration = ((Tizen.Wearable.CircularUI.Forms.MediaPlayer)parameter).Duration; if (duration == 0) duration = 1; return duration; } } Pass a MediaPlayer instance as the parameter Use a custom converter in Xaml .... <ContentPage.Resources> <ResourceDictionary> <local:PositionToProgressConverter x:Key=\"positionToProgress\"/> </ResourceDictionary> </ContentPage.Resources> ... <ProgressBar Progress=\"{Binding Source={x:Reference Player}, Path=Position, Converter={StaticResource positionToProgress}, ConverterParameter={x:Reference Player}}}\"/> ...."
  },
  "guide/IndexPage.html": {
    "href": "guide/IndexPage.html",
    "title": "IndexPage",
    "keywords": "IndexPage Warning IndexPage is obsolete as of version 1.5.0. Please use Xamarin.Forms.CarouselView with Xamarin.Forms.IndicatorView or Xamarin.Forms.CarouselPage instead. The IndexPage allows you to know in advance the number of pages you have when you configure the application on multiple pages. It also shows the number of pages you are viewing. It is an extension of Xamarin.Forms.MultiPage . When the Page is added and removed in the Xamarin.Forms.MultiPage , the number of dot marks increases or decreases automatically at the top of window. It is similar to the CarouselPage in the Xamarin.Forms, with the addition of Index . When the Page is scrolled, the Index operates internally. Add IndexPage You can add pages and this will increase the number of dot mark by index accordingly. The maximum number of dot mark is 20 follow as the Samsung device UI limitation. In the illustrated example, three pages are added. The number of dot mark is three. Since, it is on the first page, only the first dot mark is shown as white, and the remaining dot marks are shown as grey. Since the maximun number of dot mark is limited by the samsung device UI guide, you will run into unwanted issue if you add pages more than the maximum number For more information, see the following links: IndexPage API reference Xamarin.Forms.MultiPage API reference The code example of this guide uses TCIndexPage code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCIndexPage.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:IndexPage x:Class=\"WearableUIGallery.TC.TCIndexPage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Red\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Red\" /> </StackLayout> </ContentPage> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Green\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Green\" /> </StackLayout> </ContentPage> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Blue\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Blue\" /> </StackLayout> </ContentPage> </w:IndexPage>"
  },
  "guide/CircleStackLayout.html": {
    "href": "guide/CircleStackLayout.html",
    "title": "CircleStackLayout",
    "keywords": "CircleStackLayout CircleStackLayout organizes views in a one-dimensional line (\"stack\"), either horizontally or vertically. CircleStackLayout is similar to Xamarin.Forms.StackLayout , but it arranges internal components in a form that fits the circular screen. Rectangular components are placed in close proximity to the circle. Margin is calculated after placement. If Orientation is not set, Vertical is used. The larger the Spacing value, the greater the distance between the components placed. At the right end of the following figure, the Spacing value is 50: Horizontal Vertical Spacing Note CircleStackLayout will lay out the children in the form of inserting a circle with a radius that is the shorter of \"width\" and \"height\". Therefore, it may be strange if one of the axes is very short, so it is better to use it when the width and height of the layout area are similar. Add CircleStackLayout in ContentPage You can set CircleStackLayout in ContentPage . In the following example, there is a large number of BoxView . Therefore, the entire content is larger than the screen size and uses CircleStackLayout in ScrollView . For more information, see the following links: CircleStackLayout API reference Xamarin.Forms.StackLayout API reference Xamarin.Forms.StackLayout Guide The code example of this guide uses TCCircleStackLayout.xaml code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleStackLayout.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:IndexPage x:Class=\"WearableUIGallery.TC.TCCircleStackLayout\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> ... <ContentPage> <ScrollView> <w:CircleStackLayout> <BoxView BackgroundColor=\"Red\" /> <BoxView BackgroundColor=\"Orange\" /> <BoxView BackgroundColor=\"Yellow\" /> <BoxView BackgroundColor=\"Green\" /> <BoxView BackgroundColor=\"Blue\" /> <BoxView BackgroundColor=\"Navy\" /> <BoxView BackgroundColor=\"Purple\" /> <BoxView BackgroundColor=\"Red\" /> <BoxView BackgroundColor=\"Orange\" /> <BoxView BackgroundColor=\"Yellow\" /> <BoxView BackgroundColor=\"Green\" /> <BoxView BackgroundColor=\"Blue\" /> <BoxView BackgroundColor=\"Navy\" /> <BoxView BackgroundColor=\"Purple\" /> </w:CircleStackLayout> </ScrollView> </ContentPage> ... </w:IndexPage> Bad case to using <ContentPage> <w:CircleStackLayout VerticalOptions=\"Center\" BackgroundColor=\"White\"> <Label VerticalOptions=\"Center\" Text=\"Welcome to Xamarin Forms!\" BackgroundColor=\"Gray\"/> </w:CircleStackLayout> </ContentPage> In Bad case, the width of CircleStackLayout is too long of the height of it. CircleStackLayout lay out the children in a small circle because it assumes shorter axes is a radius. Check out next very simple example of using StackLayout. <ContentPage> <StackLayout VerticalOptions=\"Center\" BackgroundColor=\"White\"> <Label VerticalOptions=\"Center\" Text=\"Welcome to Xamarin Forms!\" BackgroundColor=\"Gray\"/> </StackLayout> </ContentPage> You should check the size of the CircleStackLayout if you lay out the children to right place. <ContentPage> <w:CircleStackLayout VerticalOptions=\"Fill\" BackgroundColor=\"White\"> <Label HorizontalOptions=\"CenterAndExpand\" VerticalOptions=\"CenterAndExpand\" Text=\"Welcome to Xamarin Forms!\" BackgroundColor=\"Gray\"/> </w:CircleStackLayout> </ContentPage> In good case of the CircleStackLayout. you can see each vertex of the label that contacts inside of the circle."
  },
  "guide/LibraryList.html": {
    "href": "guide/LibraryList.html",
    "title": "Third Party Libraries for Tizen .NET Application",
    "keywords": "Third Party Libraries for Tizen .NET Application Following is the list of libraries filtered based on the purpose: Hardware Messaging Multimedia Security System User interface Hardware Libraries for programming with hardware. Barcode Scanner - Scans and creates barcodes with ZXing.NET.Mobile. Battery Status - Gathers battery level, charging status, and charging type. Connectivity - Gets network connectivity information such as type and verifies whether the connection is available. Device Info - Properties about device such as OS, Model, and Id. Device Motion - Provides access to Accelerometer, Gyroscope, Magnetometer, and Compass. Messaging Libraries for manipulating message. Messaging - Make phone call, send sms, and send e-mail. Multimedia Libraries for manipulating multimedia. FFImageLoading - Image loading with caching, placeholders, transformations and so on. SimpleAudioPlayer - Plays local files and audio data as a stream. This allows you to store audio data in a portable class library and play it on all supported platforms. SkiaSharp - Is a cross-platform 2D graphics API for .NET platforms based on Google's Skia Graphics Library. It provides a comprehensive 2D API that can be used across mobile, server, and desktop models to render images. Media - Takes photos and videos using camera and selects them from gallery. Media Manager - Play and control audio and video. Security Libraries for manipulating secure storage. Secure Storage - Provides secure storage for key-value pairs. It can be used to securely store sensitive data strings such as password, session token, credit card number, and so on. System Libraries for manipulating system. Permissions - Verifies and requests runtime permissions. Settings - Simple and consistent cross platform settings API. User interface Libraries for working with graphical user interface applications. Share - Shares texts, links, or opens a browser. User Dialogs - This library is for standard user dialog from core .net standard library, actionsheets, alerts, confirmations, loading, login, progress, prompt, and toast."
  },
  "guide/Quickstart_tizenXAMLAppTemplate.html": {
    "href": "guide/Quickstart_tizenXAMLAppTemplate.html",
    "title": "Tizen XAML App Template",
    "keywords": "Tizen XAML App Template 1) Create project Select 'Tizen XAML App' template on 'New project'. Select only wearable device at Tizen project wizard. Search Xamarin.Forms NuGet package and install latest version (supports version 3.1.0.583944 and higher) via NuGet package manager. Package source is Nuget.org . Search Tizen.Wearable.CircularUI NuGet package and install latest version via NuGet package manager. Package source is Nuget.org . Install Tizen.Wearable.CircularUI NuGet at portable class library (PCL) project. 2) Insert CircularUI control code Remove SampleCircleApp.cs that is generated automatically at PCL. Add App.xaml and App.xaml.cs using add item. In App.xaml file, remove all of the template code and replace it with the following code. This code defines the user interface for the page: xmlns:w=clr-namespace:Tizen.Wearable.CircularUI.Forms : w prefix means Tizen.Wearable.CircularUI.Forms namespace. <w:CirclePage> : CirclePage derive from Xamarin.Forms.Page . This Page content area has Label and Button . <w:CirclePage.CircleSurfaceItems> : CircleSliderSurfaceItem attached for CircleSurfaceItem of CirclePage . RotaryFocusObject is set reference of the slider . CircleSliderSurfaceItem has rotary focus. CircleSliderSurfaceItem can receive a Rotary Event from the wearable device's bezel interaction. For more information, see CirclePage guide . App.xaml file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <Application x:Class=\"SampleCircleApp.App\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:SimpleCircleApp\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <Application.MainPage> <NavigationPage x:Name=\"MainNavigation\"> <x:Arguments> <w:CirclePage x:Name=\"page\" NavigationPage.HasNavigationBar=\"False\" RotaryFocusObject=\"{x:Reference slider}\"> <w:CirclePage.Content> <StackLayout HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label HorizontalTextAlignment=\"Center\" Text=\"Welcome to Xamarin Forms!\" /> <Button Clicked=\"OnButtonClicked\" Text=\"show toast\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleSliderSurfaceItem x:Name=\"slider\" Increment=\"0.5\" IsVisible=\"True\" Maximum=\"15\" Minimum=\"0\" Value=\"3\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage> </x:Arguments> </NavigationPage> </Application.MainPage> </Application> In App.xaml.cs, remove all of the template code and replace it with the following code: OnButtonClicked is an event handler of Button Clicked event. The following code simply displays Toast popup during three seconds: App.xaml.cs file using Tizen.Wearable.CircularUI.Forms; using System; using Xamarin.Forms; using Xamarin.Forms.Xaml; namespace SampleCircleApp { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class App : Application { public App() { InitializeComponent(); } public void OnButtonClicked(object sender, EventArgs e) { Toast.DisplayText(\"Toast popup\", 3000); } } } For initializing CircularUI instance, insert FormsCircularUI.Init() code in the Main method in SampleCircleApp.Tizen.Wearable.cs . You must import Tizen.Wearable.CircularUI.Forms.Renderer with using directives. SampleCircleApp.Tizen.Wearable.cs file using Tizen.Wearable.CircularUI.Forms.Renderer; static void Main(string[] args) { var app = new Program(); global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); FormsCircularUI.Init(); //must insert this initialize code app.Run(args); } 2. Build and launch your application. Build the solution In the Visual Studio menu, select Build > Build Solution. In the Solution Explorer view, right-click the solution name and select Build. Launch Tizen Emulator Click Launch Tizen Emulator button, as displayed in the following image: For Windows OS, copy the application tpk file from the project binary path to sdb tool path. SampleCircleApp tpk: The file is located in ProjectPath\\SampleCircleApp.Tizen.Wearable\\bin\\Debug\\tizen40\\org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk . Project path: To locate the project path, in the Solution Explorer view, right-click the solution name and click open folder in file explorer . sdb tool: This is located in c:\\tizen\\tools\\sdb.exe For Windows OS, launch Tizen Sdb Command Prompt (Tool > Tizen > Tizen Sdb Command Prompt). For Linux, you can use sdb command directly in your project path. Install your app with sdb command sdb install org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk Launch wearable emulator to verify the application"
  },
  "guide/TwoButtonPage.html": {
    "href": "guide/TwoButtonPage.html",
    "title": "TwoButtonPage",
    "keywords": "TwoButtonPage TwoButtonPage is derived from Xamarin.Forms.Page . TwoButtonPage has two semicircular buttons that are located at the left side and the right side of the circle. Non-overlapped Overlapped Create TwoButtonPage You can set controls in the TwoButtonPage.Content tag. In the XAML file example, a long text Label and two buttons are set as the content. If the Overlap property is set to true , the Content area occupies the entire screen. If the Overlap property is set to false , the Content area occupies the available area on the screen excluding the button area. The default value of Overlap property is always false . TwoButtonPage.firstButton sets left side button. TwoButtonPage.SecondButton sets right side button. You can add buttons using MenuItem . For more information, see the following links: TwoButtonPage API reference Xamarin.Forms.Page guide Xamarin.Forms.MenuItem API reference The code example of this guide uses TCTwoButtonPage code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCTwoButtonPage.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:TwoButtonPage x:Class=\"WearableUIGallery.TC.TCTwoButtonPage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:TwoButtonPage.BindingContext> <local:TCTwoButtonPageViewModel /> </w:TwoButtonPage.BindingContext> <w:TwoButtonPage.Content> <ScrollView> <StackLayout HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\"> <Label HorizontalOptions=\"FillAndExpand\" HorizontalTextAlignment=\"Center\" Text=\"{Binding Text}\" VerticalOptions=\"FillAndExpand\" /> <Button Clicked=\"OnRemove1\" Text=\"Remove 1\" /> <Button Clicked=\"OnRemove2\" Text=\"Remove 2\" /> </StackLayout> </ScrollView> </w:TwoButtonPage.Content> <w:TwoButtonPage.FirstButton> <MenuItem Command=\"{Binding Command1}\" Icon=\"image/tw_ic_popup_btn_check.png\" /> </w:TwoButtonPage.FirstButton> <w:TwoButtonPage.SecondButton> <MenuItem Command=\"{Binding Command2}\" Icon=\"image/tw_ic_popup_btn_delete.png\" /> </w:TwoButtonPage.SecondButton> </w:TwoButtonPage>"
  },
  "guide/CirclePage.html": {
    "href": "guide/CirclePage.html",
    "title": "CirclePage",
    "keywords": "CirclePage Warning CirclePage is obsolete as of version 1.5.0. Please use Xamarin.Forms.ContentPage instead. CirclePage → Xamarin.Forms.ContentPage ActionButton → Xamarin.Forms.Button + Xamarin.Forms.Button.Style (TizenSpecific) or ContentButton RotaryFocusObject → BezelInteractionPage or Xamarin.Forms.Application.ActiveBezelInteractionElement (TizenSpecific) CircleSurfaceItems → CircleSurfaceView.CircleSurfaceItems CircleToolbarItems → Xamarin.Forms.Page.ToolbarItems CirclePage, is a visual element, which is derived from Xamarin.Forms.Page . This occupies entire wearable screen. Overview CirclePage is a container of any control that uses circle object or Rotary Event . If you want to use any circle control or you want to handle the Rotary Event , you must use CirclePage . CirclePage can set BOTTOM button ( ActionButtonItem ), CircleProgressBar , CircleSlider and MoreOption on its own. WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. BOTTOM button (ActionButtonItem) A semicircular button is shown at bottom of screen. See the following image: CircleProgressBar CircleProgressBar displays the progress status of a given task with the circular design. CircleSlider CircleSlider changes value corresponding to the Rotary Event . This displays a circle bar at the edge of the circle screen. You can change the radius of circle bar by modifying radius value. MoreOption MoreOption contains a cue button (in the figure on the left). When the cue button is clicked, the rotary selector view opens from the cue location (in the figure on the right). The rotary selector arranges multiple items around the circular edge of the screen. The focus switches between items when you rotate the bezel. Create CirclePage To create CirclePage, you must download Tizen.Wearable.CircularUI NuGet package in your application project. For more information, see QuickStart . Add a new XAML page to the Tizen Xamarin.Forms application. Import Tizen.Wearable.CircularUI.Forms and change the base class from ContentPage to CirclePage. This must be done in both the C# and XAML. In a XAML file, import CircularUI and define namespace as xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" The code example of this guide uses TCCirclePage code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCirclePage.xaml C# file using Tizen.Wearable.CircularUI.Forms; using Xamarin.Forms.Xaml; namespace WearableUIGallery.TC { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCCirclePage : CirclePage { public TCCirclePage() { InitializeComponent(); } } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{Binding RotaryFocusTarget}\"> <w:CirclePage.Content> Add content in CirclePage You can set content in the CirclePage.Content . In the XAML file, code explains that CirclePage adds content with CircleDateTimeSelector . RotaryFocusObject property sets the currently focused control that is handled by rotating and display the circle object of the focused control. If the value is not set properly, the control will not receive the Rotary Event . For more information, see the following links: CirclePage API reference Xamarin.Forms.Page guide XAML file <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{Binding RotaryFocusTarget}\"> <w:CirclePage.BindingContext> <local:TCCirclePageViewModel RotaryFocusTarget=\"{x:Reference DateSelector}\"/> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout BackgroundColor=\"Black\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:CircleDateTimeSelector x:Name=\"DateSelector\" IsVisibleOfDate=\"{Binding DateVisiblity}\" MaximumDate=\"1/1/2020\" MinimumDate=\"1/12/2015\" ValueType=\"Date\" /> </StackLayout> </w:CirclePage.Content> Add ActionButtonItem in CirclePage The ActionButtonItem in CirclePage displays BOTTOM button. The ActionButtonItem is derives from Xamarin.Forms.Menuitem . ActionButtonItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation (item clicked). Text : Gets or sets text of button. For more information, see the following links: ActionButtonItem API reference Xamarin.Forms.MenuItem API reference XAML file <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ProgressBarVisibleCommand}\" Text=\"OK\" /> </w:CirclePage.ActionButton> Add ToolbarItems in CirclePage CirclePage ToolbarItems set items of rotary selector views. You can set each item with CircleToolbarItem property. CircleToolbarItem derives from Xamarin.Forms.ToolbarItem . CircleToolbarItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation (item clicked). Icon : Gets or sets image of item. Text : Gets or sets title of item. For more information, see the following links: CircleToolbarItem API reference Xamarin.Forms.ToolbarItem API reference XAML file <w:CirclePage.ToolbarItems> <w:CircleToolbarItem Command=\"{Binding Play.Action}\" Icon=\"{Binding Play.Icon}\" SubText=\"{Binding Play.SubText}\" Text=\"{Binding Play.Text}\" /> <w:CircleToolbarItem Command=\"{Binding Stop.Action}\" Icon=\"{Binding Stop.Icon}\" SubText=\"{Binding Stop.SubText}\" Text=\"{Binding Stop.Text}\" /> ... </w:CirclePage.ToolbarItems> Add CircleProgressBarSurfaceItem in CirclePage CirclePage CircleSurfaceItems can set CircleProgressBarSurfaceItem and CircleSliderSurfaceItem . CircleProgressBarSurfaceItem represents Circle ProgressBar. progress1 at XAML code represents the outer circle of following image. progress2 represents the inner circle. If you use CircleProgressbar, you do not need to set the RotaryFocusObject property of CirclePage. When Value property is increased or decreased, circle object extends or shrinks the following to the Value property. CircleProgressBarSurfaceItem has the following properties: Value : Gets or sets the value of the progress bar. IsVisible : Gets or sets the visibility value of circle surface item. BarRadius : Gets or sets the bar radius value. BackgroundRadius : Gets or sets the background radius value. BarLineWidth : Gets or sets the bar line width value. BackgroundLineWidth : Gets or sets the background line width value. BarColor : Gets or sets the bar color value. BackgroundColor : Gets or sets the background color value. For more information, see the following links: CircleSurfaceItem API reference CircleProgressBarSurfaceItem API reference The code example of this guide uses CircleProgressBar.xaml code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleProgressBar.xaml XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleProgressBar\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" NavigationPage.HasNavigationBar=\"False\"> <w:CirclePage.BindingContext> <local:CircleProgressBarViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout Padding=\"0,30,0,0\" BackgroundColor=\"Black\" HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <Label x:Name=\"label1\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel1}\" TextColor=\"White\" /> <Label x:Name=\"label2\" Margin=\"0,40\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel2}\" TextColor=\"White\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleProgressBarSurfaceItem x:Name=\"progress1\" IsVisible=\"True\" Value=\"{Binding ProgressValue1}\" /> <w:CircleProgressBarSurfaceItem x:Name=\"progress2\" BackgroundColor=\"Black\" BackgroundLineWidth=\"15\" BackgroundRadius=\"70\" BarColor=\"Red\" BarLineWidth=\"15\" BarRadius=\"70\" IsVisible=\"True\" Value=\"{Binding ProgressValue2}\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage> Add CircleSliderSurfaceItem in CirclePage CircleSliderSurfaceItem represents Circle Slider. slider at XAML code represents the circle of following image. If you use CircleSlider bar, you must set Circle Slider name at the RotaryFocusObject property of CirclePage. The Value property is the default value for the Slider. If you rotate the bezel, the Value property increases or decreases depending on the bezel behavior. The Increment property is the incremental or decremental change as you rotates the bezel. CircleSliderSurfaceItem has the following properties: Value : Gets or sets the value of the slider. Increment : The value of the slider is increased/decreased by the Increment value. Minimum : Gets or sets the minimum value of the slider. Maximum : Gets or sets the maximum value of the slider. BarLineWidth : Gets or sets the bar line width value. BackgroundLineWidth : Gets or sets the background line width value. BarColor : Gets or sets the bar color value. BackgroundColor : Gets or sets the background color value. For more information, see the following links: CircleSurfaceItem API reference CircleSliderSurfaceItem API reference The code example of this guide uses CircleSlider.xaml code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleSlider.xaml XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleSlider\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" NavigationPage.HasNavigationBar=\"False\" RotaryFocusObject=\"{x:Reference slider}\"> <w:CirclePage.Content> <StackLayout HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label x:Name=\"label\" BindingContext=\"{x:Reference Name=slider}\" FontSize=\"12\" Text=\"{Binding Value, StringFormat='{0:F1}'}\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleSliderSurfaceItem x:Name=\"slider\" Increment=\"0.5\" Maximum=\"15\" Minimum=\"0\" Value=\"3\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage>"
  },
  "guide/IRotaryEventReceiver.html": {
    "href": "guide/IRotaryEventReceiver.html",
    "title": "IRotaryEventReceiver",
    "keywords": "IRotaryEventReceiver IRotaryEventReceiver is a receiver interface to receive Rotary event . When a rotary event occur, IRotaryEventReceiver calls Rotate(RotaryEventArgs) method. You can control the Rotary event using this interface. If you read the following paragraphs, you can easily rotate image according to bezel rotation. WARNING: If device or emulator is not supported bezel action. IRotaryEventReceiver is not supported. Add IRotaryEventReceiver Add IRotaryEventReceiver interface to CirclePage or Page having CircleSurfaceEffectBehavior . Implement Rotate() method to control a rotary event. RotaryEventArgs is event argument for the Rotary Event. RotaryEventArgs.IsClockwise gets the direction of bezel rotation. IsClockwise is true , when the device is rotated in the clockwise direction. The following sample receives rotary event at Rotate() method and add angle of the image following to rotary event direction. And then rotate the image. Set the event receiver to a RotaryFocusObject. Apply the implementation of IRotaryEventReceiver to the RotaryFocusObject in CirclePage. IRotaryEventReceiver implements IRotaryFocusable, only IRotaryFocusable applied to a RotaryFocusObject can receive Bezel events. For more information, see IRotaryEventReceiver API reference . The code example of this guide uses TCIRotaryEventReceiver code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCIRotaryEventReceiver.xaml C# file [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCIRotaryEventReceiver : CirclePage, IRotaryEventReceiver { bool _rotating; double _angle; public TCIRotaryEventReceiver () { InitializeComponent (); _angle = 0; } public void Rotate(RotaryEventArgs args) { if (_rotating) return; _rotating = true; _angle += args.IsClockwise ? 30 : -30; Cat.RotateTo(_angle).ContinueWith( (b) => { _rotating = false; if (_angle == 360) { Cat.Rotation = 0; _angle = 0; } }); } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCIRotaryEventReceiver\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Name=\"MyCirclePage\" RotaryFocusObject=\"{x:Reference MyCirclePage}\"> <w:CirclePage.Content> <Image x:Name=\"Cat\" Source=\"image/cat360.png\" /> </w:CirclePage.Content> </w:CirclePage>"
  },
  "guide/InstallingCertificateExtension.html": {
    "href": "guide/InstallingCertificateExtension.html",
    "title": "Installing Certificate Extension",
    "keywords": "Installing Certificate Extension Samsung Certificate Extension provides functionalities to get and register certificates for Samsung commercial devices. It is an add-on SDK, which is installed using the Tizen Studio Package Manager. Click Tools > Tizen > Tizen Package Manager in the menu bar to launch the Package Manager. In the Extension SDK tab you can find the list of available extensions. The version of the extension is described in the lower window."
  },
  "guide/CircleListView.html": {
    "href": "guide/CircleListView.html",
    "title": "CircleListView",
    "keywords": "CircleListView CircleListView is a view for presenting lists of data, a short list that does not require scrolling, and a long list that requires scrolling. This view is an extension of Xamarin.Forms.ListView . You can move the list using Bezel Interactions and Drag . Normal list Group list 2 texts and 1 icon list Components Header : Text or view that is displayed at the beginning of a list. Cells : Data in a CircleListView is presented in cells. Each cell corresponds to a row of data. Footer : Text or view that is displayed at end of a list. Create CircleListView Basically CircleListView looks same as Xamarin.Forms.ListView . The difference from Xamarin.Forms.ListView is to provide an additional property for Tizen wearable such as BarColor CircleListView has the following property: BarColor: This property gets or sets a scroll bar color value. You can either set the Header and/or Footer with the simple text or with a more complex layout. Using HeaderTemplate and FooterTemplate properties, you can create more complex layouts for the header and footer including data binding. The following example has cells, header, footer. And use the DataTemplate to format a data object for display. WARNING: The CircleListView 's backend which is EFL extension , has a limitation not being focused and not being tapped on the top and bottom of the screen in Wearable Circle devices. If each item of a list has too small or too high a height, the first or last item of a list cannot be focused and tapped. To avoid this inherent problem, you should specify a proper height value (120 recommended) by the ViewCell or ListView Header or Footer. For more information, see the following links: CircleListView API reference Xamarin.Forms.ListView API reference Xamarin.Forms.ListView Guide The code example of this guide uses TCCircleListView code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleListView.xaml The following code shows how to use CircleListView: XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <ContentPage x:Class=\"WearableUIGallery.TC.TCCircleListView\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage.Content> <w:CircleListView x:Name=\"mylist\" RowHeight=\"360\" ItemTapped=\"OnItemTapped\"> <w:CircleListView.ItemsSource> <x:Array x:Key=\"array\" Type=\"{x:Type sys:String}\"> <x:String>Item 1</x:String> <x:String>Item 2</x:String> <x:String>Item 3</x:String> <x:String>Item 4</x:String> <x:String>Item 5</x:String> <x:String>Item 6</x:String> <x:String>Item 7</x:String> <x:String>Item 8</x:String> <x:String>Item 9</x:String> <x:String>Item 10</x:String> <x:String>Item 11</x:String> <x:String>Item 12</x:String> </x:Array> </w:CircleListView.ItemsSource> <w:CircleListView.Header> <x:String>Header</x:String> </w:CircleListView.Header> <w:CircleListView.Footer> <x:String>Footer</x:String> </w:CircleListView.Footer> <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <Label Text=\"{Binding .}\" VerticalOptions=\"Center\" HorizontalOptions=\"Center\" VerticalTextAlignment=\"Center\" HorizontalTextAlignment=\"Center\"/> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Red\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> <w:CircleListView.FooterTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Blue\" /> </DataTemplate> </w:CircleListView.FooterTemplate> </w:CircleListView> </ContentPage.Content> </ContentPage> Add Group List as list contents You can add group list as contents of CircleListView . To enable grouping: Create a list of List<>. Set ItemsSource to that list. Set IsGroupingEnabled to true. Set GroupDisplayBinding to bind to the property of the groups that is being used as the title of the group. The code example of this guide uses TCGroupList code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCGroupList.xaml C# file namespace WearableUIGallery.TC { ... public class GroupModel : List<NamedList<string>> { public GroupModel() { Add(new NamedList<string>(\"group1\") { \"Aaliyah\", \"Aamir\", \"Aaralyn \", \"Aaron\", \"Abagail\", \"Babitha\", \"Bahuratna\", \"Bandana\", \"Bulbul\", \"Cade\", \"Caldwell\" }); Add(new NamedList<string>(\"group2\") { \"Chandan\", \"Caster\", \"Dagan \", \"Daulat\", \"Dag\", \"Earl\", \"Ebenzer\", \"Ellison\", \"Elizabeth\", \"Filbert\", \"Fitzpatrick\", \"Florian\", \"Fulton\" }); Add(new NamedList<string>(\"group3\") { \"Frazer\", \"Gabriel\", \"Gage\", \"Galen\", \"Garland\", \"Gauhar\", \"Hadden\", \"Hafiz\", \"Hakon\", \"Haleem\", \"Hank\", \"Hanuman\" }); Add(new NamedList<string>(\"group4\") { \"Jabali \", \"Jaimini\", \"Jayadev\", \"Jake\", \"Jayatsena\", \"Jonathan\", \"Kamaal\", \"Jeirk\", \"Jasper\", \"Jack\", \"Mac\", \"Macy\", \"Marlon\", \"Milson\" }); } } public class NamedList<T> : List<T> { public NamedList(string name) => Name = name; public string Name { get; set; } }} XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <ContentPage x:Class=\"WearableUIGallery.TC.TCGroupList\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage.BindingContext> <local:GroupModel /> </ContentPage.BindingContext> <ContentPage.Content> <w:CircleListView x:Name=\"mylist\" GroupDisplayBinding=\"{Binding Name}\" IsGroupingEnabled=\"True\" ItemsSource=\"{Binding .}\"> <w:CircleListView.Header> <x:String>TITLE</x:String> </w:CircleListView.Header> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"10\" HeightRequest=\"120\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"#6CC3F1\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> </w:CircleListView> </ContentPage.Content> </ContentPage> Add a list with 2 texts and 1 icon as list contents You can add a list with two texts and one icon as contents of CircleListView . This can easily be done using ViewCell . It is nested inside a DataTemplate , which is inside CircleListView.ItemTemplate . The Layout of ViewCell is managed by a StackLayout . You can place it in the StackLayout with your desired configuration. The code example of this guide uses XUIComponent's CircleList of Style2text1icon1 code. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleList/ListViewModel.cs and Style2text1icon1.xaml C# file namespace WearableUIGallery.TC { public class ListViewModel : INotifyPropertyChanged { static List<string> _names = new List<string> { \"Aaliyah\", \"Aamir\", \"Aaralyn\", \"Aaron\", \"Abagail\", \"Babitha\", \"Bahuratna\", \"Bandana\", \"Bulbul\", \"Cade\", \"Caldwell\", \"Chandan\", \"Caster\", \"Dagan \", \"Daulat\", \"Dag\", \"Earl\", \"Ebenzer\", \"Ellison\", \"Elizabeth\", \"Filbert\", \"Fitzpatrick\", \"Florian\", \"Fulton\", \"Frazer\", \"Gabriel\", \"Gage\", \"Galen\", \"Garland\", \"Gauhar\", \"Hadden\", \"Hafiz\", \"Hakon\", \"Haleem\", \"Hank\", \"Hanuman\", \"Jabali \", \"Jaimini\", \"Jayadev\", \"Jake\", \"Jayatsena\", \"Jonathan\", \"Kamaal\", \"Jeirk\", \"Jasper\", \"Jack\", \"Mac\", \"Macy\", \"Marlon\", \"Milson\" }; ... public List<string> Names => _names; public ObservableCollection<CheckableName> CheckableNames { get; private set; } public int CheckedNamesCount { get => _checkedNamesCount; private set { if (_checkedNamesCount != value) { _checkedNamesCount = value; OnPropertyChanged(); UpdateSelectOptionMessage(); } } } public ListViewModel() { CheckableNames = new ObservableCollection<CheckableName>(); foreach (var name in _names) { var data = new CheckableName(name, false); data.PropertyChanged += (s, e) => { if (e.PropertyName == \"Checked\") { CheckedNamesCount += data.Checked ? 1 : -1; } }; CheckableNames.Add(data); } ... } } public class CheckableName : INotifyPropertyChanged { string _name; bool _checked; public CheckableName(string name, bool isChecked) { _name = name; _checked = isChecked; } public event PropertyChangedEventHandler PropertyChanged; public string Name { get => _name; set { if (_name != value) { _name = value; OnPropertyChanged(); } } } public bool Checked { get => _checked; set { if (_checked != value) { _checked = value; OnPropertyChanged(); } } } ... } XAML file <ContentPage x:Class=\"UIComponents.Samples.CircleList.Style2text1icon1\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleList\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage.BindingContext> <local:ListViewModel /> </ContentPage.BindingContext> <ContentPage.Content> <w:CircleListView x:Name=\"mylist\" HasUnevenRows=\"True\" ItemsSource=\"{Binding Names}\"> <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <StackLayout HeightRequest=\"120\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Horizontal\" VerticalOptions=\"FillAndExpand\" WidthRequest=\"360\"> <StackLayout HorizontalOptions=\"CenterAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label FontSize=\"8\" HorizontalOptions=\"Center\" HorizontalTextAlignment=\"Center\" Text=\"{Binding ., StringFormat='elm.text:{0}'}\" VerticalOptions=\"Center\" VerticalTextAlignment=\"Center\" /> <Label FontSize=\"5\" HorizontalOptions=\"Center\" HorizontalTextAlignment=\"Center\" Text=\"{Binding ., StringFormat='elm.text.1:{0}'}\" VerticalOptions=\"Center\" VerticalTextAlignment=\"Center\" /> </StackLayout> <w:Check DisplayStyle=\"Default\" HorizontalOptions=\"End\" VerticalOptions=\"Center\" /> </StackLayout> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate> </w:CircleListView> </ContentPage.Content> </ContentPage>"
  },
  "guide/GettingTheCertificates.html": {
    "href": "guide/GettingTheCertificates.html",
    "title": "Getting the Certificates",
    "keywords": "Getting the Certificates In order to install a Tizen application onto Samsung Tizen wearable devices, you must first register certificates containing the DUID (Device Unique Identifier) of the device. Two types of certificates are needed; the author and the distributor certificate. These certificates are used for signing and verifying the application. These certificates ensure that your signed application will run only on devices which you registered. The certification process is necessary not only for testing your apps on the actual devices but also for uploading your apps to Galaxy Apps. It guarantees that your application will not be distributed by someone else even if your application package is leaked. This document describes how to generate certificates from Samsung and how to maintain them also packaging the application. Contents: Installing Certificates Extension Creating Certificates Permit Device To Install Applications Managing Certificate Profile Certificates Tizen certificate follows the exact specifications of XML Digital signature for widgets from W3C. Samsung issues certificates for Samsung Tizen devices based on the Tizen certificate. The author certificate identifies the author, ensures future updates to the application and is used for secure IPC. The same key must be used in all versions of your application so it should be kept in a safe and secure place. The distributor certificate identifies distributor, i.e. Galaxy Apps, Tizen Store, and grants privilege. However the issued distributor certificate is not from the real distributor but just allows the installation to the registered device. After the application is uploaded to the Stores, it is replaced by the official distributor certificate. Secure Your Certificates Keep your author certificate(author.p12) file in a safe and secure place. Ensure that you have secure backups. When you upload your applications at the Store without the original author certificate (which signs your app), you will not be able to publish any updates on to your applications. The same key must be used in all versions of your applications."
  },
  "guide/Quickstart.html": {
    "href": "guide/Quickstart.html",
    "title": "Quickstart",
    "keywords": "Quickstart This guide explains how to create an application that represents Toast and CircleSlider . If you press the button, Toast pops up and it automatically disappears after timeout (in seconds). If you rotate the bezel of Tizen wearable device, CircleSlider bar is moves forward or backward direction. This document requires Visual Studio and the Visual Studio tools for Tizen . If you have not installed it, please install it first. 1. Set up development environment and create project Create a Tizen Xamarin Forms application. For more information, see Tizen.org guide . In this guide, project name is SampleCircleApp Tizen Wearable App Template 1) Create project Select 'Tizen Wearable App' template on 'New project'. You can use APIs of Xamarin.Forms and Tizen.Wearable.CircularUI now. Remark : If you want to choose 'Tizen XAML App template', for more information, see Guide of Tizen XAML App template . 2) Insert CircularUI control code In App.cs file, add the following code. This code defines the user interface for the page: CirclePage is derive from Xamarin.Forms.Page . This Page content area has Label and Button . For more information, see CirclePage guide . circlePage.CircleSurfaceItems.Add() : CircleSliderSurfaceItem is attached for CircleSurfaceItem of CirclePage . RotaryFocusObject is set circleSlider . CircleSliderSurfaceItem has rotary focus. It can receive a Rotary Event from the wearable device's bezel interaction. OnButtonClicked is an event handler of Button Clicked event. The following code simply displays Toast popup during three seconds: App.cs file using System; using Xamarin.Forms; using Tizen.Wearable.CircularUI.Forms; namespace SampleCircleApp { public class App : Application { public App() { Button btn = new Button { Text = \"show toast\" }; btn.Clicked += OnButtonClicked; CircleSliderSurfaceItem circleSlider = new CircleSliderSurfaceItem() { Increment = 0.5, IsVisible = true, Maximum = 15, Minimum = 0, Value = 3, }; // The root page of your application CirclePage circlePage = new CirclePage() { Content = new StackLayout { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, Orientation = StackOrientation.Vertical, Children = { new Label { HorizontalTextAlignment = TextAlignment.Center, Text = \"Welcome to Xamarin Forms!\" }, btn } }, }; circlePage.CircleSurfaceItems.Add(circleSlider); circlePage.RotaryFocusObject = circleSlider; MainPage = circlePage; } private void OnButtonClicked(object sender, EventArgs e) { Toast.DisplayText(\"Toast popup\", 3000); } ... } } 2. Build and launch your application. Build the solution In the Visual Studio menu, select Build > Build Solution. In the Solution Explorer view, right-click the solution name and select Build. Launch Tizen Emulator Click Launch Tizen Emulator button, as displayed in the following image: For Windows OS, copy the application tpk file from the project binary path to sdb tool path. SampleCircleApp tpk: The file is located in ProjectPath\\SampleCircleApp\\SampleCircleApp\\bin\\Debug\\tizen40\\org.tizen.example.SampleCircleApp-1.0.0.tpk . Project path: To locate the project path, in the Solution Explorer view, right-click the solution name and click open folder in file explorer . sdb tool: This is located in c:\\tizen\\tools\\sdb.exe For Windows OS, launch Tizen Sdb Command Prompt (Tool > Tizen > Tizen Sdb Command Prompt). For Linux, you can use sdb command directly in your project path. Install your app with sdb command sdb install org.tizen.example.SampleCircleApp-1.0.0.tpk Launch wearable emulator to verify the application"
  },
  "guide/HowToSetTheCustomFont.html": {
    "href": "guide/HowToSetTheCustomFont.html",
    "title": "How to set the custom font",
    "keywords": "How to set the custom font You can add the font path via Elmsharp.Utility.AppendGlobalFontPath . The parameter path must be a directory in which the fonts to be added are present. If you use only ElmSharp, you should make get the following code. using ElmSharp; using Tizen.Applications; namespace ElmSharpNewFont { class Program : CoreUIApplication { protected override void OnCreate() { var window = new Window(\"NewFontWindow\"); Utility.AppendGlobalFontPath(Application.Current.DirectoryInfo.Resource); var layout = new Box(window) { WeightX = NamedHint.Expand, WeightY = NamedHint.Expand, BackgroundColor = Color.Black }; window.AddResizeObject(layout); layout.Show(); var label = new Label(layout) { AlignmentX = 0.5, AlignmentY = 0.5, WeightX = NamedHint.Expand, WeightY = NamedHint.Expand, Text = \"안녕하세요.\", TextStyle = \"DEFAULT='font=YiSunShinBold font_size=39'\", }; label.Show(); layout.PackEnd(label); } static void Main(string[] args) { var app = new Program(); app.Run(args); } } } Application.Current.DirectoryInfo.Resource is application's resource directory in which the YiSunShin-Bold.ttf font is located In the Label.TextStyle , font= part should be font name not font family . YiSunShinBold is the font name and font family is YiSunShin Bold , but you can see that it is written as font name . Note The font name is actually postscript name in your TTF or OTF file. In some cases, a custom font can't be set with postscript name . If your custom font is not applied with postscript name , please try to set font family name Tip You can find postscript name and font family name from the font file with fc-query in the font config installed shell. fc-query -f \"%{postscriptname}\\n\" Font.ttf fc-query -f \"%{family}\\n\" Font.ttf Of course, it can also be used with Xamarin.Forms. using ElmSharp; using Tizen.Applications; namespace XamarinFormsNewFont { class Program : global::Xamarin.Forms.Platform.Tizen.FormsApplication { protected override void OnCreate() { base.OnCreate(); Utility.AppendGlobalFontPath(Application.Current.DirectoryInfo.Resource); LoadApplication(new App()); } static void Main(string[] args) { var app = new Program(); global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.Init(); app.Run(args); } } } using Xamarin.Forms; namespace XamarinFormsNewFont { public class App : Application { public App() { MainPage = new ContentPage { Content = new StackLayout { VerticalOptions = LayoutOptions.Center, Children = { new Label { HorizontalTextAlignment = TextAlignment.Center, FontFamily = \"YiSunShinBold\", Text = \"Welcome to Xamarin Forms!\" } } } }; } } } Similarly, you can call Utility.AppendGlobalFontPath before the Label is used. Tip You can find YiSunShin font from here"
  },
  "guide/ContextPopupEffectBehavior.html": {
    "href": "guide/ContextPopupEffectBehavior.html",
    "title": "ContextPopupEffectBehavior",
    "keywords": "ContextPopupEffectBehavior ContextPopupEffectBehavior is a Behavior for Xamarin.Forms that is used to create the View with one or two buttons. A popup with only one button will have an Accept button only. The default text for Accept button is OK. When Visibility is set to True , the popup appears on the screen. The popup displayed with the Accept or Cancel button is executed automatically. Accept command is executed when click Accept button. After the command is executed, popup disappears and Visibility is set to False . If you touch outside of the popup, the popup is removed. It is same to execute Cancel command. You can adjust the X and Y value to change the position of popup. Add popup with ContextPopupEffectBehavior in CirclePage You can set popup with the ContextPopupEffectBehavior in any View . For more information on how to add CirclePage , see CirclePage guide . ContextPopupEffectBehavior has the following properties: AcceptCommand : System.Windows.Input.ICommand . This command is executed when Accept. CancelCommand : System.Windows.Input.ICommand . This command is executed when Cancel. It is also executed when the popup disappears on touching an area outside the popup. Visibility : This property when set to True , the popup appears and when set to False , the popup disappears. The CancelCommand works even when the popup disappears and the Visibility is set to False . PositionOption : The popup has the following position type BottomOfView : The popup appears at the bottom of the view with ContextPopupEffectBehavior . The position is changed by offset in the center of view. CenterOfParent : In the center of the screen, you can move the values of offset to adjust position of popup. Absolute : The value of offset is X, Y and popup is placed on the screen. Relative : Set the width of the screen to Offset.X * Window.Width and height of the screen to Offset.Y * Window.Height. In the example, you can see a Check with the ContextPopupEffectBehavior in the AbsoluteLayout set into the CirclePage . The text for the AcceptText and the CancelText are set. Also, the commands for AcceptCommand and CancelCommand are set. When selected, Yes will change the background color to green and No will change the background color to red. The PositionOption is set as CenterOfParent . The value of Visibility is set to IsToggled . BottomOfView CenterOfParent Absolute/Relative For more information, see the following links: ContextPopupEffectBehavior API reference Xamarin.Forms.Behaviors Guide Consuming a Xamarin.Forms Behavior To create a context popup in CirclePage, use the following code: C# file [XamlCompilation(XamlCompilationOptions.Compile) public partial class TCConfirm : CirclePage { public TCConfirm () { AcceptedCommand = new Command(() => BackgroundColor = Color.Green); CancelCommand = new Command(() => BackgroundColor = Color.Red); InitializeComponent (); CtxCheck.PropertyChanged += (s, e) => { if (e.PropertyName == Check.IsToggledProperty.PropertyName) System.Diagnostics.Debug.WriteLine($\"IsToggled = {CtxCheck.IsToggled}\"); }; } public ICommand AcceptedCommand { get; private set; } public ICommand CancelCommand { get; private set; } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCConfirm\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Name=\"mypage\"> <ContentPage.Content> <AbsoluteLayout> <w:Check x:Name=\"CtxCheck\" AbsoluteLayout.LayoutBounds=\"0.5, 0.2, 1, 0.25\" AbsoluteLayout.LayoutFlags=\"All\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" VerticalOptions=\"CenterAndExpand\"> <w:Check.Behaviors> <w:ContextPopupEffectBehavior AcceptCommand=\"{Binding AcceptedCommand, Source={x:Reference mypage}}\" AcceptText=\"Yes\" CancelCommand=\"{Binding CancelCommand, Source={x:Reference mypage}}\" CancelText=\"No\" Visibility=\"{Binding IsToggled, Source={x:Reference CtxCheck}, Mode=TwoWay}\" PositionOption=\"BottomOfView\"/> </w:Check.Behaviors> </w:Check> </AbsoluteLayout> </ContentPage.Content> </w:CirclePage> Screenshot 1st scene with Check 2nd scene with context popup 3rd scene when selects 'Yes'"
  },
  "guide/CircleImage.html": {
    "href": "guide/CircleImage.html",
    "title": "CircleImage",
    "keywords": "CircleImage CircleImage is view that hold an image with circle shape. CircleImage derives from Xamarin.Forms.Image . Page ListView Item Create CircleImage You can easily add CircleImage control with C# or XAML file. Following example show the way how to use CircleImage control. C# file var circleImage = new CircleImage { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, Source = \"image.jpg\" }; StackLayout layout = new StackLayout { BackgroundColor = Color.Transparent, Children = { circleImage } }; XAML file Refer to TCCircleImage code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleImage.xaml <ContentPage x:Class=\"WearableUIGallery.TC.TCCircleImage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage.Content> <StackLayout HorizontalOptions=\"Center\" VerticalOptions=\"Center\"> <w:CircleImage Source=\"image/100_1.jpg\" Aspect=\"AspectFill\" WidthRequest=\"200\" HeightRequest=\"200\" BackgroundColor=\"Black\"/> </StackLayout> </ContentPage.Content> </ContentPage> Inserting CircleImage in ListView Item Following example show the way how to insert CircleImage control in CircleListView Item. Refer to TCCircleImageListView code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleImageListView.xaml <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <StackLayout Orientation=\"Horizontal\" HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"Center\" Padding=\"30,10,30,10\"> <w:CircleImage Source=\"{Binding .}\" Aspect=\"AspectFill\" VerticalOptions=\"Center\" HorizontalOptions=\"StartAndExpand\" WidthRequest=\"80\" HeightRequest=\"80\"/> <Label Text=\"{Binding .}\" VerticalOptions=\"Center\" HorizontalOptions=\"CenterAndExpand\" VerticalTextAlignment=\"Center\" HorizontalTextAlignment=\"Center\" HeightRequest=\"50\"/> </StackLayout> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html",
    "title": "Class IndexPageRenderer",
    "keywords": "Class IndexPageRenderer Inheritance System.Object IndexPageRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class IndexPageRenderer : VisualElementRenderer<IndexPage> Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<IndexPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<IndexPage> e) Parameters Type Name Description ElementChangedEventArgs < IndexPage > e OnElementReady() Declaration protected override void OnElementReady()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ScrollViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ScrollViewRenderer.html",
    "title": "Class ScrollViewRenderer",
    "keywords": "Class ScrollViewRenderer Inheritance System.Object ScrollViewRenderer CircleScrollViewRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class ScrollViewRenderer : Xamarin.Forms.Platform.Tizen.ScrollViewRenderer Methods UpdateRotaryInteraction(Boolean) Declaration protected override void UpdateRotaryInteraction(bool enable) Parameters Type Name Description System.Boolean enable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html",
    "title": "Class FormsCircularUI",
    "keywords": "Class FormsCircularUI Inheritance System.Object FormsCircularUI Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class FormsCircularUI : object Fields Tag Declaration public static readonly string Tag Field Value Type Description System.String Properties IsInitialized Declaration public static bool IsInitialized { get; } Property Value Type Description System.Boolean Methods Init() Declaration public static void Init() Init(CoreApplication) Declaration public static void Init(CoreApplication context) Parameters Type Name Description CoreApplication context Init(String) Declaration public static void Init(string apiKey) Parameters Type Name Description System.String apiKey Init(InitOptions) Declaration public static void Init(InitOptions options) Parameters Type Name Description InitOptions options"
  },
  "api/UIComponents.Tizen.Wearable.Renderers.html": {
    "href": "api/UIComponents.Tizen.Wearable.Renderers.html",
    "title": "Namespace UIComponents.Tizen.Wearable.Renderers",
    "keywords": "Namespace UIComponents.Tizen.Wearable.Renderers Classes CircleImageRenderer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html",
    "title": "Class RadioRenderer",
    "keywords": "Class RadioRenderer Inheritance System.Object RadioRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class RadioRenderer : ViewRenderer<Radio, ElmSharp.Radio> Constructors RadioRenderer() Declaration public RadioRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Radio>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Radio> e) Parameters Type Name Description ElementChangedEventArgs < Radio > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPopupImplementation.html",
    "title": "Class TwoButtonPopupImplementation",
    "keywords": "Class TwoButtonPopupImplementation Inheritance System.Object TwoButtonPopupImplementation Implements ITwoButtonPopup IDisposable Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPopupImplementation : object, ITwoButtonPopup, IDisposable Constructors TwoButtonPopupImplementation() Declaration public TwoButtonPopupImplementation() Properties Content Declaration public View Content { get; set; } Property Value Type Description View FirstButton Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler Implements ITwoButtonPopup IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Widget.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Widget.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Widget",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Widget Classes FormsWidgetApplication FormsWidgetBase"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryService.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryService.html",
    "title": "Interface IRotaryService",
    "keywords": "Interface IRotaryService Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryService Events Rotated Declaration event EventHandler<RotaryEventArgs> Rotated Event Type Type Description System.EventHandler < RotaryEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html",
    "title": "Class TwoButtonPage",
    "keywords": "Class TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. Inheritance System.Object TwoButtonPage Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class TwoButtonPage : ContentPage Fields FirstButtonProperty BindableProperty. Identifies the FirstButton bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description BindableProperty OverlapProperty BindableProperty. Identifies the Overlap bindable property. Declaration public static readonly BindableProperty OverlapProperty Field Value Type Description BindableProperty SecondButtonProperty BindableProperty. Identifies the SecondButton bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description BindableProperty Properties FirstButton Gets or sets left button of TwoButtonPage. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem Overlap Gets or sets the overlap or not overlap the buttons and page display. Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean SecondButton Gets or sets right button of TwoButtonPage. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPopup.html",
    "title": "Class TwoButtonPopup",
    "keywords": "Class TwoButtonPopup The TwoButtonPopup describe pop-up which has circular two button, title, text, and content area. Inheritance System.Object TwoButtonPopup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class TwoButtonPopup : BindableObject Examples var leftButton = new MenuItem() { Text = \"Save\", Icon = new FileImageSource{ File = \"icon_save.png\", }, Command = new Command(() => { ... }) }; var rightButton = new MenuItem() { Text = \"Delete\", Icon = new FileImageSource{ File = \"icon_delete.png\", }, Command = new Command(() => { ... }) }; var popup = new TwoButtonPopup(); popup.FirstButton = leftButton; popup.SecondButton = rightButton; popup.Title = \"Popup title\"; popup.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved\", }, } }; popup.BackButtonPressed += (s, e) => { popup.Dismiss(); }; Constructors TwoButtonPopup() Creates and initializes a new instance of the TwoButtonPopup class. Declaration public TwoButtonPopup() Fields ContentProperty BindableProperty. Identifies the content bindable property. Declaration public static readonly BindableProperty ContentProperty Field Value Type Description BindableProperty FirstButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description BindableProperty SecondButtonProperty BindableProperty. Identifies the second button bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description BindableProperty Properties Content Gets or sets content view of the Popup. Declaration public View Content { get; set; } Property Value Type Description View FirstButton Gets or sets left button of the Popup. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Gets or sets right button of the Popup. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the TwoButtonPopup. Declaration public void Dismiss() Show() Shows the TwoButtonPopup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.DatePickerRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.DatePickerRenderer.html",
    "title": "Class DatePickerRenderer",
    "keywords": "Class DatePickerRenderer Inheritance System.Object DatePickerRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class DatePickerRenderer : Xamarin.Forms.Platform.Tizen.DatePickerRenderer Methods OnPickerClosed(Object, EventArgs) Declaration protected override void OnPickerClosed(object sender, EventArgs args) Parameters Type Name Description System.Object sender EventArgs args OnPickerOpened(Object, EventArgs) Declaration protected override void OnPickerOpened(object sender, EventArgs args) Parameters Type Name Description System.Object sender EventArgs args"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Check.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Check.html",
    "title": "Class Check",
    "keywords": "Class Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. Inheritance System.Object Check Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [Obsolete(\"Check is obsolete as of version 1.5.0. Please use Xamarin.Forms.Switch instead.\")] public class Check : Switch Examples var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } Fields ColorProperty BindableProperty. Identifies the Color bindable property. Declaration public static readonly BindableProperty ColorProperty Field Value Type Description BindableProperty DisplayStyleProperty BindableProperty. Identifies the DisplayStyle bindable property. Declaration public static readonly BindableProperty DisplayStyleProperty Field Value Type Description BindableProperty Properties Color Gets or sets a color value of Check. Declaration public Color Color { get; set; } Property Value Type Description Color DisplayStyle Gets or sets display style of Check. Declaration public CheckDisplayStyle DisplayStyle { get; set; } Property Value Type Description CheckDisplayStyle"
  },
  "api/Tizen.Wearable.CircularUI.Forms.MediaPlayer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.MediaPlayer.html",
    "title": "Class MediaPlayer",
    "keywords": "Class MediaPlayer MediaPlayer provieds the essential components to play the media contents. Inheritance System.Object MediaPlayer Implements IMediaPlayer System.IDisposable Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class MediaPlayer : Element, IMediaPlayer, IDisposable Constructors MediaPlayer() Initializes a new instance of the MediaPlayer class. Declaration public MediaPlayer() Fields AspectModeProperty Identifies the AspectMode bindable property. Declaration public static readonly BindableProperty AspectModeProperty Field Value Type Description BindableProperty AutoPlayProperty Identifies the AutoPlay bindable property. Declaration public static readonly BindableProperty AutoPlayProperty Field Value Type Description BindableProperty AutoStopProperty Identifies the AutoStop bindable property. Declaration public static readonly BindableProperty AutoStopProperty Field Value Type Description BindableProperty BufferingProgressProperty Identifies the BufferingProgress bindable property. Declaration public static readonly BindableProperty BufferingProgressProperty Field Value Type Description BindableProperty DurationProperty Identifies the Duration bindable property. Declaration public static readonly BindableProperty DurationProperty Field Value Type Description BindableProperty IsBufferingProperty Identifies the IsBuffering bindable property. Declaration public static readonly BindableProperty IsBufferingProperty Field Value Type Description BindableProperty IsMutedProperty Identifies the IsMuted bindable property. Declaration public static readonly BindableProperty IsMutedProperty Field Value Type Description BindableProperty PositionProperty Identifies the Position bindable property. Declaration public static readonly BindableProperty PositionProperty Field Value Type Description BindableProperty PositionUpdateIntervalProperty Identifies the PositionUpdateInterval bindable property. Declaration public static readonly BindableProperty PositionUpdateIntervalProperty Field Value Type Description BindableProperty SourceProperty Identifies the Source bindable property. Declaration public static readonly BindableProperty SourceProperty Field Value Type Description BindableProperty StateProperty Identifies the State bindable property. Declaration public static readonly BindableProperty StateProperty Field Value Type Description BindableProperty UsesEmbeddingControlsProperty Identifies the UsesEmbeddingControls bindable property. Declaration public static readonly BindableProperty UsesEmbeddingControlsProperty Field Value Type Description BindableProperty VideoOutputProperty Identifies the VideoOutput bindable property. Declaration public static readonly BindableProperty VideoOutputProperty Field Value Type Description BindableProperty VolumeProperty Identifies the Volume bindable property. Declaration public static readonly BindableProperty VolumeProperty Field Value Type Description BindableProperty Properties AspectMode Gets or sets the scaling mode for the media content. Declaration public DisplayAspectMode AspectMode { get; set; } Property Value Type Description DisplayAspectMode AutoPlay Gets or sets a value whether the media content plays automatically. Declaration public bool AutoPlay { get; set; } Property Value Type Description System.Boolean AutoStop Gets or sets a value whether the media content stops automatically. Declaration public bool AutoStop { get; set; } Property Value Type Description System.Boolean BufferingProgress Gets the value indicating the buffering percentage. Declaration public double BufferingProgress { get; } Property Value Type Description System.Double Duration Gets the duration of a media content. Declaration public int Duration { get; } Property Value Type Description System.Int32 IsBuffering Gets a value indicating the buffering status. Declaration public bool IsBuffering { get; } Property Value Type Description System.Boolean IsMuted Gets or sets the value whether the volume is muted. Declaration public bool IsMuted { get; set; } Property Value Type Description System.Boolean Position Gets the value of the current position of the media content. Declaration public int Position { get; } Property Value Type Description System.Int32 PositionUpdateInterval Gets or sets the desired interval time for updating position. Declaration public int PositionUpdateInterval { get; set; } Property Value Type Description System.Int32 Source Gets or sets the source of the media content. Declaration public MediaSource Source { get; set; } Property Value Type Description MediaSource State Gets the current playback state. Declaration public PlaybackState State { get; } Property Value Type Description PlaybackState UsesEmbeddingControls Gets or sets whether to use the embedding controls. Declaration public bool UsesEmbeddingControls { get; set; } Property Value Type Description System.Boolean VideoOutput Gets or sets the video output. Declaration public IVideoOutput VideoOutput { get; set; } Property Value Type Description IVideoOutput Volume Gets or sets the current volume of a media content. Declaration public double Volume { get; set; } Property Value Type Description System.Double Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() GetAlbumArts() Retrieves the album art of the stream, or null if there is no album art data. Declaration public Task<Stream> GetAlbumArts() Returns Type Description System.Threading.Tasks.Task < System.IO.Stream > Returns a Task that gets the album art of the stream GetMetadata() Gets the metadata of the media content. Declaration public Task<IDictionary<string, string>> GetMetadata() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IDictionary < System.String , System.String >> Returns a Task that has the metadata of the media content. Pause() Pauses the player. Declaration public void Pause() Seek(Int32) Attemps to seek the playback position. Declaration public Task<int> Seek(int ms) Parameters Type Name Description System.Int32 ms The milliseconds to seek Returns Type Description System.Threading.Tasks.Task < System.Int32 > Returns a Task that seeks the play position. Start() Starts or resumes playback. Declaration public Task<bool> Start() Returns Type Description System.Threading.Tasks.Task < System.Boolean > Returns a Task that prepares the player and play the media content. Stop() Stops playing the media content. Declaration public void Stop() Events BufferingCompleted Occurs when the buffering for the media content is completed. Declaration public event EventHandler BufferingCompleted Event Type Type Description System.EventHandler BufferingStarted Occurs when the buffering for the media content is started. Declaration public event EventHandler BufferingStarted Event Type Type Description System.EventHandler PlaybackCompleted Occurs when the playback is completed. Declaration public event EventHandler PlaybackCompleted Event Type Type Description System.EventHandler PlaybackPaused Occurs when the playback is paused. Declaration public event EventHandler PlaybackPaused Event Type Type Description System.EventHandler PlaybackStarted Occurs when the playback is started. Declaration public event EventHandler PlaybackStarted Event Type Type Description System.EventHandler PlaybackStopped Occurs when the playback is stopped. Declaration public event EventHandler PlaybackStopped Event Type Type Description System.EventHandler Implements IMediaPlayer System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IBezelInteractionRouter.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IBezelInteractionRouter.html",
    "title": "Interface IBezelInteractionRouter",
    "keywords": "Interface IBezelInteractionRouter An interface to take rotary events. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IBezelInteractionRouter Properties Appeared Declaration bool Appeared { get; } Property Value Type Description System.Boolean RotaryFocusObject Declaration IRotaryFocusable RotaryFocusObject { get; } Property Value Type Description IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html",
    "title": "Class CircleStepperRenderer",
    "keywords": "Class CircleStepperRenderer Inheritance System.Object StepperRenderer CircleStepperRenderer Inherited Members StepperRenderer.UpdateRotaryInteraction(Boolean) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleStepperRenderer : StepperRenderer Constructors CircleStepperRenderer() Declaration public CircleStepperRenderer() Properties Control Declaration protected WatchSpinner Control { get; } Property Value Type Description WatchSpinner Element Declaration protected CircleStepper Element { get; } Property Value Type Description CircleStepper Methods CreateNativeControl() Declaration protected override ElmSharp.Spinner CreateNativeControl() Returns Type Description ElmSharp.Spinner Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Measure(Int32, Int32) Declaration protected override ElmSharp.Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description ElmSharp.Size MinimumSize() Declaration protected override Size MinimumSize() Returns Type Description Size OnElementChanged(ElementChangedEventArgs<Stepper>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Stepper> e) Parameters Type Name Description ElementChangedEventArgs < Stepper > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html",
    "title": "Class TizenCircleSurfaceEffect",
    "keywords": "Class TizenCircleSurfaceEffect Inheritance System.Object TizenCircleSurfaceEffect Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenCircleSurfaceEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() OnDetached() Declaration protected override void OnDetached()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer Classes BezelInteractionExtension BezelInteractionPageRenderer CarouselViewRenderer Check2TextCellRenderer CheckCellRenderer CheckRenderer CircleDateTimeSelectorRenderer CircleListViewRenderer CirclePageRenderer CircleScrollViewRenderer CircleSliderSurfaceItemImplements CircleStepperRenderer CircleSurfaceNotFoundException CircleSurfaceViewRenderer CircularShellRenderer ContentButtonRenderer DatePickerRenderer FlatViewCellRenderer FormsCircularUI GoogleMapViewRenderer IndexPageRenderer InformationPopupImplementation InitOptions ListViewRenderer PageRenderer PopupEntryRenderer Radio2TextCellRenderer RadioCellRenderer RadioRenderer RotaryService ScrollViewRenderer SelectModeImageCellRenderer SelectModeTextCellRenderer SingleTextCellRenderer StepperRenderer StructuredItemsViewRenderer Switch2TextCellRenderer TimePickerRenderer TizenCircleSurfaceEffect TizenConfirmPopupEffect TwoButtonPageRenderer TwoButtonPageWidget TwoButtonPopupImplementation WatchListView Interfaces IBezelInteractionController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html",
    "title": "Class FormsWatchface",
    "keywords": "Class FormsWatchface Inheritance System.Object FormsWatchface Namespace : Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class FormsWatchface : WatchApplication Constructors FormsWatchface() Declaration public FormsWatchface() Methods LoadWatchface(Xamarin.Forms.Application) Declaration public void LoadWatchface(Xamarin.Forms.Application application) Parameters Type Name Description Xamarin.Forms.Application application OnAppControlReceived(AppControlReceivedEventArgs) Declaration protected override void OnAppControlReceived(AppControlReceivedEventArgs e) Parameters Type Name Description AppControlReceivedEventArgs e OnCreate() Declaration protected override void OnCreate() OnPause() Declaration protected override void OnPause() OnResume() Declaration protected override void OnResume() OnRootViewUpdated(EvasObject) Declaration protected virtual void OnRootViewUpdated(EvasObject rootView) Parameters Type Name Description EvasObject rootView OnTerminate() Declaration protected override void OnTerminate() Run() Declaration public void Run()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CheckCell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CheckCell.html",
    "title": "Class CheckCell",
    "keywords": "Class CheckCell A Cell with a label and a Check. Inheritance System.Object CheckCell Check2TextCell Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CheckCell : Cell Fields OnColorProperty The backing store for the OnColor field. Declaration public static readonly BindableProperty OnColorProperty Field Value Type Description BindableProperty OnProperty Identifies the On bindable property. Declaration public static readonly BindableProperty OnProperty Field Value Type Description BindableProperty TextProperty Identifies the Text bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty Properties On Gets or sets the state of the checkbox. This is a bindable property. Declaration public bool On { get; set; } Property Value Type Description System.Boolean OnColor Gets or sets the color of On state of the checkbox. This is a bindable property. Declaration public Color OnColor { get; set; } Property Value Type Description Color Text Gets or sets the text displayed next to the checkbox. This is a bindable property. Declaration public string Text { get; set; } Property Value Type Description System.String Events OnChanged Triggered when the checkbox has changed value. Declaration public event EventHandler<CheckedChangedEventArgs> OnChanged Event Type Type Description System.EventHandler < CheckedChangedEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html",
    "title": "Class TwoButtonPageRenderer",
    "keywords": "Class TwoButtonPageRenderer Inheritance System.Object TwoButtonPageRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageRenderer : VisualElementRenderer<TwoButtonPage> Constructors TwoButtonPageRenderer() Declaration public TwoButtonPageRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetNativeContentGeometry() Declaration public override Rect GetNativeContentGeometry() Returns Type Description Rect OnElementChanged(ElementChangedEventArgs<TwoButtonPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<TwoButtonPage> e) Parameters Type Name Description ElementChangedEventArgs < TwoButtonPage > e UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize UpdateLayout() Declaration protected override void UpdateLayout()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.GoogleMapViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.GoogleMapViewRenderer.html",
    "title": "Class GoogleMapViewRenderer",
    "keywords": "Class GoogleMapViewRenderer Inheritance System.Object GoogleMapViewRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class GoogleMapViewRenderer : ViewRenderer<GoogleMapView, WebViewContainer> Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<GoogleMapView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<GoogleMapView> e) Parameters Type Name Description ElementChangedEventArgs < GoogleMapView > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html",
    "title": "Class CircleScrollView",
    "keywords": "Class CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. Inheritance System.Object CircleScrollView Implements IRotaryFocusable ICircleSurfaceConsumer Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleScrollView : ScrollView, IRotaryFocusable, ICircleSurfaceConsumer Fields BarColorProperty BindableProperty. Identifies the Header, Footer cancel the Fish Eye Effect or not. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description BindableProperty Properties BarColor Gets or sets a scroll bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Color CircleSurfaceProvider Gets or sets a CircleSurfaceProvider. Declaration public ICircleSurfaceProvider CircleSurfaceProvider { get; set; } Property Value Type Description ICircleSurfaceProvider Implements IRotaryFocusable ICircleSurfaceConsumer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. Inheritance System.Object CircleListView Implements IRotaryFocusable ICircleSurfaceConsumer Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleListView : ListView, IRotaryFocusable, ICircleSurfaceConsumer Fields BarColorProperty BindableProperty. Identifies color of the scroll bar. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description BindableProperty CancelEffectProperty BindableProperty. Identifies the Header, Footer cancel the Fish Eye Effect or not. Declaration public static readonly BindableProperty CancelEffectProperty Field Value Type Description BindableProperty Properties BarColor Gets or sets a scroll bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Color CircleSurfaceProvider Gets or sets a CircleSurfaceProvider. Declaration public ICircleSurfaceProvider CircleSurfaceProvider { get; set; } Property Value Type Description ICircleSurfaceProvider Methods GetCancelEffect(BindableObject) Gets the Header, Footer cancel the Fish Eye Effect or not. Declaration public static bool GetCancelEffect(BindableObject view) Parameters Type Name Description BindableObject view Returns Type Description System.Boolean SetCancelEffect(BindableObject, Boolean) Sets the Header, Footer cancel the Fish Eye Effect or not. Declaration public static void SetCancelEffect(BindableObject view, bool value) Parameters Type Name Description BindableObject view System.Boolean value Events ItemLongPressed Event that is raised when a new item is long pressed. Declaration public event EventHandler<ItemLongPressedEventArgs> ItemLongPressed Event Type Type Description System.EventHandler < ItemLongPressedEventArgs > Implements IRotaryFocusable ICircleSurfaceConsumer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.LayoutCanvas.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.LayoutCanvas.html",
    "title": "Class LayoutCanvas",
    "keywords": "Class LayoutCanvas Inheritance System.Object LayoutCanvas Implements IContainable < EvasObject > Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class LayoutCanvas : ElmSharp.Layout, IContainable<EvasObject> Constructors LayoutCanvas(EvasObject) Initializes a new instance of the class. Declaration public LayoutCanvas(EvasObject parent) Parameters Type Name Description EvasObject parent Parent of this instance. Remarks Canvas doesn't support replacing its children, this will be ignored. Properties Children Gets list of native elements that are placed in the canvas. Declaration public IList<EvasObject> Children { get; } Property Value Type Description IList < EvasObject > Methods OnUnrealize() Provides destruction for native element and contained elements. Declaration protected override void OnUnrealize() Events LayoutUpdated Declaration public event EventHandler<LayoutEventArgs> LayoutUpdated Event Type Type Description EventHandler < LayoutEventArgs > Implements IContainable<>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html",
    "title": "Enum DateTimeType",
    "keywords": "Enum DateTimeType Enumeration for style type of CircleDateTimeSelector Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum DateTimeType Fields Name Description Date Style type of \"datepicker/circle\" Time Style type of \"timepicker/circle\""
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html",
    "title": "Class CircleProgressBarSurfaceItem",
    "keywords": "Class CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. Inheritance System.Object CircleSurfaceItem CircleProgressBarSurfaceItem Implements ICircleSurfaceItem Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleProgressBarSurfaceItem : CircleSurfaceItem, ICircleSurfaceItem Fields ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties Value Gets or sets the value of the progressbar. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements ICircleSurfaceItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleScrollViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleScrollViewRenderer.html",
    "title": "Class CircleScrollViewRenderer",
    "keywords": "Class CircleScrollViewRenderer Inheritance System.Object ScrollViewRenderer CircleScrollViewRenderer Inherited Members ScrollViewRenderer.UpdateRotaryInteraction(Boolean) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleScrollViewRenderer : ScrollViewRenderer Constructors CircleScrollViewRenderer() Declaration public CircleScrollViewRenderer() Properties CircleElement Declaration public CircleScrollView CircleElement { get; } Property Value Type Description CircleScrollView Methods CreateNativeControl() Declaration protected override Xamarin.Forms.Platform.Tizen.Native.Scroller CreateNativeControl() Returns Type Description Xamarin.Forms.Platform.Tizen.Native.Scroller"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RadioCell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RadioCell.html",
    "title": "Class RadioCell",
    "keywords": "Class RadioCell A Cell with a label and a RadioButton. Inheritance System.Object RadioCell Radio2TextCell Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class RadioCell : Cell Constructors RadioCell() Declaration public RadioCell() Fields GroupNameProperty Identifies the GroupName bindable property. Declaration public static readonly BindableProperty GroupNameProperty Field Value Type Description BindableProperty OnProperty Identifies the On bindable property. Declaration public static readonly BindableProperty OnProperty Field Value Type Description BindableProperty TextProperty Identifies the Text bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty Properties GroupName Gets or sets the group name of the radio button. This is a bindable property. Declaration public string GroupName { get; set; } Property Value Type Description System.String On Gets or sets the state of the radio button. This is a bindable property. Declaration public bool On { get; set; } Property Value Type Description System.Boolean Text Gets or sets the text displayed next to the radio button. This is a bindable property. Declaration public string Text { get; set; } Property Value Type Description System.String Events OnChanged Triggered when the radio button has changed value. Declaration public event EventHandler<CheckedChangedEventArgs> OnChanged Event Type Type Description System.EventHandler < CheckedChangedEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CarouselViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CarouselViewRenderer.html",
    "title": "Class CarouselViewRenderer",
    "keywords": "Class CarouselViewRenderer Inheritance System.Object CarouselViewRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CarouselViewRenderer : Xamarin.Forms.Platform.Tizen.CarouselViewRenderer Methods UpdateRotaryInteraction(Boolean) Declaration protected override void UpdateRotaryInteraction(bool enable) Parameters Type Name Description System.Boolean enable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html",
    "title": "Class CircleListViewRenderer",
    "keywords": "Class CircleListViewRenderer Inheritance System.Object ListViewRenderer CircleListViewRenderer Inherited Members ListViewRenderer.UpdateRotaryInteraction(Boolean) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleListViewRenderer : ListViewRenderer Constructors CircleListViewRenderer() Declaration public CircleListViewRenderer() Methods CreateNativeControl() Declaration protected override Xamarin.Forms.Platform.Tizen.Native.ListView CreateNativeControl() Returns Type Description Xamarin.Forms.Platform.Tizen.Native.ListView Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing"
  },
  "api/Tizen.Wearable.CircularUI.Forms.BezelInteractionPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.BezelInteractionPage.html",
    "title": "Class BezelInteractionPage",
    "keywords": "Class BezelInteractionPage The BezelInteractionPage is a ContentPage, which allows you to interact with Bezel rotation Inheritance System.Object BezelInteractionPage Implements IBezelInteractionRouter Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class BezelInteractionPage : ContentPage, IBezelInteractionRouter Fields RotaryFocusObjectProperty BindableProperty. Identifies the RotaryFocusObject bindable property Key. Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description BindableProperty Properties RotaryFocusObject Gets or sets object of RotaryFocusObject to receive bezel action(take a rotary event) from the current page. Declaration public IRotaryFocusable RotaryFocusObject { get; set; } Property Value Type Description IRotaryFocusable Methods OnAppearing() Declaration protected override void OnAppearing() OnDisappearing() Declaration protected override void OnDisappearing() Implements IBezelInteractionRouter"
  },
  "api/Tizen.Wearable.CircularUI.Forms.SingleTextCell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.SingleTextCell.html",
    "title": "Class SingleTextCell",
    "keywords": "Class SingleTextCell A Cell with a signle text. The Detail property is always ignored. Inheritance System.Object SelectModeTextCell SingleTextCell Inherited Members SelectModeTextCell.IsSelectedProperty SelectModeTextCell.IsSelectionModeEnabledProperty SelectModeTextCell.IsSelected SelectModeTextCell.IsSelectionModeEnabled SelectModeTextCell.SelectionChanged Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class SingleTextCell : SelectModeTextCell, ISelectModeCell"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ContentButton.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ContentButton.html",
    "title": "Class ContentButton",
    "keywords": "Class ContentButton The ContentButton is a Button, which allows you to customize the View to be displayed. Inheritance System.Object ContentButton Implements IButtonController Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ContentButton : ContentView, IButtonController Fields CommandParameterProperty BindableProperty. Identifies the CommandParameter bindable property. Declaration public static readonly BindableProperty CommandParameterProperty Field Value Type Description BindableProperty CommandProperty BindableProperty. Identifies the Command bindable property. Declaration public static readonly BindableProperty CommandProperty Field Value Type Description BindableProperty Properties Command Gets or sets command that is executed when the button is clicked. Declaration public ICommand Command { get; set; } Property Value Type Description System.Windows.Input.ICommand CommandParameter Gets or sets command paramter that is executed when the button is clicked. Declaration public object CommandParameter { get; set; } Property Value Type Description System.Object Methods OnBindingContextChanged() Declaration protected override void OnBindingContextChanged() Events Clicked Occurs when the button is clicked. Declaration public event EventHandler Clicked Event Type Type Description System.EventHandler Pressed Occurs when the button is pressed. Declaration public event EventHandler Pressed Event Type Type Description System.EventHandler Released Occurs when the button is released. Declaration public event EventHandler Released Event Type Type Description System.EventHandler Implements IButtonController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html",
    "title": "Enum PositionOption",
    "keywords": "Enum PositionOption Enumeration for position type of popup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum PositionOption Fields Name Description Absolute The value of Offset is X, Y and popup is placed on the screen. BottomOfView The popup appears at the bottom of the View using the Effect. The position is changed by Offset in the center of View. CenterOfParent In the center of the screen, move by the Offset in the Popup. Relative Set Offset.X * Window.Width, Offset.Y * Window.Height."
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircularShell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircularShell.html",
    "title": "Class CircularShell",
    "keywords": "Class CircularShell A subclass of Xamarin.Forms.Shell that have additional options for circular screen. Inheritance System.Object CircularShell Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircularShell : Shell Fields FlyoutForegroundColorProperty BindableProperty. Identifies the FlyoutForegroundColor bindable property. Declaration public static readonly BindableProperty FlyoutForegroundColorProperty Field Value Type Description BindableProperty FlyoutIconBackgroundColorProperty BindableProperty. Identifies the FlyoutIconBackgroundColor bindable property. Declaration public static readonly BindableProperty FlyoutIconBackgroundColorProperty Field Value Type Description BindableProperty Properties FlyoutForegroundColor Gets or sets FlyoutForegroundColor Declaration public Color FlyoutForegroundColor { get; set; } Property Value Type Description Color FlyoutIconBackgroundColor Gets or sets FlyoutIconBackgroundColor Declaration public Color FlyoutIconBackgroundColor { get; set; } Property Value Type Description Color Methods GetFlyoutForegroundColor(BindableObject) Get a color of FlyoutForegroundColor Declaration public static Color GetFlyoutForegroundColor(BindableObject element) Parameters Type Name Description BindableObject element Xamarin.Forms.Shell Returns Type Description Color Returns a Color of FlyoutForegroundColor GetFlyoutIconBackgroundColor(BindableObject) Get a color of FlyoutIconBackgroundColor Declaration public static Color GetFlyoutIconBackgroundColor(BindableObject element) Parameters Type Name Description BindableObject element Xamarin.Forms.Shell Returns Type Description Color Returns a Color of FlyoutIconBackgroundColor OnBackButtonPressed() Declaration protected override bool OnBackButtonPressed() Returns Type Description System.Boolean SetFlyoutForegroundColor(BindableObject, Color) Set a color of FlyoutForegroundColor Declaration public static void SetFlyoutForegroundColor(BindableObject element, Color color) Parameters Type Name Description BindableObject element Xamarin.Forms.Shell Color color Xamarin.Forms.Color SetFlyoutIconBackgroundColor(BindableObject, Color) Set a color of FlyoutIconBackgroundColor Declaration public static void SetFlyoutIconBackgroundColor(BindableObject element, Color color) Parameters Type Name Description BindableObject element Xamarin.Forms.Shell Color color Xamarin.Forms.Color"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html",
    "title": "Class CircleSliderSurfaceItemImplements",
    "keywords": "Class CircleSliderSurfaceItemImplements Inheritance System.Object CircleSliderSurfaceItemImplements Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleSliderSurfaceItemImplements : ElmSharp.Wearable.CircleSlider Constructors CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem, EvasObject, CircleSurface) Declaration public CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem item, EvasObject parent, CircleSurface surface) Parameters Type Name Description CircleSliderSurfaceItem item EvasObject parent CircleSurface surface"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html",
    "title": "Interface ICircleSurfaceItem",
    "keywords": "Interface ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface ICircleSurfaceItem Properties IsVisible Gets or sets CircleSurfaceItem's visibility Declaration bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html",
    "title": "Class CheckRenderer",
    "keywords": "Class CheckRenderer Inheritance System.Object CheckRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CheckRenderer : SwitchRenderer Constructors CheckRenderer() Declaration public CheckRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Switch>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Switch> e) Parameters Type Name Description ElementChangedEventArgs < Switch > e"
  },
  "api/UIComponents.Tizen.Wearable.Renderers.CircleImageRenderer.html": {
    "href": "api/UIComponents.Tizen.Wearable.Renderers.CircleImageRenderer.html",
    "title": "Class CircleImageRenderer",
    "keywords": "Class CircleImageRenderer Inheritance System.Object CircleImageRenderer Namespace : UIComponents.Tizen.Wearable.Renderers Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleImageRenderer : ViewRenderer<CircleImage, Xamarin.Forms.Platform.Tizen.Native.Image> Methods OnElementChanged(ElementChangedEventArgs<CircleImage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleImage> e) Parameters Type Name Description ElementChangedEventArgs < CircleImage > e OnElementPropertyChanged(Object, PropertyChangedEventArgs) Declaration protected override void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e) Parameters Type Name Description System.Object sender PropertyChangedEventArgs e UpdateAfterLoading() Declaration protected virtual void UpdateAfterLoading()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewRenderer.html",
    "title": "Class ListViewRenderer",
    "keywords": "Class ListViewRenderer Inheritance System.Object ListViewRenderer CircleListViewRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class ListViewRenderer : Xamarin.Forms.Platform.Tizen.ListViewRenderer Methods UpdateRotaryInteraction(Boolean) Declaration protected override void UpdateRotaryInteraction(bool enable) Parameters Type Name Description System.Boolean enable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html",
    "title": "Class PopupEntryRenderer",
    "keywords": "Class PopupEntryRenderer Inheritance System.Object PopupEntryRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PopupEntryRenderer : EntryRenderer Constructors PopupEntryRenderer() Declaration public PopupEntryRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Xamarin.Forms.Entry>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Xamarin.Forms.Entry> e) Parameters Type Name Description ElementChangedEventArgs < Xamarin.Forms.Entry > e OnElementPropertyChanged(Object, PropertyChangedEventArgs) Declaration protected override void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e) Parameters Type Name Description System.Object sender PropertyChangedEventArgs e"
  },
  "api/Tizen.Wearable.CircularUI.Renderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Renderer.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Renderer",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Renderer Classes MediaViewRenderer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Shell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Shell.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Shell",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Shell Classes CircularShellSectionItemsRenderer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircularShellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircularShellRenderer.html",
    "title": "Class CircularShellRenderer",
    "keywords": "Class CircularShellRenderer Inheritance System.Object CircularShellRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircularShellRenderer : Xamarin.Forms.Platform.Tizen.Watch.ShellRenderer Constructors CircularShellRenderer() Declaration public CircularShellRenderer() Methods CreateNavigationDrawer(EvasObject) Declaration protected override Xamarin.Forms.Platform.Tizen.Watch.NavigationDrawer CreateNavigationDrawer(EvasObject parent) Parameters Type Name Description EvasObject parent Returns Type Description Xamarin.Forms.Platform.Tizen.Watch.NavigationDrawer CreateNavigationView(EvasObject) Declaration protected override Xamarin.Forms.Platform.Tizen.Watch.NavigationView CreateNavigationView(EvasObject parent) Parameters Type Name Description EvasObject parent Returns Type Description Xamarin.Forms.Platform.Tizen.Watch.NavigationView OnNavigationDrawerToggled(Object, EventArgs) Declaration protected override void OnNavigationDrawerToggled(object sender, EventArgs e) Parameters Type Name Description System.Object sender EventArgs e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.RotaryService.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.RotaryService.html",
    "title": "Class RotaryService",
    "keywords": "Class RotaryService Inheritance System.Object RotaryService Implements IRotaryService Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class RotaryService : object, IRotaryService Events Rotated Declaration public event EventHandler<RotaryEventArgs> Rotated Event Type Type Description EventHandler < RotaryEventArgs > Implements IRotaryService"
  },
  "guide/Overview.html": {
    "href": "guide/Overview.html",
    "title": "Developer Guides",
    "keywords": "Developer Guides Welcome to the Tizen Circular UI guides."
  },
  "guide/PermitDeviceToInstallApps.html": {
    "href": "guide/PermitDeviceToInstallApps.html",
    "title": "Permit Device To Install Applications",
    "keywords": "Permit Device To Install Applications In the menu bar, click Tools > Tizen > Tizen Device Manager . Right-click anywhere in the file explorer of the Device Manager and select Permit to install applications . Troubleshooting If failed to install application to device, follow the instructions: Verify the device date and time. If the certificate issued is before the device date and time, the application cannot be installed, as the certificate is considered invalid. Verify whether the permit to install applications process is performed correctly."
  },
  "guide/BezelInteractionPage.html": {
    "href": "guide/BezelInteractionPage.html",
    "title": "BezelInteractionPage",
    "keywords": "BezelInteractionPage BezelInteractionPage is basically a Xamarin.Forms.ContentPage but with an additional property, RotaryFocusObject , that helps developers interact with the bezel rotation. Normally, a focused control in an application gets the bezel interaction. However, BezelInteractionPage gives the full control of which control gets the bezel interaction in the current page to developers. How to set RotaryFocusObject ? Here is the list of controls that can be directly set to RotaryFocusObject and that react to bezel rotation. Xamarin.Forms controls ScrollView , ListView , DatePicker , TimePicker , Stepper , CollectionView Tizen CircularUI controls CircleScrollView , CircleListView , CircleDateTimeSelector , CircleStepper Or, developers can customize how the object reacts when it gets bezel interaction by inheriting IRotaryEventReceiver . IRotaryEventReceiver is a receiver interface to take rotary events, and it includes Rotate(RotaryEventArgs method to implement. Create BezelInteractionPage You can easily create and use BezelInteractionPage in C# or XAML file. Refer to TCBezelInteractionPage code at the Tizen.CircularUI\\test\\WearableUIGallery\\WearableUIGallery\\TC\\TCBezelInteractionPage.xaml <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:BezelInteractionPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:d=\"http://xamarin.com/schemas/2014/forms/design\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" mc:Ignorable=\"d\" x:Class=\"WearableUIGallery.TC.TCBezelInteractionPage\" RotaryFocusObject=\"{x:Reference Spaceman}\"> <ContentPage.Content> <AbsoluteLayout> <Image x:Name=\"Universe\" Source=\"image/stars_background.png\" AbsoluteLayout.LayoutBounds=\"0, 0, 1, 1\" AbsoluteLayout.LayoutFlags=\"All\"/> <local:RotaryFocusImage x:Name=\"Spaceman\" Source=\"image/spaceman.png\" AbsoluteLayout.LayoutBounds=\"0.5, 0.2\" AbsoluteLayout.LayoutFlags=\"PositionProportional\" AnchorX=\"0.5\" AnchorY=\"1.5\"/> <Image x:Name=\"SliderTarget\" Source=\"image/tw_ic_popup_btn_check.png\" AbsoluteLayout.LayoutBounds=\"0.5, 0.5\" AbsoluteLayout.LayoutFlags=\"PositionProportional\" AutomationId=\"check\"/> <w:CircleSurfaceView AbsoluteLayout.LayoutBounds=\"0, 0, 1, 1\" AbsoluteLayout.LayoutFlags=\"All\" InputTransparent=\"True\"> <w:CircleSurfaceView.CircleSurfaceItems> <w:CircleSliderSurfaceItem x:Name=\"Slider\" BackgroundColor=\"Blue\" BackgroundLineWidth=\"12\" BackgroundRadius=\"168\" BarRadius=\"168\" BarColor=\"Silver\" BarLineWidth=\"10\" Increment=\"1\" Minimum=\"0\" Maximum=\"11\" Value=\"0\"/> </w:CircleSurfaceView.CircleSurfaceItems> </w:CircleSurfaceView> </AbsoluteLayout> </ContentPage.Content> </w:BezelInteractionPage> C# file using Xamarin.Forms; using Xamarin.Forms.Xaml; using Tizen.Wearable.CircularUI.Forms; namespace WearableUIGallery.TC { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCBezelInteractionPage : BezelInteractionPage { TapGestureRecognizer _universeClicked; TapGestureRecognizer _spacemanClicked; TapGestureRecognizer _sliderClicked; public TCBezelInteractionPage() { InitializeComponent(); var universe = new RotaryFocusProxy(Universe); _universeClicked = new TapGestureRecognizer(); _universeClicked.Command = new Command(() => RotaryFocusObject = universe); _spacemanClicked = new TapGestureRecognizer(); _spacemanClicked.Command = new Command(() => RotaryFocusObject = Spaceman); _sliderClicked = new TapGestureRecognizer { Command = new Command(() => RotaryFocusObject = Slider) }; Universe.GestureRecognizers.Add(_universeClicked); Spaceman.GestureRecognizers.Add(_spacemanClicked); SliderTarget.GestureRecognizers.Add(_sliderClicked); } } }"
  },
  "guide/Radio.html": {
    "href": "guide/Radio.html",
    "title": "Radio",
    "keywords": "Radio Warning Radio is obsolete as of version 1.5.0. Please use Xamarin.Forms.RadioButton instead. Radio → Xamarin.Forms.RadioButton Value → Xamarin.Forms.RadioButton.Text IsSelected → Xamarin.Forms.RadioButton.IsChecked GroupName → Xamarin.Forms.RadioButton.GroupName Color → Xamarin.Forms.RadioButton.BackgroundColor Selected → Xamarin.Forms.RadioButton.CheckChanged CircleSurfaceEffectBehavior → BezelInteractionPage Radio displays one or more options. You can select only one of the options having same GroupName property. Radio can select only one item among items having same GroupName property. Create Radio The GroupName property specifies mutually exclusive Radio controls. If you select one Radio control of radio control group, other items are not selected. IsSelected property sets default selected value of Radio control. Selected event occurs when the Radio selection is changed. Value property sets any value of Radio control. Value property is useful to distinguish which item is selected if all Radio control has the same Selected event handler. The following code explains the process of creating Radio . For more information, see Radio API reference . The code example of this guide uses TCRadioStackLayout code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCRadioStackLayout.xaml.cs XAML file <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Vertical\"> <StackLayout Padding=\"50,50\" Orientation=\"Vertical\"> <Label x:Name=\"label1\" FontSize=\"Medium\" HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding RadioLabel1, StringFormat='SoundMode:{0}'}\"/> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Sound.Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding Sound.GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding Sound.IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" Value=\"{Binding Sound.Value}\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Vibrate.Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding Vibrate.GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding Vibrate.IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" Value=\"{Binding Vibrate.Value}\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Mute.Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding Mute.GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding Mute.IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" Value=\"{Binding Mute.Value}\" /> </StackLayout> </StackLayout> </StackLayout> </w:CircleScrollView> </w:CirclePage.Content> C# file public void OnSelected(object sender, SelectedEventArgs args) { Radio radio = sender as Radio; if (radio != null) { Console.WriteLine($\"<<OnSelected>> Radio Value:{radio.Value}, GroupName:{radio.GroupName}, IsSelected:{radio.IsSelected}\"); } } Add Radio in ListViewItem If you want to use Radio control on ListView, you can add Radio control in ViewCell for customizing item. When you use Radio on ListView, you must set HasUnevenRows property True . If you don't set this property, Unwanted item's radio can be selected when you scroll up the ListView Since Xamarin.Forms reuse ListView Item rendering The code example of this guide uses TCRadioListView code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCRadioListView.xaml.cs XAML file <w:CirclePage.BindingContext> <local:TCRadioViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\" HasUnevenRows=\"True\" ItemsSource=\"{Binding SampleData}\"> <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <StackLayout HeightRequest=\"120\" Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" VerticalOptions=\"Center\" Value=\"{Binding Value}\" /> </StackLayout> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate>"
  },
  "guide/CircleStepper.html": {
    "href": "guide/CircleStepper.html",
    "title": "CircleStepper",
    "keywords": "CircleStepper CircleStepper allows you to select a value from a range of incremental values specified with Minimum , Maximum , and Increment properties. It is an extension of Xamarin.Forms.Stepper . WARNING: The marker is no longer supported from Tizen 4.0 SDK which is applied bezel-less UX in 2019. Therefore, the above image is obsolete and marker related API was deprecated. Create CircleStepper Basically CircleStepper looks same as Xamarin.Forms.Stepper , and you can also change the value with Bezel Interactions . The difference from Xamarin.Forms.Stepper is to provide some additional properties for Tizen wearable. CircleStepper has the following properties: Title: This property gets or sets the title on CircleStepper LabelFormat: This property gets or sets the format in which the value is shown. IsWrapEnabled: This property gets or sets a status of Value is wrapped. WheelAppeared: This event occurs when the CircleStepper 's wheel is appeared. WheelDisappeared: This event occurs when the CircleStepper 's wheel is disappeared. This example consists of StackLayout with a CircleStepper and two Labels in the CirclePage . Since 9 is set to Minimum and LabelFormat is set to \"% 1.1f\", \"9.0\" appears on the screen. Since the Increment is 7.5, it increases by 7.5 when you turn the bezel and increase the Value . The Maximum defined value is 99, hence the marker does not exceed this value. For more information, see the following links: CircleStepper API reference Xamarin.Forms.Stepper API reference Xamarin.Forms.Stepper Guide The code example of this guide uses XUIComponent's SpinnerDefault of CircleSpinner code. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleSpinner\\SpinnerViewModel.cs and SpinnerDefault.xaml The following code shows how to use CircleStepper: C# file public class SpinnerViewModel : INotifyPropertyChanged { double _value= 9.0; ... public double Value { get => _value; set { if (_value == value) return; _value = value; OnPropertyChanged(); } } XAML file <ContentPage x:Class=\"UIComponents.Samples.CircleSpinner.SpinnerDefault\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleSpinner\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" xmlns:tizen=\"clr-namespace:Xamarin.Forms.PlatformConfiguration.TizenSpecific;assembly=Xamarin.Forms.Core\"> <ContentPage.BindingContext> <local:SpinnerViewModel /> </ContentPage.BindingContext> <ContentPage.Content> <StackLayout Padding=\"0,50,0,0\" Orientation=\"Vertical\"> <Label FontAttributes=\"Bold\" FontSize=\"11\" HorizontalTextAlignment=\"Center\" Text=\"Title\" TextColor=\"#0FB4EF\" /> <Label FontSize=\"8\" HorizontalTextAlignment=\"Center\" Text=\"unit\" TextColor=\"White\" /> <w:CircleStepper x:Name=\"stepper\" HorizontalOptions=\"CenterAndExpand\" Increment=\"7.5\" LabelFormat=\"%1.1f\" MarkerColor=\"Coral\" Maximum=\"99.0\" Minimum=\"9.0\" Value=\"{Binding Value}\" /> <Button Command=\"{Binding ButtonPressedExit}\" Text=\"OK\" tizen:VisualElement.Style=\"{x:Static tizen:ButtonStyle.Bottom}\" /> </StackLayout> </ContentPage.Content> </ContentPage>"
  },
  "guide/Localization.html": {
    "href": "guide/Localization.html",
    "title": "Localization",
    "keywords": "Localization This document describes how to localize your Tizen Xamarin.Forms application. String Localization Display the correct Language Image Localization Application Name Localization String Localization You can begin with reading the following how-to article of Xamarin.Forms Localization. For more information on String Localization, see Xamarin.Forms Localization . Explain how to create a resource file Add the RESX resource files that will be used to store all the text used in the your application. Change the string visibility from internal to public. Select your resx file and click Properties . In the Configuration Properties, change Custom Tool to PublicResXFileCodeGenerator as shown in the following image: Add language-specific resource files, which must follow a specific naming convention and use the same filename as the base resources file. Explain how to use a resource file Use name of texts with String type in the RESX files in your user interface code. C# file var speedLabel = new Label (); var maximumLabel = new Label (); speedLabel.Text = AppResources.Speed; maximumLabel.Text = AppResources.Maximum; Use name of texts with String type in the RESX files in the your xaml code. XAML file <Application x:Class=\"Speedmeter.App\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:Speedmeter\" xmlns:resx=\"clr-namespace:Speedmeter.Resx;\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <Application.MainPage> <w:CirclePage> <CirclePage.Content> <AbsoluteLayout> <Label x:Name=\"SpeedLabel\" AbsoluteLayout.LayoutBounds=\"0.5, 0.3\" AbsoluteLayout.LayoutFlags=\"PositionProportional\" Style=\"{StaticResource LabelStyle-Base}\" Text=\"{x:Static resx:AppResources.Speed}\" /> <Label x:Name=\"AverageLabel\" AbsoluteLayout.LayoutBounds=\"0.2, 0.7\" AbsoluteLayout.LayoutFlags=\"PositionProportional\" Style=\"{StaticResource LabelStyle-Base}\" Text=\"{x:Static resx:AppResources.Average}\" /> Display the correct Language To display the correct language, you must implement additional code in your project to determine which language the user has selected. Please refer to following Xamarin.Forms article. For more information, see Display the correct Language . Define an interface to use your DependencyService : public interface ILocalize { CultureInfo CurrentCultureInfo { get; } void SetLocale(CultureInfo ci); } Implement the DependencyService in Tizen platform project for getting current system language setting.( SystemSettings API is included in Tizen.Net nuget package) [assembly: Dependency(typeof(LocaleService))] namespace Speedmeter.Tizen.Wearable.DependencyService { class LocaleService : ILocalize { CultureInfo _currentCultureInfo; public LocaleService() { _currentCultureInfo = GetCurrentCultureInfo(); // To get notified when system locale settings has been changed SystemSettings.LocaleLanguageChanged += LanguageChanged; } public CultureInfo CurrentCultureInfo { get { return _currentCultureInfo; } } public void SetLocale(CultureInfo info) { Thread.CurrentThread.CurrentCulture = info; Thread.CurrentThread.CurrentUICulture = info; } CultureInfo GetCurrentCultureInfo() { var netLanguage = \"en\"; var TizenLocale = SystemSettings.LocaleLanguage; netLanguage = TizenToDotnetLanguage(TizenLocale.ToString().Replace(\"_\", \"-\")); CultureInfo info = null; try { info = new CultureInfo(netLanguage); } catch (CultureNotFoundException e1) { Console.WriteLine(\"cannot find the current cultureInfo. so use 'en'. (\" + e1.Message + \")\"); info = new CultureInfo(\"en\"); } return info; } private void LanguageChanged(object sender, LocaleLanguageChangedEventArgs e) { CultureInfo info = GetCurrentCultureInfo(); _currentCultureInfo = info; // Notify the change of locale information MessagingCenter.Send<ILocalize, CultureInfo>(this, \"LanguageChanged\", info); } string TizenToDotnetLanguage(string tizenLanguage) { var netLanguage = tizenLanguage; //certain languages need to be converted to CultureInfo equivalent switch (tizenLanguage) { case \"zh-CN\": // Chinese Simplified (People's Republic of China) netLanguage = \"zh-Hans\"; // correct code for .NET break; case \"zh-HK\": // Chinese Traditional (Hong Kong) case \"zh-hk\": case \"zh-tw\": // Chinese Traditional (Taiwan) case \"zh-TW\": netLanguage = \"zh-Hant\"; // correct code for .NET break; } Console.WriteLine(\"[Speedmeter] .NET Language/Locale:\" + netLanguage); return netLanguage; } } } Use the DependencyService in the Xamarin.Forms application to call the interface and set your RESX resource culture to the correct value. You can receive the culture information using MessagingCenter . You can also update your application UI when your application is running and system language has been changed. var ci = DependencyService.Get<ILocalize>().CurrentCultureInfo; Resx.AppResources.Culture = ci; // set the RESX for resource localization DependencyService.Get<ILocalize>().SetLocale(ci); // Whenever language has been changed, CurrentCulture will be updated. MessagingCenter.Subscribe<ILocalize, CultureInfo>(this, \"LanguageChanged\", (obj, culture) => { Resx.AppResources.Culture = culture; DependencyService.Get<ILocalize>().SetLocale(culture); //update your App UI }); Image Localization Tizen project supports localized images(resources) using different resource directories. Tizen uses res.xml file to specify the information about the directory, which contains the localized resources(For example, Image, Sound, and so on). The res.xml file is automatically generated when you build your application. To add the localized resource directories in your application in Visual Studio: In Solution Explorer, select Tizen project. Go to Tools > Tizen > Resource Manager Resource Manager window appears. In Configuration tab, select from the language drop-down list. Select the language, Click Add . Resource directories are automatically created in Tizen project as res.xml file. This file is generated in res directory of Tizen project after building an application as: Note Your application can sometimes run in a locale, for which you have not provided images. In that case, Tizen loads the default image from the resource content directory (yourApp.Tizen/res/content/). If there is no default image within resource content directory and the device sets the locale, for which you have not provided images, an error occurs. When you detect locale changes, you must update the resource culture. Then you must update the texts and images, which you want to localize. As for localized images, you can make custom image renderer to load the proper locale-specific images. Tizen provides the path of locale-specific images via ResourceManager.TryGetPath and ResourceManager.GetPath methods. With this, you can change class LocalizedImageRenderer :ImageRenderer using TizenResourceManager = Tizen.Applications.ResourceManager; public LocalizedImageRenderer() : base() { SystemSettings.LocaleLanguageChanged += SystemSettings_LocaleLanguageChanged; } // Invoked every time the language setting has been changed private void SystemSettings_LocaleLanguageChanged(object sender, LocaleLanguageChangedEventArgs e) { // Get the path of a proper image based on locale and update the source of an image Element.Source = TizenResourceManager.TryGetPath(TizenResourceManager.Category.Image, fileName); } Application Name Localization You can add localized application name and icon using tizen-manifest.xml in the Tizen project. Open the tizen-manifest.xml , select the Localization tab and click Add to add Name . Add application names for languages you want to support."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.FlatViewCellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.FlatViewCellRenderer.html",
    "title": "Class FlatViewCellRenderer",
    "keywords": "Class FlatViewCellRenderer Inheritance System.Object FlatViewCellRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class FlatViewCellRenderer : ViewCellRenderer Constructors FlatViewCellRenderer() Declaration public FlatViewCellRenderer()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.SelectModeTextCellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.SelectModeTextCellRenderer.html",
    "title": "Class SelectModeTextCellRenderer",
    "keywords": "Class SelectModeTextCellRenderer Inheritance System.Object SelectModeTextCellRenderer SingleTextCellRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class SelectModeTextCellRenderer : TextCellRenderer Constructors SelectModeTextCellRenderer() Declaration public SelectModeTextCellRenderer() SelectModeTextCellRenderer(String) Declaration protected SelectModeTextCellRenderer(string style) Parameters Type Name Description System.String style Properties SelectionPart Declaration protected string SelectionPart { get; set; } Property Value Type Description System.String Methods OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) Declaration protected override bool OnCellPropertyChanged(Cell cell, string property, Dictionary<string, EvasObject> realizedView) Parameters Type Name Description Cell cell System.String property Dictionary < System.String , EvasObject > realizedView Returns Type Description System.Boolean OnGetContent(Cell, String) Declaration protected override EvasObject OnGetContent(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description EvasObject"
  },
  "api/Tizen.Wearable.CircularUI.Forms.GoogleMapType.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.GoogleMapType.html",
    "title": "Enum GoogleMapType",
    "keywords": "Enum GoogleMapType Enumeration for the Google Map type of the MapView. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum GoogleMapType Fields Name Description Hybrid The mixture of normal and satellite views. Roadmap The default road map view. This is the default map type. Satellite The Google Earth satellite images. Terrain The physical map based on terrain information."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Check2TextCellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Check2TextCellRenderer.html",
    "title": "Class Check2TextCellRenderer",
    "keywords": "Class Check2TextCellRenderer Inheritance System.Object CheckCellRenderer Check2TextCellRenderer Inherited Members CheckCellRenderer.MainPart CheckCellRenderer.CheckBoxPart CheckCellRenderer.OnGetContent(Cell, String) CheckCellRenderer.OnReusableContent(Cell, String, EvasObject) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class Check2TextCellRenderer : CheckCellRenderer Constructors Check2TextCellRenderer() Declaration public Check2TextCellRenderer() Check2TextCellRenderer(String) Declaration protected Check2TextCellRenderer(string style) Parameters Type Name Description System.String style Properties DetailPart Declaration protected string DetailPart { get; set; } Property Value Type Description System.String Methods OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) Declaration protected override bool OnCellPropertyChanged(Cell cell, string property, Dictionary<string, EvasObject> realizedView) Parameters Type Name Description Cell cell System.String property Dictionary < System.String , EvasObject > realizedView Returns Type Description System.Boolean Overrides CheckCellRenderer.OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) OnGetText(Cell, String) Declaration protected override Span OnGetText(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description Span Overrides CheckCellRenderer.OnGetText(Cell, String)"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html",
    "title": "Class IndexPage",
    "keywords": "Class IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. Inheritance System.Object IndexPage Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [Obsolete(\"IndexPage is obsolete as of version 1.5.0. Please use Xamarin.Forms.CarouselView and Xamarin.Forms.IndicatorView instead.\")] public class IndexPage : MultiPage<ContentPage> Methods CreateDefault(Object) Declaration protected override ContentPage CreateDefault(object item) Parameters Type Name Description System.Object item Returns Type Description ContentPage"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ContentButtonRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ContentButtonRenderer.html",
    "title": "Class ContentButtonRenderer",
    "keywords": "Class ContentButtonRenderer Inheritance System.Object ContentButtonRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class ContentButtonRenderer : LayoutRenderer Methods OnElementChanged(ElementChangedEventArgs<Xamarin.Forms.Layout>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Xamarin.Forms.Layout> e) Parameters Type Name Description ElementChangedEventArgs < Xamarin.Forms.Layout > e UpdateLayout() Declaration protected override void UpdateLayout()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.SelectModeImageCell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.SelectModeImageCell.html",
    "title": "Class SelectModeImageCell",
    "keywords": "Class SelectModeImageCell An ImageCell supports a selection mode. Inheritance System.Object SelectModeImageCell Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class SelectModeImageCell : ImageCell, ISelectModeCell Fields IsSelectedProperty Identifies the On bindable property. Declaration public static readonly BindableProperty IsSelectedProperty Field Value Type Description BindableProperty IsSelectionModeEnabledProperty Identifies the Text bindable property. Declaration public static readonly BindableProperty IsSelectionModeEnabledProperty Field Value Type Description BindableProperty Properties IsSelected Gets or sets the state of the selection. This is a bindable property. Declaration public bool IsSelected { get; set; } Property Value Type Description System.Boolean IsSelectionModeEnabled Gets or sets whether to enable the selection mode or not. This is a bindable property. Declaration public bool IsSelectionModeEnabled { get; set; } Property Value Type Description System.Boolean Events SelectionChanged Triggered when IsSelected changed. Declaration public event EventHandler<ToggledEventArgs> SelectionChanged Event Type Type Description System.EventHandler < ToggledEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Check2TextCell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Check2TextCell.html",
    "title": "Class Check2TextCell",
    "keywords": "Class Check2TextCell A Cell with two labels and a Check. Inheritance System.Object CheckCell Check2TextCell Inherited Members CheckCell.OnProperty CheckCell.TextProperty CheckCell.OnColorProperty CheckCell.OnColor CheckCell.On CheckCell.Text CheckCell.OnChanged Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Check2TextCell : CheckCell Fields DetailProperty Identifies the Detail bindable property. Declaration public static readonly BindableProperty DetailProperty Field Value Type Description BindableProperty Properties Detail Gets or sets the sub text displayed next to the checkbox. This is a bindable property. Declaration public string Detail { get; set; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.BezelInteractionPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.BezelInteractionPageRenderer.html",
    "title": "Class BezelInteractionPageRenderer",
    "keywords": "Class BezelInteractionPageRenderer Inheritance System.Object PageRenderer BezelInteractionPageRenderer Implements IBezelInteractionController Inherited Members PageRenderer.CreateMoreOptionItem(ToolbarItem) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class BezelInteractionPageRenderer : PageRenderer, IBezelInteractionController Constructors BezelInteractionPageRenderer() Declaration public BezelInteractionPageRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Page>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Page> e) Parameters Type Name Description ElementChangedEventArgs < Page > e OnElementReady() Declaration protected override void OnElementReady() OnMoreOptionClosed() Declaration protected override void OnMoreOptionClosed() OnMoreOptionOpened() Declaration protected override void OnMoreOptionOpened() Explicit Interface Implementations IBezelInteractionController.Activate() Declaration void IBezelInteractionController.Activate() IBezelInteractionController.Deactivate() Declaration void IBezelInteractionController.Deactivate() IBezelInteractionController.RotaryFocusObject Declaration IRotaryFocusable IBezelInteractionController.RotaryFocusObject { get; } Returns Type Description IRotaryFocusable Implements IBezelInteractionController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.InitOptions.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.InitOptions.html",
    "title": "Class InitOptions",
    "keywords": "Class InitOptions Inheritance System.Object InitOptions Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class InitOptions : object Constructors InitOptions(CoreApplication) Declaration public InitOptions(CoreApplication application) Parameters Type Name Description CoreApplication application InitOptions(CoreApplication, String) Declaration public InitOptions(CoreApplication application, string googleMapsAPIKey) Parameters Type Name Description CoreApplication application System.String googleMapsAPIKey Properties Context Declaration public CoreApplication Context { get; set; } Property Value Type Description CoreApplication GoogleMapsAPIKey Declaration public string GoogleMapsAPIKey { get; set; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.StructuredItemsViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.StructuredItemsViewRenderer.html",
    "title": "Class StructuredItemsViewRenderer",
    "keywords": "Class StructuredItemsViewRenderer Inheritance System.Object StructuredItemsViewRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class StructuredItemsViewRenderer : Xamarin.Forms.Platform.Tizen.StructuredItemsViewRenderer Methods UpdateRotaryInteraction(Boolean) Declaration protected override void UpdateRotaryInteraction(bool enable) Parameters Type Name Description System.Boolean enable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceViewRenderer.html",
    "title": "Class CircleSurfaceViewRenderer",
    "keywords": "Class CircleSurfaceViewRenderer Inheritance System.Object CircleSurfaceViewRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleSurfaceViewRenderer : ViewRenderer<CircleSurfaceView, Box>, ICircleSurfaceItemRenderer Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<CircleSurfaceView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleSurfaceView> e) Parameters Type Name Description ElementChangedEventArgs < CircleSurfaceView > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.SelectModeImageCellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.SelectModeImageCellRenderer.html",
    "title": "Class SelectModeImageCellRenderer",
    "keywords": "Class SelectModeImageCellRenderer Inheritance System.Object SelectModeImageCellRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class SelectModeImageCellRenderer : ImageCellRenderer Constructors SelectModeImageCellRenderer() Declaration public SelectModeImageCellRenderer() SelectModeImageCellRenderer(String) Declaration protected SelectModeImageCellRenderer(string style) Parameters Type Name Description System.String style Properties SelectionPart Declaration protected string SelectionPart { get; set; } Property Value Type Description System.String Methods OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) Declaration protected override bool OnCellPropertyChanged(Cell cell, string property, Dictionary<string, EvasObject> realizedView) Parameters Type Name Description Cell cell System.String property Dictionary < System.String , EvasObject > realizedView Returns Type Description System.Boolean OnGetContent(Cell, String) Declaration protected override EvasObject OnGetContent(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description EvasObject"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html",
    "title": "Class CircleStepper",
    "keywords": "Class CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. Inheritance System.Object CircleStepper Implements IRotaryFocusable ICircleSurfaceConsumer Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStepper : Stepper, IRotaryFocusable, ICircleSurfaceConsumer Fields IsWrapEnabledProperty BindableProperty. Identifies whether min/max value is wrapped or not. Declaration public static readonly BindableProperty IsWrapEnabledProperty Field Value Type Description BindableProperty LabelFormatProperty BindableProperty. Identifies the LabelFormat bindable property. Declaration public static readonly BindableProperty LabelFormatProperty Field Value Type Description BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration [Obsolete(\"MarkerColor bindable property is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public static readonly BindableProperty MarkerColorProperty Field Value Type Description BindableProperty MarkerLineWidthProperty BindableProperty. Identifies the MarkerLineWidth bindable property. Declaration [Obsolete(\"MarkerLineWidth bindable property is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public static readonly BindableProperty MarkerLineWidthProperty Field Value Type Description BindableProperty TitleProperty BindableProperty. Identifies the Title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description BindableProperty Properties CircleSurfaceProvider Gets or sets a CircleSurfaceProvider. Declaration public ICircleSurfaceProvider CircleSurfaceProvider { get; set; } Property Value Type Description ICircleSurfaceProvider IsWrapEnabled Gets or sets a status of Value is wrapped. Declaration public bool IsWrapEnabled { get; set; } Property Value Type Description System.Boolean LabelFormat Gets or sets format in which Value is shown Declaration public string LabelFormat { get; set; } Property Value Type Description System.String MarkerColor Gets or sets Marker color Declaration [Obsolete(\"MarkerColor is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public Color MarkerColor { get; set; } Property Value Type Description Color MarkerLineWidth Gets or sets length of Marker Declaration [Obsolete(\"MarkerLineWidth is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public int MarkerLineWidth { get; set; } Property Value Type Description System.Int32 Title Gets or sets title Declaration public string Title { get; set; } Property Value Type Description System.String Events WheelAppeared Occurs when the circle stepper's wheel is appeared. Declaration public event EventHandler WheelAppeared Event Type Type Description System.EventHandler WheelDisappeared Occurs when the circle stepper's wheel is disappeared. Declaration public event EventHandler WheelDisappeared Event Type Type Description System.EventHandler Implements IRotaryFocusable ICircleSurfaceConsumer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.MediaView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.MediaView.html",
    "title": "Class MediaView",
    "keywords": "Class MediaView The MediaView class is used to display the video output on the screen. Inheritance System.Object MediaView Implements IVideoOutput Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class MediaView : Layout<View>, IVideoOutput Fields PlayerProperty Identifies the Player bindable property. Declaration public static readonly BindableProperty PlayerProperty Field Value Type Description BindableProperty Properties OuputType Gets the video output type. Declaration public virtual VideoOuputType OuputType { get; } Property Value Type Description VideoOuputType Player Gets or sets the media player. Declaration public MediaPlayer Player { get; set; } Property Value Type Description MediaPlayer Methods LayoutChildren(Double, Double, Double, Double) Declaration protected override void LayoutChildren(double x, double y, double width, double height) Parameters Type Name Description System.Double x System.Double y System.Double width System.Double height OnBindingContextChanged() Declaration protected override void OnBindingContextChanged() OnMeasure(Double, Double) Declaration protected override SizeRequest OnMeasure(double widthConstraint, double heightConstraint) Parameters Type Name Description System.Double widthConstraint System.Double heightConstraint Returns Type Description SizeRequest Implements IVideoOutput"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html",
    "title": "Class CircleDateTimeSelectorRenderer",
    "keywords": "Class CircleDateTimeSelectorRenderer Inheritance System.Object CircleDateTimeSelectorRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleDateTimeSelectorRenderer : ViewRenderer<CircleDateTimeSelector, WatchDateTimePicker> Constructors CircleDateTimeSelectorRenderer() Declaration public CircleDateTimeSelectorRenderer() Methods Measure(Int32, Int32) Declaration protected override ElmSharp.Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description ElmSharp.Size MinimumSize() Declaration protected override Xamarin.Forms.Size MinimumSize() Returns Type Description Xamarin.Forms.Size OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector> e) Parameters Type Name Description ElementChangedEventArgs < CircleDateTimeSelector > e UpdateRotaryInteraction(Boolean) Declaration protected override void UpdateRotaryInteraction(bool enable) Parameters Type Name Description System.Boolean enable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html",
    "title": "Interface IRotaryEventReceiver",
    "keywords": "Interface IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryEventReceiver : IRotaryFocusable Methods Rotate(RotaryEventArgs) Rotate it by the RotaryEventArgs value. Declaration void Rotate(RotaryEventArgs args) Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleImage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleImage.html",
    "title": "Class CircleImage",
    "keywords": "Class CircleImage The CircleImage is view that hold an image with circle shape. The CircleImage is extension of Xamarin.Forms.Image. Inheritance System.Object CircleImage Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleImage : Image"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioCellRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioCellRenderer.html",
    "title": "Class RadioCellRenderer",
    "keywords": "Class RadioCellRenderer Inheritance System.Object RadioCellRenderer Radio2TextCellRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class RadioCellRenderer : CellRenderer Constructors RadioCellRenderer() Declaration public RadioCellRenderer() RadioCellRenderer(String) Declaration protected RadioCellRenderer(string style) Parameters Type Name Description System.String style Properties MainPart Declaration protected string MainPart { get; set; } Property Value Type Description System.String RadioPart Declaration protected string RadioPart { get; set; } Property Value Type Description System.String Methods OnCellPropertyChanged(Cell, String, Dictionary<String, EvasObject>) Declaration protected override bool OnCellPropertyChanged(Cell cell, string property, Dictionary<string, EvasObject> realizedView) Parameters Type Name Description Cell cell System.String property Dictionary < System.String , EvasObject > realizedView Returns Type Description System.Boolean OnGetContent(Cell, String) Declaration protected override EvasObject OnGetContent(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description EvasObject OnGetText(Cell, String) Declaration protected override Span OnGetText(Cell cell, string part) Parameters Type Name Description Cell cell System.String part Returns Type Description Span"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.BezelInteractionExtension.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.BezelInteractionExtension.html",
    "title": "Class BezelInteractionExtension",
    "keywords": "Class BezelInteractionExtension Inheritance System.Object BezelInteractionExtension Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class BezelInteractionExtension : object Methods FindBezelController(Element) Declaration public static IBezelInteractionController FindBezelController(this Element element) Parameters Type Name Description Element element Returns Type Description IBezelInteractionController FindBezelRouter(Element) Declaration public static IBezelInteractionRouter FindBezelRouter(this Element element) Parameters Type Name Description Element element Returns Type Description IBezelInteractionRouter"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Radio2TextCell.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Radio2TextCell.html",
    "title": "Class Radio2TextCell",
    "keywords": "Class Radio2TextCell A Cell with two labels and a RadioButton. Inheritance System.Object RadioCell Radio2TextCell Inherited Members RadioCell.OnProperty RadioCell.GroupNameProperty RadioCell.TextProperty RadioCell.On RadioCell.GroupName RadioCell.Text RadioCell.OnChanged Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Radio2TextCell : RadioCell Fields DetailProperty Identifies the Detail bindable property. Declaration public static readonly BindableProperty DetailProperty Field Value Type Description BindableProperty Properties Detail Gets or sets the sub text displayed next to the radio button. This is a bindable property. Declaration public string Detail { get; set; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ItemLongPressedEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ItemLongPressedEventArgs.html",
    "title": "Class ItemLongPressedEventArgs",
    "keywords": "Class ItemLongPressedEventArgs Event arguments for the ItemLongPressed event of CircleListView. Inheritance System.Object System.EventArgs ItemLongPressedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ItemLongPressedEventArgs : EventArgs Constructors ItemLongPressedEventArgs(Object, Int32) Creates a new ItemLongPressedEventArgs object. Declaration public ItemLongPressedEventArgs(object item, int itemIndex) Parameters Type Name Description System.Object item An item data of new long pressed item. System.Int32 itemIndex An index of new long pressed item. Properties Item Gets the data of new long pressed item Declaration public object Item { get; } Property Value Type Description System.Object ItemIndex Gets the index of new long pressed item Declaration public int ItemIndex { get; } Property Value Type Description System.Int32"
  }
}